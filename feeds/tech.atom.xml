<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Those aren't written down are meant to be forgotten - Tech</title><link href="https://blog.wei-lee.me/" rel="alternate"></link><link href="https://blog.wei-lee.me/feeds/tech.atom.xml" rel="self"></link><id>https://blog.wei-lee.me/</id><updated>2024-08-21T23:55:00+08:00</updated><entry><title>謝謝你 elegant，你曾是最棒的</title><link href="https://blog.wei-lee.me/posts/tech/2024/08/thanks-elegant-you-were-the-best" rel="alternate"></link><published>2024-08-21T23:55:00+08:00</published><updated>2024-08-21T23:55:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-08-21:/posts/tech/2024/08/thanks-elegant-you-were-the-best</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;elegant&lt;/a&gt; 曾是 &lt;a href="https://getpelican.com/"&gt;pelican&lt;/a&gt; 最棒的主題&lt;br&gt;
但離上一版 &lt;a href="https://github.com/Pelican-Elegant/elegant/tree/V5.4.0"&gt;v5.4.0&lt;/a&gt; 的釋出已經是三年前的事了&lt;br&gt;
我想也差不多是時候了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;elegant&lt;/a&gt; 曾是 &lt;a href="https://getpelican.com/"&gt;pelican&lt;/a&gt; 最棒的主題&lt;br&gt;
但離上一版 &lt;a href="https://github.com/Pelican-Elegant/elegant/tree/V5.4.0"&gt;v5.4.0&lt;/a&gt; 的釋出已經是三年前的事了&lt;br&gt;
我想也差不多是時候了&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;其實我的&lt;a href="https://travlog.wei-lee.me/"&gt;娛樂向部落格&lt;/a&gt; 已經採用 &lt;a href="https://github.com/arulrajnet/attila"&gt;attila&lt;/a&gt; 很久了&lt;br&gt;
之前一直沒把這個部落格也轉過去的主要原因是 attila 的code highlight 實在太糟糕了&lt;br&gt;
但 elegant 一直也是有幾個我很受不了的點&lt;br&gt;
像是文章中有連結，就會讓下一段的文字的空白變得很奇怪&lt;br&gt;
聽說可以改 CSS，但我前端苦手啊啊啊&lt;/p&gt;
&lt;p&gt;&lt;img alt="huge-pain" src="/images/posts-image/2024-elegant/huge-pain.png"&gt;&lt;/p&gt;
&lt;p&gt;還有分享文章也不是很好看 &lt;del&gt;雖然我記得這是我自己弄的&lt;/del&gt;&lt;br&gt;
&lt;img alt="pain" src="/images/posts-image/2024-elegant/pain.png"&gt;&lt;/p&gt;
&lt;p&gt;趁著這次心血來潮，把 &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;elegant&lt;/a&gt; 用的 &lt;a href="https://clipboardjs.com/"&gt;clipboard.js&lt;/a&gt; 統一到&lt;a href="https://github.com/Lee-W/attila/tree/weilee-customization"&gt;attila - weilee-customization&lt;/a&gt;&lt;br&gt;
以後兩個部落格用同個主題，一次處理也比較方便&lt;/p&gt;
&lt;p&gt;好了，再讓我們看你最後一眼 👀&lt;br&gt;
Adios elegant 👋&lt;/p&gt;
&lt;p&gt;&lt;img alt="last" src="/images/posts-image/2024-elegant/last.png"&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Pelican"></category><category term="Blog"></category></entry><entry><title>Serialize StartTriggerArgs</title><link href="https://blog.wei-lee.me/posts/tech/2024/08/serialize-start-trigger-args" rel="alternate"></link><published>2024-08-18T10:30:00+08:00</published><updated>2024-08-18T10:30:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-08-18:/posts/tech/2024/08/serialize-start-trigger-args</id><summary type="html">&lt;p&gt;This article discusses the implementation details of &lt;code&gt;StartTriggerArgs&lt;/code&gt;, which may not interest most Airflow users. However, if you're a contributor or simply interested in how Airflow works, let's dive in.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This article discusses the implementation details of &lt;code&gt;StartTriggerArgs&lt;/code&gt;, which may not interest most Airflow users. However, if you're a contributor or simply interested in how Airflow works, let's dive in.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;I'll focus on PR &lt;a href="https://github.com/apache/airflow/pull/40993"&gt; Enhance start_trigger_args serialization #40993 &lt;/a&gt;, which fixed an issue in &lt;a href="https://github.com/apache/airflow/pull/39585"&gt; Prevent start trigger initialization in scheduler #39585 &lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="whats-the-issue"&gt;What's the issue?&lt;/h2&gt;
&lt;p&gt;Following the same example as the &lt;a href="https://blog.wei-lee.me/posts/tech/2024/08/enhancing-airflow-task-execution-with-start-trigger-args"&gt;previous article&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.sensors.date_time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DateTimeSensorAsync&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.triggers.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExecuteFromTriggerDateTimeSensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTimeSensor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;trigger_cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;airflow.triggers.temporal.DateTimeTrigger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;trigger_kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;moment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;end_from_trigger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;next_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execute_complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;next_kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;start_from_trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trigger_kwargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;end_from_trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_from_trigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works fine now, but if you check out commit &lt;a href="https://github.com/apache/airflow/commit/84dcfe7e"&gt;fa92727~&lt;/a&gt; (one commit before this fix), you'll encounter error message like the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TypeError: Object of type datetime is not JSON serializable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Surely Airflow can do better.&lt;/p&gt;
&lt;p&gt;&lt;img alt="surely airflow can do better" src="/images/posts-image/2024-serialize-start-trigger-args/dooku.jpg"&gt;&lt;/p&gt;
&lt;h2 id="why-is-this-happening"&gt;Why is this happening?&lt;/h2&gt;
&lt;p&gt;In &lt;a href="https://github.com/apache/airflow/pull/39585/files#diff-e4ec4e631219bf44939d416cf381ce188ae09163ff721103fd2de9d27805d477R27-R42"&gt; Prevent start trigger initialization in scheduler #39585 &lt;/a&gt;, I implemented the &lt;code&gt;StartTriggerArgs.serialize&lt;/code&gt; method this way&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StartTriggerArgs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Arguments required for start task execution from triggerer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;trigger_cls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;next_method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;trigger_kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;trigger_cls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger_cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;trigger_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger_kwargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;next_method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and wish Airflow would magically handle everything for me.&lt;/p&gt;
&lt;p&gt;But,  ...&lt;br&gt;
&lt;img alt="That's not how airflow serialization works" src="/images/posts-image/2024-serialize-start-trigger-args/han.jpg"&gt;&lt;/p&gt;
&lt;h2 id="why-do-we-need-serialization-here"&gt;Why do we need serialization here?&lt;/h2&gt;
&lt;p&gt;Before we discuss how to make the serialization work correctly, we should probably also consider why we need serialization.&lt;/p&gt;
&lt;p&gt;Let's bring back the diagram in the &lt;a href="https://blog.wei-lee.me/posts/tech/2024/06/starts-execution-directly-from-triggerer-without-going-to-worker"&gt;first article&lt;/a&gt;.&lt;/p&gt;
&lt;div class="mermaid"&gt;
sequenceDiagram
autonumber
Scheduler -&gt;&gt; Worker: change the TaskInstanceState to QUEUED
Worker -&gt;&gt; Worker: run "execute" method
Worker -&gt;&gt; Triggerer: raise "TaskDeferred" exception and change TaskInstanceState to DEFERRED
Triggerer -) Triggerer: run "run" method and yield "TriggerEvent"
Triggerer --) Scheduler: Change the TaskInstanceState to SCHEDULED
Scheduler -&gt;&gt; Worker 2: Change the TaskInstanceState to QUEUED
Worker 2 -&gt;&gt; Worker 2: run "next_method"
Worker 2 -&gt;&gt; Scheduler: Change the TaskInstanceState to SUCCESS
&lt;/div&gt;

&lt;p&gt;In step 3, we raise a TaskDeferred exception. It will be caught in &lt;a href="https://github.com/apache/airflow/blob/84dcfe7eb2c3862f543a350db0f1212ea17dc3db/airflow/models/taskinstance.py#L283-L297"&gt;airflow/models/taskinstance.py::_run_raw_task&lt;/a&gt;, which calls &lt;a href="https://github.com/apache/airflow/blob/84dcfe7eb2c3862f543a350db0f1212ea17dc3db/airflow/models/taskinstance.py#L1611"&gt;_defer_task&lt;/a&gt; after &lt;code&gt;defer_task&lt;/code&gt; and writes a trigger row into the &lt;a href="https://github.com/apache/airflow/blob/84dcfe7eb2c3862f543a350db0f1212ea17dc3db/airflow/models/trigger.py#L62"&gt;trigger&lt;/a&gt; table in the database &lt;a href="https://github.com/apache/airflow/blob/84dcfe7eb2c3862f543a350db0f1212ea17dc3db/airflow/models/taskinstance.py#L1643-L1644"&gt;here&lt;/a&gt;. That's why it needs to be serialized.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trigger_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="how-do-we-get-it-resolved"&gt;How do we get it resolved?&lt;/h2&gt;
&lt;p&gt;Returning to the PR &lt;a href="https://github.com/apache/airflow/pull/40993"&gt; Enhance start_trigger_args serialization #40993 &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are aware of the locations for &lt;a href="https://github.com/apache/airflow/pull/40993/files#diff-807ca0a4fd53aeb41166621c9842b0f89b7931fc64e9a60befa36c776db45efaR1126-R1128"&gt;serializing StartTriggerArgs&lt;/a&gt; and &lt;a href="https://github.com/apache/airflow/pull/40993/files#diff-807ca0a4fd53aeb41166621c9842b0f89b7931fc64e9a60befa36c776db45efaR1315-R1318"&gt;deserializing StartTriggerArgs&lt;/a&gt;. The current implementation is incorrect, so our objective is to &lt;a href="https://github.com/apache/airflow/pull/40993/files#diff-807ca0a4fd53aeb41166621c9842b0f89b7931fc64e9a60befa36c776db45efaR353-R386"&gt;rewrite the serialize/deserialize method&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Within the arguments of StartTriggerArgs, &lt;code&gt;trigger_cls&lt;/code&gt; and &lt;code&gt;next_method&lt;/code&gt; are either strings or None, so there isn't much to do with them. However, we'll need to make some additional adjustments for &lt;code&gt;trigger_kwargs&lt;/code&gt; and &lt;code&gt;next_kwargs&lt;/code&gt;, which are dictionaries, and for &lt;code&gt;timeout&lt;/code&gt;, which is a timedelta.&lt;/p&gt;
&lt;p&gt;Since logic for different data types is already implemented in &lt;a href="https://github.com/astronomer/airflow/blob/5036115047aaaa36c07a37108ac87152afd61d8f/airflow/serialization/serialized_objects.py"&gt;airflow/serialization/serialized_objects.py&lt;/a&gt;, we should leverage them. In &lt;a href="https://github.com/astronomer/airflow/blob/5036115047aaaa36c07a37108ac87152afd61d8f/airflow/serialization/serialized_objects.py#L628-L635"&gt;BaseSerialization.serialize&lt;/a&gt;, there's already logic that handles dictionaries so what we need to do is extracting &lt;code&gt;trigger_kwargs&lt;/code&gt; and &lt;code&gt;next_kwargs&lt;/code&gt; and pass them into this method. As for &lt;code&gt;timeout&lt;/code&gt;, we already know it's timedetla and can be &lt;a href="https://github.com/astronomer/airflow/blob/5036115047aaaa36c07a37108ac87152afd61d8f/airflow/serialization/serialized_objects.py#L663"&gt;handled quite easily&lt;/a&gt;, there's no need to call the &lt;code&gt;BaseSerialization.serialize&lt;/code&gt; method again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encode_start_trigger_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Encode a StartTriggerArgs.&lt;/span&gt;
&lt;span class="sd"&gt;    :meta private:&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;serialize_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BaseSerialization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;__type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;START_TRIGGER_ARGS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;trigger_cls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger_cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;trigger_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;serialize_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;trigger_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;next_method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;next_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;serialize_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;next_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_seconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For deserialization, we're following a similar approach, but in reverse.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decode_start_trigger_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Decode a StartTriggerArgs.&lt;/span&gt;
&lt;span class="sd"&gt;    :meta private:&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;deserialize_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BaseSerialization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;trigger_cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;trigger_cls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;trigger_kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;deserialize_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;trigger_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;next_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;next_method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;next_kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;deserialize_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;next_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;

&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Airflow"></category><category term="Airflow 2.10"></category></entry><entry><title>Enhancing Airflow Task Execution with StartTriggerArgs</title><link href="https://blog.wei-lee.me/posts/tech/2024/08/enhancing-airflow-task-execution-with-start-trigger-args" rel="alternate"></link><published>2024-08-12T22:54:00+08:00</published><updated>2024-08-12T22:54:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-08-12:/posts/tech/2024/08/enhancing-airflow-task-execution-with-start-trigger-args</id><summary type="html">&lt;p&gt;As mentioned in &lt;a href="https://blog.wei-lee.me/posts/tech/2024/06/starts-execution-directly-from-triggerer-without-going-to-worker"&gt;Starts Airflow task execution directly from the triggerer&lt;/a&gt;, the syntax of this feature will change after &lt;a href="https://github.com/apache/airflow/pull/39585"&gt;#39585&lt;/a&gt; merged.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As mentioned in &lt;a href="https://blog.wei-lee.me/posts/tech/2024/06/starts-execution-directly-from-triggerer-without-going-to-worker"&gt;Starts Airflow task execution directly from the triggerer&lt;/a&gt;, the syntax of this feature will change after &lt;a href="https://github.com/apache/airflow/pull/39585"&gt;#39585&lt;/a&gt; merged.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;This is needed mainly because we don't want to run any user code in the scheduler, which might happen &lt;a href="https://github.com/apache/airflow/pull/38674/files#"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article will cover the following 3 PRs&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39585"&gt;Prevent start trigger initialization in scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40376"&gt;add next_kwargs to StartTriggerArgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41021"&gt;Add start execution from trigger support for existing core sensors&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PR 2 is a minor fix to PR 1. PR 3 is adding this feature to core sensors.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-does-it-look-like-now"&gt;What does it look like now?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-changed-under-the-hook"&gt;What's changed under the hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="what-does-it-look-like-now"&gt;What does it look like now?&lt;/h2&gt;
&lt;p&gt;The following code snippet shows how to define an operator that can start task execution directly from the trigger. I have kept the code simple and removed unnecessary details.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.sensors.date_time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DateTimeSensorAsync&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.triggers.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExecuteFromTriggerDateTimeSensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTimeSensor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StartTriggerArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;trigger_cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;airflow.triggers.temporal.DateTimeTrigger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;trigger_kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;moment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;end_from_trigger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;next_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execute_complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;next_kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;start_from_trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trigger_kwargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;end_from_trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_from_trigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To enable an operator or a sensor with this feature, we must define the attributes &lt;code&gt;start_trigger_args&lt;/code&gt; and &lt;code&gt;start_from_trigger&lt;/code&gt;. We use &lt;code&gt;start_from_trigger&lt;/code&gt; to determine whether we want to enable this feature and &lt;code&gt;start_trigger_args&lt;/code&gt; to decide which trigger we want to use and how to use it. &lt;code&gt;start_trigger_args&lt;/code&gt; should be an instance of &lt;code&gt;airflow.triggers.base.StartTriggerArgs&lt;/code&gt; and it should contain the following arguments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;trigger_cls&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;the full import path of the trigger to run&lt;/li&gt;
&lt;li&gt;e.g., &lt;code&gt;airflow.triggers.temporal.DateTimeTrigger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trigger_kwargs&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;the keyword arguments passed into the trigger for initialization&lt;/li&gt;
&lt;li&gt;e.g., &lt;code&gt;{"moment": "", "end_from_trigger": False}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next_method&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;the name of the method to run after execution done in the trigger&lt;/li&gt;
&lt;li&gt;Most of the time, it's &lt;code&gt;execute_complete&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next_kwargs&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;the keyword arguments passed into the next method&lt;/li&gt;
&lt;li&gt;Most of the time, it's &lt;code&gt;None&lt;/code&gt;. I never saw it used. 🤔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;the timeout for the trigger&lt;/li&gt;
&lt;li&gt;Most of the time, it'll be set to &lt;code&gt;self.execution_timeout&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the attributes &lt;code&gt;start_trigger_args&lt;/code&gt; and &lt;code&gt;start_from_trigger&lt;/code&gt; are defined as class attributes, we could set &lt;code&gt;trigger_kwargs&lt;/code&gt; as a temporary value and update the values in the &lt;code&gt;__init__&lt;/code&gt; method. However, implementing a DAG with dynamic task mapping on an operator supporting this feature works differently, which will be detailed in the next article.&lt;/p&gt;
&lt;h2 id="whats-changed-under-the-hook"&gt;What's changed under the hook&lt;/h2&gt;
&lt;p&gt;Let's start from &lt;a href="https://github.com/apache/airflow/blob/9901a065fcd93307d8e1d69e34621966d7313511/airflow/models/dagrun.py#L1541-L1545"&gt;airflow/models/dagrun.py&lt;/a&gt;. Airflow verifies if the &lt;code&gt;start_from_trigger&lt;/code&gt; attribute is set to &lt;code&gt;True&lt;/code&gt; and the &lt;code&gt;start_from_trigger&lt;/code&gt; attribute is set. If both conditions are met, the &lt;code&gt;defer_task&lt;/code&gt; method will be called with &lt;code&gt;exception=None&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_from_trigger&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;TaskInstanceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UP_FOR_RESCHEDULE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;try_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defer_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, let's go to &lt;a href="https://github.com/apache/airflow/blob/9901a065fcd93307d8e1d69e34621966d7313511/airflow/models/taskinstance.py#L1607-L1621"&gt;airflow/models/taskinstance.py&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;trigger_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;next_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;
        &lt;span class="n"&gt;next_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;trigger_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;classpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger_cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger_kwargs&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;next_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_kwargs&lt;/span&gt;
        &lt;span class="n"&gt;next_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_method&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;AirflowException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exception and ti.task.start_trigger_args cannot both be None&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We handle standard task deferral in the first &lt;code&gt;if&lt;/code&gt; condition. This happens when a task runs the &lt;code&gt;defer&lt;/code&gt; method and raises a &lt;code&gt;TaskDeferred&lt;/code&gt; exception. For a more detailed version, you can refer to &lt;a href="https://blog.wei-lee.me/posts/tech/2024/06/starts-execution-directly-from-triggerer-without-going-to-worker#how-did-the-deferrable-operator-work-before-this-change"&gt;this link&lt;/a&gt;. Therefore, we need to set &lt;code&gt;exception=None&lt;/code&gt; in the previous code block, as we are not handling it in the standard way.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;elif&lt;/code&gt; statement checks whether this operator has a &lt;code&gt;start_trigger_args&lt;/code&gt; attribute, which indicates that this operator supports the "starting execution from the trigger" feature. Airflow will then load the value from &lt;code&gt;start_trigger_args&lt;/code&gt; and assign it to the variables that will later be used in the rest of the deferral process, similar to the standard task deferral.&lt;/p&gt;
&lt;p&gt;The next article in this series will cover how to utilize this feature with dynamic task mapping (well.. partially). The implementation details will change somewhat, but the core idea remains unchanged.&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Airflow"></category><category term="Airflow 2.10"></category></entry><entry><title>Gobby's Python 讀書會 - 「第十九章 成為 Python 鐵粉」決定版</title><link href="https://blog.wei-lee.me/posts/tech/2024/08/Introducing-Python-ch19-final" rel="alternate"></link><published>2024-08-06T19:58:00+08:00</published><updated>2024-08-06T23:35:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-08-06:/posts/tech/2024/08/Introducing-Python-ch19-final</id><summary type="html">&lt;p&gt;繼上次的&lt;a href="https://blog.wei-lee.me/posts/tech/2024/07/Introducing-Python-ch19-draft"&gt;草稿&lt;/a&gt;後該來個決定版了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;繼上次的&lt;a href="https://blog.wei-lee.me/posts/tech/2024/07/Introducing-Python-ch19-draft"&gt;草稿&lt;/a&gt;後該來個決定版了&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#where-to-find-python-code"&gt;Where to find Python code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-package"&gt;Install package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ide-plus-interactive-shell-and-editor"&gt;IDE (plus interactive shell and editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation-and-naming"&gt;Documentation and naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-hinting"&gt;Type Hinting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-and-linting"&gt;Testing (and linting?)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugging"&gt;Debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optimization-sounds-more-like-profiling"&gt;Optimization (sounds more like profiling)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-and-data-structure"&gt;Algorithm and Data Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-distributions"&gt;Python Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#source-control"&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distributing-python-program"&gt;Distributing Python Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learn-more"&gt;Learn more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;這次的內容非常的多，讀書會的一個小時是一定吸收不完的&lt;br&gt;
但先聽過，知道 Python 有這些東西可以用，也許以後會有幫助&lt;/p&gt;
&lt;p&gt;我會頻繁參照四年前寫的 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-series"&gt;Python Table Manners 系列&lt;/a&gt;&lt;br&gt;
提到的工具稍微有些過期，這篇文章會補充新的工具&lt;br&gt;
但概念本身是互通的&lt;/p&gt;
&lt;h2 id="where-to-find-python-code"&gt;Where to find Python code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python Package Index&lt;ul&gt;
&lt;li&gt;讀作 Py-P-I&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install &amp;lt;package&amp;gt;&lt;/code&gt; 預設會到 PyPI 找套件安裝&lt;/li&gt;
&lt;li&gt;遠古以前曾經叫做 "cheese shop"&lt;ul&gt;
&lt;li&gt;來自 Monty Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/trending/python"&gt;GitHub Trend&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;GitHub 是目前主流的 Git 倉儲，在這可以找到最近流行的 Python 專案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.activestate.com/recipes/langs/python/"&gt;Popular Python recipes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這就真的是第一次看到了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-package"&gt;Install package&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pip/"&gt;pip&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;pip install pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;pip + &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;system package management (&lt;em&gt;Don't. Just Don't. Please&lt;/em&gt;)&lt;ul&gt;
&lt;li&gt;mac: &lt;a href="https://brew.sh/"&gt;brew&lt;/a&gt;, &lt;a href="https://www.macports.org/"&gt;ports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux: apt-get, yum, dpkg, zypper&lt;/li&gt;
&lt;li&gt;Windows: Windows Installer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conda.io/projects/conda/en/latest/user-guide/getting-started.html"&gt;conda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;直接從原始碼建置&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;包含打包並發布函式庫的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;以 &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; 撰寫的套件管理工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt; 或 &lt;a href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;被大型專案如 &lt;a href="https://airflow.apache.org/"&gt;Airflow&lt;/a&gt; 部分採用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; (just notice Josix wrote a &lt;a href="https://josix.tw/post/pipx-deep-dive/"&gt;blog post&lt;/a&gt; for it)&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;主要用於安裝 Python 實作的指令列工具，而不是函示庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pipenv, poetry 跟 pipx 更多的介紹可以參考 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-dependency-mangement"&gt;Python Table Manners - 虛擬環境和套件管理&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="ide-plus-interactive-shell-and-editor"&gt;IDE (&lt;em&gt;plus interactive shell and editor&lt;/em&gt;)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IDLE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python 自帶的編輯器，在終端機輸入 &lt;code&gt;IDLE&lt;/code&gt; 就能開啟&lt;/p&gt;
&lt;p&gt;&lt;img alt="IDLE.jpg" src="/images/posts-image/2024-Introducing-Python-ch19-final/IDLE.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ipython.org/"&gt;IPython&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這應該是互動式 shell，不算是 IDE 🤔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html"&gt;Jupyter Lab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.vim.org/"&gt;Vim&lt;/a&gt; / &lt;a href="https://neovim.io/"&gt;NeoVim&lt;/a&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;編輯器的神&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://code.visualstudio.com/"&gt;VsCode&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大致上學習曲線如下（PyCharm可以參考 IntelliJ）&lt;/p&gt;
&lt;p&gt;&lt;img alt="learning-curve" src="/images/posts-image/2024-Introducing-Python-ch19-final/learning-curve.jpg"&gt;&lt;/p&gt;
&lt;p&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2021/01/python-table-manner-editor"&gt;Python Table Manners 番外 - 編輯器&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="documentation-and-naming"&gt;Documentation and naming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python 的程式碼風格指南&lt;/li&gt;
&lt;li&gt;建議演講： &lt;a href="https://www.youtube.com/watch?v=wf-BqAjZb8M"&gt; Raymond Hettinger - Beyond PEP 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;建議讀物： &lt;a href="https://blog.wei-lee.me/posts/tech/2018/11/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;雖然這本主要是用 Java 為範例，但概念本身對寫好程式很有幫助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這章的標題「名稱與文件」，但內容主要在講註解跟命名&lt;br&gt;
很微妙的翻譯&lt;br&gt;
但如果對真的寫文件有興趣，可以參考 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/04/python-table-manners-documentation"&gt;Python Table Manners - 文件&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="type-hinting"&gt;Type Hinting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/python/mypy"&gt;mypy&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-coding-style#-mypy"&gt;Python Table Manners - 程式碼風格 # 型別檢查 - mypy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除此之外，自從 Python 3.9，型別如 &lt;code&gt;list, dict, set&lt;/code&gt; 都可以直接被使用&lt;br&gt;
不用再從 typing 函式庫匯入 (i.e., &lt;code&gt;from typing import List, Dict, Set&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;example_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你用的是 Python 3.8 ，你可以在檔案最上方&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你用的是 3.8 以前的版本，那你應該升級你的 Python&lt;br&gt;
（3.7 在 2023 就已經不支援了）&lt;/p&gt;
&lt;h2 id="testing-and-linting"&gt;Testing (and linting?)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;print&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要在 production 使用 print&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pylint-dev/pylint"&gt;pylint&lt;/a&gt;, &lt;a href="https://github.com/PyCQA/pyflakes"&gt;pyflakes&lt;/a&gt;, &lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;, &lt;a href="https://pypi.org/project/pep8/"&gt;pep8&lt;/a&gt;, &lt;em&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-coding-style"&gt;Python Table Manners - 程式碼風格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;不過在 4202 年的現在，我推薦使用 &lt;a href="https://github.com/astral-sh/ruff"&gt;ruff&lt;/a&gt; 取代以上所有工具&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;testing&lt;ul&gt;
&lt;li&gt;為什麼要測試&lt;ul&gt;
&lt;li&gt;避免既有的程式，因為新的改動壞掉&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-test-1"&gt;Python Table Manners - 測試 (一)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-test-2"&gt;Python Table Manners - 測試 (二)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-pre-commit"&gt;Python Table Manners - pre-commit: git commit 前做完檢查&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stdlib&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/nose/"&gt;nose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tox.wiki/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;本身不是測試框架&lt;/li&gt;
&lt;li&gt;主要用來做任務管理&lt;/li&gt;
&lt;li&gt;特點是可以在多個 Python 版本執行任務（包含測試）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/"&gt;py.test&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;目前最主流的 Python 測試框架，一般會建議使用它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CleanCut/green"&gt;green&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;hypothesis&lt;/a&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Property-based testing&lt;/li&gt;
&lt;li&gt;相當有趣的概念，但我其實也沒用到很熟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Continuous Integration (CI)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://buildbot.net/"&gt;buildbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jenkins.io/"&gt;jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.travis-ci.com/"&gt;travis-ci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://circleci.com/"&gt;circleci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/12/python-table-manner-continuous-integration"&gt;Python Table Manners - 持續整合/部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;print&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vars()&lt;/code&gt;: 列出變數的 &lt;code&gt;__dict__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt;： 列出局部變數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;globals()&lt;/code&gt;: 列出全域變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;before function starts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;after function ends&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@debug&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/pdb.html"&gt;pdb&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;常用 pdb 指令&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;ontinue&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;kip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;ext&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;ist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;rint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中斷點&lt;ul&gt;
&lt;li&gt;在 Python 檔案中加入 &lt;code&gt;breakpoint()&lt;/code&gt;，可以在執行時停在那行，並進入 pdb 互動式介面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# how to use pdb in terminal&lt;/span&gt;

&lt;span class="c1"&gt;## run pdb on file&lt;/span&gt;
pdb&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;file&lt;span class="w"&gt; &lt;/span&gt;name&amp;gt;

&lt;span class="c1"&gt;## run pdb on module&lt;/span&gt;
pdb&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;module&lt;span class="w"&gt; &lt;/span&gt;name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="logging"&gt;Logging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/howto/logging.html"&gt;logging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;message: 日誌訊息&lt;/li&gt;
&lt;li&gt;level: 日誌等級&lt;/li&gt;
&lt;li&gt;logger&lt;/li&gt;
&lt;li&gt;handler: 對日誌做額外的處理（e.g., 輸出成檔案）&lt;/li&gt;
&lt;li&gt;formatter: 日誌格式&lt;/li&gt;
&lt;li&gt;filter: 過濾特定日誌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;example.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This message should go to the log file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;So should this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;And this, too&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;And non-ASCII stuff, too, like Øresund and Malmö&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="optimization-sounds-more-like-profiling"&gt;Optimization (sounds more like profiling)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;"Python 通常很快"&lt;ul&gt;
&lt;li&gt;&lt;em&gt;我不確定，即使身為一個 Python 忠貞的使用者，我認為很多人會認為這句話不成立 lol&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/time.html"&gt;time&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/timeit.html"&gt;timeit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;參考 Debugging decorator 的寫法，可以將它們實作成 decorator 或 context manager，計算函式執行時間，找出瓶頸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="algorithm-and-data-structure"&gt;Algorithm and Data Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;list comprehension 通常比較快&lt;/li&gt;
&lt;li&gt;&lt;em&gt;這章也是很微妙，我不能說跟演算法、資料結構無關，但...就這？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-distributions"&gt;Python Distributions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython"&gt;CPython&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;如果沒有特別安裝其他的發佈，這就是大部分人所使用的 Python&lt;/li&gt;
&lt;li&gt;C extension&lt;ul&gt;
&lt;li&gt;&lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pypy.org/"&gt;PyPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://numba.pydata.org/"&gt;Numba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="source-control"&gt;Source Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 可以幫助你寫更好的提交訊息 (commit message)！&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2016/09/basic-git-tutorial"&gt;Basic Git Tutorial&lt;/a&gt; (雖然已經是 8 年前的文章了，但基礎概念應該是沒變太多吧...)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="distributing-python-program"&gt;Distributing Python Program&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;這章其實沒講什麼...&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可以研究看看怎麼將套件上傳到 PyPI&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learn-more"&gt;Learn more&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;books&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nbviewer.org/github/Lee-W/Learning_Python/tree/master/"&gt;Learning Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Websites&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Community&lt;ul&gt;
&lt;li&gt;PyLadies&lt;/li&gt;
&lt;li&gt;PyCons&lt;/li&gt;
&lt;li&gt;local meetups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs&lt;ul&gt;
&lt;li&gt;&lt;em&gt;you'll find your way out&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Study Session"></category></entry><entry><title>Achieve 200 contributions in Apache Airflow</title><link href="https://blog.wei-lee.me/posts/tech/2024/07/achieve-200-contributions-in-apache-airflow" rel="alternate"></link><published>2024-07-31T23:55:00+08:00</published><updated>2024-07-31T23:55:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-07-31:/posts/tech/2024/07/achieve-200-contributions-in-apache-airflow</id><summary type="html">&lt;p&gt;This is more like a personal reflection, and I really doubt it would benefit anyone. But it's my blog anyway. I can write whatever I want, lol.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This is more like a personal reflection, and I really doubt it would benefit anyone. But it's my blog anyway. I can write whatever I want, lol.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;There are actually 202 now, but I have the screenshot when it achieved 200, so I'll just keep 200 in the title.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-07-30-05-15-PM-200-PRs" src="/images/posts-image/achieve-200-contributions-in-apache-airflow/2024-07-30-05-15-PM-200-PRs.png"&gt;&lt;/p&gt;
&lt;p&gt;The merged pull request is at 166 (+2). I am unsure about the remaining 34 contributions, perhaps due to the suggestions I provided for the PRs I reviewed. There are 2 PRs in question.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41097"&gt;Add dataset alias unique constraint and remove wrong dataset alias removing logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41091"&gt;set "has_outlet_datasets" to true if "dataset alias" exists&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;200 PRs seems like a good opportunity for me to reflect on what I have done on the Airflow project since I joined Astronomer. There might be typos in the PR title, but I'll keep it as it is. I try to group related things into subgroups, and there might be things that cannot be easily categorized. I'm just putting it in the "misc" section.&lt;/p&gt;
&lt;p&gt;The count of PRs might appear to be higher than the value I added (and it actually is). This is due to my development habits. Whenever possible, I prefer to keep the commits small and clean. It's easier to revert if I did something dumb and wrong. However, I must admit I probably created too many PRs for the Azure managed identity feature. Ideally, the feature PRs should include documentation updates as well. But yep, I was eager to land the feature first, then. It also suggested having separate PRs for each airflow provider even if it's basically the same feature.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#after-joining-astronomer"&gt;After joining Astronomer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#add-datasetalias-for-creating-datasets-or-dataset-events-in-runtime"&gt;Add "DatasetAlias" for creating datasets or dataset events in runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#start-task-execution-directly-from-the-trigger"&gt;Start task execution directly from the trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-rest-api-endpoint-to-manipulate-queued-dataset-events"&gt;Add REST API endpoint to manipulate queued dataset events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#upgrade-apache-airflow-providers-weaviate-to-200-for-weaviate-client-440-support"&gt;Upgrade apache-airflow-providers-weaviate to 2.0.0 for weaviate-client &amp;gt;= 4.4.0 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#improve-trigger-stability-by-adding-return-after-yield"&gt;Improve trigger stability by adding "return" after "yield"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contribute-astronomer-providers-functionality-to-apache-airflow-providers"&gt;Contribute astronomer-providers functionality to apache-airflow providers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-azure-managed-identities-support-to-apache-airflow-providers-microsoft-azure"&gt;Add Azure managed identities support to apache-airflow-providers-microsoft-azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-all-existing-sensors-respect-the-soft_fail-argument-in-basesensoroperator"&gt;Make all existing sensors respect the "soft_fail" argument in BaseSensorOperator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-defult_deferrable-configuration-for-easily-turning-on-the-deferrable-mode-of-operators"&gt;Add defult_deferrable configuration for easily turning on the deferrable mode of operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#security-improvement"&gt;Security improvement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc-core"&gt;Misc (core)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc-provider"&gt;Misc (provider)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc-doc-only"&gt;Misc (doc only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#before-joining-astronomer"&gt;Before Joining Astronomer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="after-joining-astronomer"&gt;After joining Astronomer&lt;/h2&gt;
&lt;h3 id="add-datasetalias-for-creating-datasets-or-dataset-events-in-runtime"&gt;Add "DatasetAlias" for creating datasets or dataset events in runtime&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41043"&gt;Check dataset_alias in inlets when use it to retrieve inlet_evnets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41041"&gt;Add string representation to dataset alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41037"&gt;add example dag for dataset_alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40984"&gt;add test case test_dag_deps_datasets_with_duplicate_dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40868"&gt;Extend dataset dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40830"&gt;Extend get datasets endpoint to include dataset aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40809"&gt;Retrieve inlet dataset events through dataset aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40723"&gt;Link dataset event to dataset alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40693"&gt;Scheduling based on dataset aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40478"&gt;Add DatasetAlias to support dynamic Dataset Event Emission and Dataset Creation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="start-task-execution-directly-from-the-trigger"&gt;Start task execution directly from the trigger&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41062"&gt;fix: add argument include_xcom in method rsolve an optional value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41021"&gt;Add start execution from trigger support for existing core sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40993"&gt;Enhance start_trigger_args serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40935"&gt;State the limitation of the newly added start execution from trigger feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40376"&gt;add next_kwargs to StartTriggerArgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39912"&gt;Add start execution from triggerer support to dynamic task mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39585"&gt;Prevent start trigger initialization in scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38674"&gt;Starts execution directly from triggerer without going to worker&lt;/a&gt; (PR of the month)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="add-rest-api-endpoint-to-manipulate-queued-dataset-events"&gt;Add REST API endpoint to manipulate queued dataset events&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/41022"&gt;add section "Manipulating queued dataset events through REST API"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/37176"&gt;add "queuedEvent" endpoint to get/delete DatasetDagRunQueue&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="upgrade-apache-airflow-providers-weaviate-to-200-for-weaviate-client-440-support"&gt;Upgrade apache-airflow-providers-weaviate to 2.0.0 for weaviate-client &amp;gt;= 4.4.0 support&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40534"&gt;extract collection_name from system tests and make them unique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40517"&gt;fix weaviate system tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40194"&gt;Upgrade to weaviate-client to v4&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="improve-trigger-stability-by-adding-return-after-yield"&gt;Improve trigger stability by adding "return" after "yield"&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38396"&gt;add "return" statement to "yield" within a while loop in amazon triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38395"&gt;add "return" statement to "yield" within a while loop in dbt triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38394"&gt;add "return" statement to "yield" within a while loop in google triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38393"&gt;add "return" statement to "yield" within a while loop in azure triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38392"&gt;add "return" statement to "yield" within a while loop in http triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38391"&gt;add "return" statement to "yield" within a while loop in sftp triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38390"&gt;add "return" statement to "yield" within a while loop in airbyte triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38389"&gt;add "return" statement to "yield" within a while loop in core triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38332"&gt;retrieve dataset event created through RESTful API when creating dag run&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="contribute-astronomer-providers-functionality-to-apache-airflow-providers"&gt;Contribute astronomer-providers functionality to apache-airflow providers&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38619"&gt;add repair_run support to DatabricksRunNowOperator in deferrable mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38397"&gt;remove redundant else block in DatabricksExecutionTrigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/37474"&gt;add reuse_existing_run for allowing DbtCloudRunJobOperator to reuse existing run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/37306"&gt;fix how GKEPodAsyncHook.service_file_as_context is used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/37081"&gt;add service_file support to GKEPodAsyncHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36946"&gt;reword GoogleBaseHookAsync as GoogleBaseAsyncHook in docstring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36940"&gt;add WasbPrefixSensorTrigger params breaking change to azure provider changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36894"&gt;style(providers/google): improve BigQueryInsertJobOperator type hinting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36892"&gt;Check cluster state before defer Dataproc operators to trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36806"&gt;Fix WasbPrefixSensor arg inconsistency between sync and async mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36749"&gt;avoid retrying after KubernetesPodOperator has been marked as failed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36685"&gt;check sagemaker training job status before deferring SageMakerTrainingOperator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36680"&gt;check transform job status before deferring SageMakerTransformOperator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36658"&gt;check ProcessingJobStatus status before deferring SageMakerProcessingOperator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36586"&gt;add deferrable mode to RedshiftDataOperator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36578"&gt;add use_regex argument for allowing S3KeySensor to check s3 keys with regular expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36550"&gt;add deferrable mode to RedshiftClusterSensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36523"&gt;check job_status before BatchOperator execute in deferrable mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36417"&gt;remove event['message'] call in EmrContainerOperator.execute_complete|as the key message no longer exists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36416"&gt;Check redshift cluster state before deferring to triggerer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36363"&gt;handle tzinfo in S3Hook.is_keys_unchanged_async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36330"&gt;add type annotations to Amazon provider "execute_coplete" methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/36202"&gt;iterate through blobs before checking prefixes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="add-azure-managed-identities-support-to-apache-airflow-providers-microsoft-azure"&gt;Add Azure managed identities support to apache-airflow-providers-microsoft-azure&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35432"&gt;setting use_async=True for get_async_default_azure_credential&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35394"&gt;add managed identity support to AsyncDefaultAzureCredential&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35367"&gt;Refactor azure managed identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35330"&gt;add managed identity support to fileshare hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35329"&gt;add managed identity support to synapse hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35328"&gt;add managed identity support to azure datalake hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35327"&gt;add managed identity support to azure batch hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35326"&gt;add managed identity support to wasb hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35325"&gt;add managed identity support to adx hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35324"&gt;add managed identity support to asb hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35323"&gt;add managed identity support to azure cosmos hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35322"&gt;add managed identity support to azure data factory hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35321"&gt; add managed identity support to azure container volume hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35320"&gt; add managed identity support to azure container registry hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35319"&gt;add managed identity support to azure container instance hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35318"&gt; Reuse get_default_azure_credential method from Azure utils for Azure key valut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35052"&gt; make DefaultAzureCredential configurable in AzureKeyVaultBackend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/35051"&gt;Make DefaultAzureCredential in AzureBaseHook configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34104"&gt;docs(providers/microsoft): improve documentation for AzureContainerVolumeHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34103"&gt;docs(providers/microsoft): improve documentation for WasbHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34102"&gt;docs(providers/microsoft): improve documentation for AzureCosmosDBHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34101"&gt;docs(providers/microsoft): improve documentation for AzureFileShareHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34098"&gt;docs(providers/microsoft): improve documentation for AzureBatchHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34097"&gt;docs(providers/microsoft): improve documentation for AzureBaseHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34096"&gt;docs(providers/microsoft): improve documentation for Azure Service Bus hooks DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34095"&gt;docs(providers/microsoft): improve documentation for AzureDataExplorerHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34094"&gt;docs(providers/microsoft): improve documentation for AzureDataLakeStorageV2Hook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34074"&gt; docs(providers/microsoft): improve documentation for AzureDataLakeHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34073"&gt;docs(providers/microsoft): improve documentation for AzureContainerRegistryHook DefaultAzureCredential support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34070"&gt;feat(providers/microsoft): add AzureContainerInstancesOperator.volume as a template field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34002"&gt;test(providers/microsfot): add system test for AzureContainerVolumeHook and AzureContainerRegistryHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33992"&gt;docs(providers): replace markdown style link with rst style link for amazon and apache-beam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33991"&gt;test(providers/microsoft): add test cases  to AzureContainerInstanceHook &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33825"&gt;Add DefaultAzureCredential support to AzureContainerRegistryHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33822"&gt;feat(providers/microsoft): add DefaultAzureCredential support to AzureContainerVolumeHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33716"&gt;Add AzureBatchOperator example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33687"&gt;test(providers/microsoft): add test case for AzureIdentityCredentialAdapter.signed_session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33653"&gt;fix(providers/azure): remove json.dumps when querying AzureCosmosDBHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33493"&gt;feat(providers/azure): allow passing fully_qualified_namespace and credential to initialize Azure Service Bus Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33469"&gt; feat(providers/microsoft): add DefaultAzureCredential support to AzureBatchHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33467"&gt;feat(providers/microsoft): add DefaultAzureCredential support to AzureContainerInstanceHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33436"&gt;feat(providers/microsoft): add DefaultAzureCredential support to cosmos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33433"&gt;feat(providers/microsoft): add DefaultAzureCredential to data_lake&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="make-all-existing-sensors-respect-the-soft_fail-argument-in-basesensoroperator"&gt;Make all existing sensors respect the "soft_fail" argument in BaseSensorOperator&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34501"&gt;respect soft_fail argument when exception is raised for google sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34494"&gt;respect soft_fail argument when exception is raised for microsoft-azure sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34476"&gt;respect soft_fail argument when exception is raised for flink sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34475"&gt;respect soft_fail argument when exception is raised for jenkins sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34474"&gt;respect soft_fail argument when exception is raised for celery sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34473"&gt;Fix inaccurate test case names in providers &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34472"&gt;respect soft_fail argument when exception is raised for datadog sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34391"&gt;respect soft_fail argument when exception is raised for http sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34199"&gt;respect soft_fail argument when exception is raised for sql sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34169"&gt;respect soft_fail argument when exception is raised for sftp sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34167"&gt;respect soft_fail argument when exception is raised for spark-kubernetes sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34165"&gt;respect soft_fail argument when exception is raised for google-marketing-platform sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34164"&gt;respect soft_fail argument when exception is raised for dbt sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34163"&gt;respect soft_fail argument when exception is raised for tableau sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34161"&gt;respect soft_fail argument when exception is raised for ftp sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34157"&gt;respect soft_fail argument when exception is raised for alibaba sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34156"&gt;respect soft_fail argument when exception is raised for airbyte sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34134"&gt;respect soft_fail argument when exception is raised for amazon sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33405"&gt;respect "soft_fail" argument when running BatchSensor in deferrable mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33403"&gt;Respect "soft_fail" for core async sensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33401"&gt;Respect "soft_fail" argument when "poke" is called&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33196"&gt;respect soft_fail argument when ExternalTaskSensor runs in deferrable mode&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="add-defult_deferrable-configuration-for-easily-turning-on-the-deferrable-mode-of-operators"&gt;Add defult_deferrable configuration for easily turning on the deferrable mode of operators&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32514"&gt;build(pre-commit): add list of supported deferrable operators to doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32370"&gt;build(pre-commit): check deferrable default value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/31712"&gt;Add default_deferrable config&lt;/a&gt; (PR of the month)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="security-improvement"&gt;Security improvement&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40522"&gt;Disable rendering for doc_md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39012"&gt; check whether AUTH_ROLE_PUBLIC is set in check_authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38924"&gt;check whether AUTH_ROLE_PUBLIC is set in check_authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32261"&gt;fix(api_connexion): handle the cases that webserver.expose_config is set to "non-sensitive-only" instead of boolean value&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="misc-core"&gt;Misc (core)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40060"&gt;catch sentry flush if exception happens in _execute_in_fork finally block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40058"&gt;add PID and return code to _execute_in_fork logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39313"&gt;add missing conn_id to string representation of ObjectStoragePath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/37542"&gt;Enable "airflow tasks test" to run deferrable operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34598"&gt;remove "to backfill" from --task-regex argument help message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33926"&gt;fix(sensors): move trigger initialization from __init___ to execute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32693"&gt;Ship zombie info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/31999"&gt;Catch the exception that triggerer initialization failed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/31757"&gt;feat(jobs/triggerer_job_runner): add triggerer canceled log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/31379"&gt;fixing circular import error in providers caused by airflow version check&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="misc-provider"&gt;Misc (provider)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/40080"&gt;add default gcp_conn_id to GoogleBaseAsyncHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39874"&gt;remove unexpected argument pod in read_namespaced_pod_log call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39271"&gt;fix wrong payload set when reuse_existing_run set to True in DbtCloudRunJobOperator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39214"&gt;migrate to dbt v3 api for project endpoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39112"&gt;Replace pod_manager.read_pod_logs with client.read_namespaced_pod_log in KubernetesPodOperator._write_logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34706"&gt;allow providing credentials through keyword argument in AzureKeyVaultBackend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33407"&gt;Fix outdated test name and description in BatchSensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33189"&gt;add deprecation warning to DATAPROC_JOB_LOG_LINK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33148"&gt;Alias &lt;code&gt;DATAPROC_JOB_LOG_LINK&lt;/code&gt; to &lt;code&gt;DATAPROC_JOB_LINK&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32806"&gt;Remove execute function of &lt;code&gt;DatabricksRunNowDeferrableOperator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32689"&gt;Add missing execute_complete method for &lt;code&gt;DatabricksRunNowOperator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32323"&gt;refresh connection if an exception is caught in "AzureDataFactory"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32238"&gt;feat(providers/azure): cancel pipeline if unexpected exception caught&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/31482"&gt;fix(providers/amazon): handle missing LogUri in emr describe_cluster API response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/30250"&gt;merge AzureDataFactoryPipelineRunStatusAsyncSensor to AzureDataFactoryPipelineRunStatusSensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/30235"&gt;merge BigQueryTableExistenceAsyncSensor into BigQueryTableExistenceSensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/30231"&gt;Merge BigQueryTableExistencePartitionAsyncSensor into BigQueryTableExistencePartitionSensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/30227"&gt;Merge DbtCloudJobRunAsyncSensor logic to DbtCloudJobRunSensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/30014"&gt;Merge GCSObjectExistenceAsyncSensor logic to GCSObjectExistenceSensor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="misc-doc-only"&gt;Misc (doc only)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/39004"&gt;Add in Trove classifiers Python 3.12 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/38740"&gt;add Wei Lee to committer list&lt;/a&gt; (This is my 133rd PR)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/37808"&gt;Erd generating doc improvement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/34708"&gt;fix rst code block format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33990"&gt;docs(core-airflow): replace markdown style link with rst style link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33989"&gt;docs(CONTRIBUTING): replace markdown style link with rst style link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/33770"&gt;docs: fix partial doc reference error due to missing space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32422"&gt;docs(deferring): add type annotation to code examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/32140"&gt;add a note that we'll need to restart triggerer to reflect any trigger change&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="before-joining-astronomer"&gt;Before Joining Astronomer&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/airflow/pull/26411"&gt;update contributing documentations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Tech"></category><category term="Airflow"></category></entry><entry><title>Gobby's Python 讀書會 - 「第十九章 成為 Python 鐵粉」的草稿</title><link href="https://blog.wei-lee.me/posts/tech/2024/07/Introducing-Python-ch19-draft" rel="alternate"></link><published>2024-07-13T12:20:00+08:00</published><updated>2024-07-13T12:20:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-07-13:/posts/tech/2024/07/Introducing-Python-ch19-draft</id><summary type="html">&lt;p&gt;最近半年 Gobby 為了學 Python 籌備了 Python 的讀書會&lt;br&gt;
找了各路的人來導讀這本&lt;a href="https://www.tenlong.com.tw/products/9789865024864"&gt; 精通 Python｜運用簡單的套件進行現代運算&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近半年 Gobby 為了學 Python 籌備了 Python 的讀書會&lt;br&gt;
找了各路的人來導讀這本&lt;a href="https://www.tenlong.com.tw/products/9789865024864"&gt; 精通 Python｜運用簡單的套件進行現代運算&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;原本我是推薦了&lt;a href="https://www.oreilly.com/library/view/learning-python-5th/9781449355722/"&gt;Learning Python, 5th Edition&lt;/a&gt;，但因為它是英文的沒被採用&lt;br&gt;
"Learning Python" 算是奠定了我 Python 基礎最重要的一本書&lt;br&gt;
有些基本概念忘記了，我還是會翻&lt;a href="https://nbviewer.org/github/Lee-W/Learning_Python/tree/master/"&gt;以前的筆記&lt;/a&gt;&lt;br&gt;
不過沒想到這已經是 10 年以前的書啦😲&lt;/p&gt;
&lt;p&gt;回到「精通 Python」這本書&lt;br&gt;
雖然只看了一章，但有稍微找一下大家對這本書的想法&lt;br&gt;
&lt;a href="https://blog.kyomind.tw/introducing-python/"&gt;《精通 Python 第二版》心得：給入門者的 Python 學習藍圖 &lt;/a&gt;寫的跟我的想法還蠻接近的&lt;br&gt;
尤其是重新定義了 "Introducing Python" 為「精通 Python」&lt;br&gt;
實在&lt;strong&gt;精闢&lt;/strong&gt;到一個不行&lt;br&gt;
恩，肯定沒錯，一定是如此&lt;br&gt;
不可能不是如此&lt;/p&gt;
&lt;p&gt;為了我要導讀的「第十九章 成為 Python 鐵粉」&lt;br&gt;
上週花了點時間看完，並寫下了筆記&lt;br&gt;
好久沒有這樣全神貫注地看書，感覺是還蠻不錯的&lt;br&gt;
書本身是中文的，但我寫中文太慢了，筆記當初就是用英文寫的&lt;br&gt;
有些翻譯我真的不確定他對回去的原文是什麼，就寫了我猜的&lt;/p&gt;
&lt;p&gt;這篇文的重點是在「草稿」&lt;br&gt;
所以下面就只是當天我寫下的筆記簡單整理過的版本&lt;br&gt;
&lt;em&gt;斜線的部分是我自己的補充或想法&lt;/em&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#where-to-find-python-code"&gt;Where to find Python code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-package"&gt;Install package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ide-plus-interactive-shell-and-editor"&gt;IDE (plus interactive shell and editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation-and-naming"&gt;Documentation and naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-hinting"&gt;Type Hinting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-and-linting"&gt;Testing (and linting?)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugging"&gt;Debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optimization-sounds-more-like-profiling"&gt;Optimization (sounds more like profiling)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-and-data-structure"&gt;Algorithm and Data Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-distributions"&gt;Python Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#source-control"&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distributing-python-program"&gt;Distributing Python Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learn-more"&gt;Learn more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="where-to-find-python-code"&gt;Where to find Python code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;used to be "cheese shop" from Monty Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/trending/python"&gt;GitHub Trend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.activestate.com/recipes/langs/python/"&gt;Popular Python recipes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-package"&gt;Install package&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pip/"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv&lt;/a&gt; = pip + &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;system package management (&lt;em&gt;Don't. Just Don't. Please&lt;/em&gt;)&lt;ul&gt;
&lt;li&gt;mac: &lt;a href="https://brew.sh/"&gt;brew&lt;/a&gt;, &lt;a href="https://www.macports.org/"&gt;ports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux: apt-get, yum, dpkg, zypper&lt;/li&gt;
&lt;li&gt;Windows: Windows Installer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conda.io/projects/conda/en/latest/user-guide/getting-started.html"&gt;conda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build from source&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; (just notice Josix wrote a &lt;a href="https://josix.tw/post/pipx-deep-dive/"&gt;blog post&lt;/a&gt; for it)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ide-plus-interactive-shell-and-editor"&gt;IDE (&lt;em&gt;plus interactive shell and editor&lt;/em&gt;)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IDLE&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ipython.org/"&gt;IPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html"&gt;Jupyter Lab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.vim.org/"&gt;Vim&lt;/a&gt; / &lt;a href="https://neovim.io/"&gt;NeoVim&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://code.visualstudio.com/"&gt;VsCode&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="documentation-and-naming"&gt;Documentation and naming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;As a programmer, I would suggest reading &lt;a href="https://blog.wei-lee.me/posts/tech/2018/11/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="type-hinting"&gt;Type Hinting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/python/mypy"&gt;mypy&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="testing-and-linting"&gt;Testing (and linting?)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;print&lt;ul&gt;
&lt;li&gt;no print in production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pylint-dev/pylint"&gt;pylint&lt;/a&gt;, &lt;a href="https://github.com/PyCQA/pyflakes"&gt;pyflakes&lt;/a&gt;, &lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;, &lt;a href="https://pypi.org/project/pep8/"&gt;pep8&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;for most cases, I would say just use &lt;a href="https://github.com/astral-sh/ruff"&gt;ruff&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;testing&lt;ul&gt;
&lt;li&gt;why testing&lt;ul&gt;
&lt;li&gt;avoid regression&lt;ul&gt;
&lt;li&gt;what is a regresion&lt;ul&gt;
&lt;li&gt;break something that used to work fine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stdlib&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/nose/"&gt;nose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tox.wiki/"&gt;tox&lt;/a&gt; - &lt;em&gt;run tests in different Python versions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/"&gt;py.test&lt;/a&gt; - &lt;em&gt;for most cases, I would suggest just use py.test&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CleanCut/green"&gt;green&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/CleanCut/green"&gt;hypothesis&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Continuous Integration (CI)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://buildbot.net/"&gt;buildbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jenkins.io/"&gt;jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.travis-ci.com/"&gt;travis-ci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://circleci.com/"&gt;circleci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;print&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vars()&lt;/code&gt;, &lt;code&gt;locals()&lt;/code&gt;, &lt;code&gt;globals()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;decorator&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/pdb.html"&gt;pdb&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pdb -i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdb -m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;commands&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;breakpoint()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="logging"&gt;Logging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;message&lt;/li&gt;
&lt;li&gt;level&lt;/li&gt;
&lt;li&gt;logger&lt;/li&gt;
&lt;li&gt;handler&lt;/li&gt;
&lt;li&gt;formatter&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimization-sounds-more-like-profiling"&gt;Optimization (sounds more like profiling)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;"Python 通常很快"&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Idk, even though I'm a Pythonista, I feel many might argue it.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/time.html"&gt;time&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/timeit.html"&gt;timeit&lt;/a&gt; → use them as a decorator, context manager&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="algorithm-and-data-structure"&gt;Algorithm and Data Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;list comprehension is faster&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Algorithm and Data Structure" hmm... 🤔 I can't say you're wrong.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-distributions"&gt;Python Distributions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython"&gt;CPython&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C extension&lt;ul&gt;
&lt;li&gt;&lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pypy.org/"&gt;PyPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://numba.pydata.org/"&gt;Numba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="source-control"&gt;Source Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit&lt;/code&gt; &lt;em&gt;&lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; rocks&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="distributing-python-program"&gt;Distributing Python Program&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;nothing insightful in this section&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;upload to PyPI&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learn-more"&gt;Learn more&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;books&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Learning Python&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Websites&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Community&lt;ul&gt;
&lt;li&gt;PyLadies&lt;/li&gt;
&lt;li&gt;PyCons&lt;/li&gt;
&lt;li&gt;local meetups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs&lt;ul&gt;
&lt;li&gt;&lt;em&gt;you'll find your way out&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Study Session"></category></entry><entry><title>Fix Neovim "'fzf' extension doesn't exist or isn't installed:"</title><link href="https://blog.wei-lee.me/posts/tech/2024/06/neo-vim-fzf-not-loaded" rel="alternate"></link><published>2024-06-25T23:25:00+08:00</published><updated>2024-06-25T23:25:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-06-25:/posts/tech/2024/06/neo-vim-fzf-not-loaded</id><summary type="html">&lt;p&gt;簡單記錄一下之前使用 Neovim 遇到的套件問題&lt;br&gt;
不是什麼有深度的技術文章&lt;/p&gt;
</summary><content type="html">&lt;p&gt;簡單記錄一下之前使用 Neovim 遇到的套件問題&lt;br&gt;
不是什麼有深度的技術文章&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;許久以前的某一天突然就遇到了 &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; 壞掉的問題&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fzf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_extensions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fzf&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t exist or isn&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;hare&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fzf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fzf_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/.../.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fzf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/../&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libfzf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x0005&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tried&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/.../.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/../build/libfzf.so&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/System/Volumes/Preboot/Cryptexes/OS/.../.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/../build/libfzf.so&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/.../.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/../build/libfzf.so&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# stacktrace:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_extensions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_in_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;load_extension&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;telescope&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_extensions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_in_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;load_extension&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;LazyVim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lazyvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_in_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;LazyVim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lazyvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_in_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;on_load&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;LazyVim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lazyvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_in_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmake&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmake&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmake&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmake&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_in_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;檢查了幾個地方都沒發現問題&lt;br&gt;
也透過當時使用的套件管理工具重新安裝，依然沒有解決&lt;br&gt;
忘記那時候用什麼工具管，但我最近是使用 &lt;a href="https://www.lazyvim.org/"&gt;Lazyvim&lt;/a&gt;，很好用&lt;br&gt;
順手分享一下我的 &lt;a href="https://github.com/Lee-W/nvim-config"&gt;nvim-config&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;後來找到了 &lt;a href="https://github.com/AstroNvim/AstroNvim/issues/58#issuecomment-1504303757"&gt; AstroVim: This extension doesn't exist or is not installed: fzf #58 &lt;/a&gt; 的 comment&lt;br&gt;
原來只用套件管理工具重裝可能是沒用的&lt;br&gt;
後來透過下面的指令，手動重新 build 一次就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.local/share/nvim/lazy/telescope-fzf-native.nvim
make&lt;span class="w"&gt; &lt;/span&gt;clean
make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;換成 Lazyvim 後，又隔了這麼久已經沒再遇過同樣的問題&lt;/p&gt;
&lt;p&gt;至於為什麼都隔了這麼久，還要寫這篇文章&lt;br&gt;
反正草稿都躺這麼久了，刪掉也可惜&lt;br&gt;
也許哪天還是會遇到類似的問題，筆記一下也好&lt;/p&gt;</content><category term="Tech"></category><category term="Neovim"></category></entry><entry><title>Bartender 失去信任的此時，我們該何去何從</title><link href="https://blog.wei-lee.me/posts/tech/2024/06/where-should-we-go-if-bartender-is-no-longer-considered-safe" rel="alternate"></link><published>2024-06-15T11:58:00+08:00</published><updated>2024-06-15T11:58:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-06-15:/posts/tech/2024/06/where-should-we-go-if-bartender-is-no-longer-considered-safe</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;世界上絕對不能背叛客人的兩種職業，一種是醫師與藥劑是，另一種則是... 調酒師！&lt;/p&gt;
&lt;p&gt;-- 佐佐倉溜&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;世界上絕對不能背叛客人的兩種職業，一種是醫師與藥劑是，另一種則是... 調酒師！&lt;/p&gt;
&lt;p&gt;-- 佐佐倉溜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;

&lt;p&gt;上週 Reddit 上的一篇文章 &lt;a href="https://www.reddit.com/r/macapps/comments/1d7zjv8/comment/l73h9gv/"&gt; Bartender 5 not safe anymore ? Warning from MacUpdater &lt;/a&gt;&lt;br&gt;
Bartender 默默的就易主了&lt;br&gt;
默默的要了權限（好啦，沒那麼默默）&lt;br&gt;
默默的裝了&lt;a href="https://amplitude.com/"&gt;Amplitude&lt;/a&gt;&lt;br&gt;
導致不少人對 Bartender 不再信任&lt;/p&gt;
&lt;p&gt;好了，那該怎麼辦呢？&lt;/p&gt;
&lt;h2 id="1-bartender"&gt;1. 繼續使用 Bartender&lt;/h2&gt;
&lt;p&gt;如果你對新的開發者信任，那就繼續使用吧，他們在炎上後發了一篇聲明 &lt;a href="https://www.macbartender.com/b5blog/Lets-Try-This-Again/"&gt;Let's Try This Again&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="2-bartender"&gt;2. 降回 Bartender 被信任的版本&lt;/h2&gt;
&lt;p&gt;降版到 &lt;code&gt;&amp;lt;=5.0.52&lt;/code&gt; ， Amplitude 應該是在這版被加入了&lt;br&gt;
但官方是說 &lt;code&gt;5.0.53&lt;/code&gt; 已經移除&lt;/p&gt;
&lt;h2 id="3-bartender"&gt;3. 尋找 Bartender 的替代方案&lt;/h2&gt;
&lt;p&gt;這些都是從各大文章像是&lt;a href="https://www.macrumors.com/2024/06/06/alternatives-bartender-mac-menu-bar/"&gt;Six Bartender Alternatives to Manage Your Mac's Menu Bar&lt;/a&gt; 或 Twitter 、Reddit 搜集來玩過的工具們&lt;/p&gt;
&lt;h3 id="hidden"&gt;hidden&lt;/h3&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/dwarvesf/hidden"&gt;link to Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;已經沒有繼續維護了，但用起來還堪用&lt;/p&gt;
&lt;h4&gt;VimMotionApp&lt;/h4&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/dwarvesf/VimMotionApp"&gt;link to Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跟 menu bar 無關&lt;br&gt;
意外發現 &lt;a href="https://github.com/dwarvesf/hidden"&gt;hidden&lt;/a&gt; 開發者還有開發出這種好東西&lt;br&gt;
尤其是前一天跟日本朋友吃飯，聊到在瀏覽器還用 Vim mode 很反人類&lt;br&gt;
沒錯，就我，超好用好嗎！&lt;br&gt;
我不當人類啦， JOJO&lt;br&gt;
推薦&lt;a href="https://addons.mozilla.org/firefox/addon/vimium-ff/"&gt;Vimium&lt;/a&gt;給你，一起反人類&lt;/p&gt;
&lt;h3 id="hiddenbar"&gt;HiddenBar&lt;/h3&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/UeharaYou/HiddenBar"&gt;link to Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/UeharaYou"&gt;UeharaYou&lt;/a&gt; fork &lt;a href="https://github.com/dwarvesf/hidden"&gt;hidden&lt;/a&gt; 出來維護的的版本&lt;br&gt;
Star 數不算太多，就沒特別試了&lt;br&gt;
但我有同事用這個&lt;/p&gt;
&lt;h3 id="dozer"&gt;Dozer&lt;/h3&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/Mortennn/Dozer"&gt;link to Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 Bartender 前，我是用 Dozer，但後來沒有維護了&lt;br&gt;
從 macOS 14 開始就會 crash&lt;/p&gt;
&lt;h3 id="sketchybar"&gt;SketchyBar&lt;/h3&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/FelixKratz/SketchyBar"&gt;link to Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個算是最特別的&lt;br&gt;
其實蠻有趣的，但不合用&lt;br&gt;
它會要你把系統 menu bar 隱藏起來&lt;br&gt;
在桌面的最上方再放上另外可以互動的工具&lt;/p&gt;
&lt;h3 id="bartender-controversy-tutorial-on-how-to-manage-menubar-status-items-via-btt"&gt;Bartender controversy, tutorial on how to manage menubar status items via BTT&lt;/h3&gt;
&lt;p&gt;🔗 &lt;a href="https://community.folivora.ai/t/bartender-controversy-tutorial-on-how-to-manage-menubar-status-items-via-btt/37429/1"&gt;link to BTT forum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BTT 使用者的福音&lt;br&gt;
在 BTT 上支援最基本的收納功能&lt;br&gt;
我試用一開始用起來好好的，後來就叫不出來了&lt;br&gt;
感覺應該是我設定錯誤&lt;br&gt;
有空會想再回來嘗試&lt;/p&gt;
&lt;h3 id="ice"&gt;Ice&lt;/h3&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/jordanbaird/Ice"&gt;link to Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;說是這次 Bartender 之亂的最大受惠者也不為過吧&lt;br&gt;
看那精美的 Star History&lt;/p&gt;
&lt;p&gt;&lt;img alt="ice star-history" src="https://api.star-history.com/svg?repos=jordanbaird/Ice&amp;amp;type=Date"&gt;&lt;/p&gt;
&lt;p&gt;用起來蠻直覺的跟 Dozer 很像，但有支援最新的 macOS 14&lt;br&gt;
不過遇到劉海還是沒辦法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Display hidden items in a separate bar (e.g. for MacBooks with the notch)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但這件事看起來有在他們的 roadmap 中，可以期待&lt;/p&gt;</content><category term="Tech"></category><category term="Mac"></category></entry><entry><title>Starts Airflow task execution directly from the triggerer</title><link href="https://blog.wei-lee.me/posts/tech/2024/06/starts-execution-directly-from-triggerer-without-going-to-worker" rel="alternate"></link><published>2024-06-02T18:20:00+08:00</published><updated>2024-07-30T23:55:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-06-02:/posts/tech/2024/06/starts-execution-directly-from-triggerer-without-going-to-worker</id><summary type="html">&lt;p&gt;A few weeks ago, I submitted &lt;a href="https://github.com/apache/airflow/pull/38674"&gt;#38674&lt;/a&gt; to &lt;a href="https://github.com/apache/airflow"&gt;airflow&lt;/a&gt; to Airflow, which was later selected as the PR of the month. (Thanks, Kaxil, for the nomination!)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A few weeks ago, I submitted &lt;a href="https://github.com/apache/airflow/pull/38674"&gt;#38674&lt;/a&gt; to &lt;a href="https://github.com/apache/airflow"&gt;airflow&lt;/a&gt; to Airflow, which was later selected as the PR of the month. (Thanks, Kaxil, for the nomination!)&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Thus, I was invited to present this feature at the  &lt;a href="https://astronomer.zoom.us/meeting/register/tZYqcOqhpjkqHdWPk_L11pHpUVLRHB4uYBSv#/registration"&gt;Airflow Monthly Town-Hall&lt;/a&gt;. Here is the &lt;a href="https://speakerdeck.com/leew/starts-airflow-task-execution-directly-from-the-triggerer"&gt;slide&lt;/a&gt; I used.&lt;/p&gt;
&lt;p&gt;Even though this feature will not look the same after &lt;a href="https://github.com/apache/airflow/pull/39585"&gt;#39585&lt;/a&gt;, the core concept is similar, and I already finished 70% of this article before even creating that PR, so I still want to finish this writing 😆&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-did-the-deferrable-operator-work-before-this-change"&gt;How did the deferrable operator work before this change?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-do-we-want-it"&gt;Why do we want it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-it-affect-dag-authors"&gt;How does it affect DAG authors?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-it-affect-operator-authors"&gt;How does it affect operator authors?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lets-see-how-it-looks-like"&gt;Let's see how it looks like&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-it-work-under-the-hook"&gt;How does it work under the hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitation"&gt;Limitation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-did-the-deferrable-operator-work-before-this-change"&gt;How did the deferrable operator work before this change?&lt;/h2&gt;
&lt;p&gt;When a task with &lt;code&gt;deferrable=True&lt;/code&gt; is triggered, the &lt;a href="https://airflow.apache.org/docs/apache-airflow/2.9.1/administration-and-deployment/scheduler.html"&gt;scheduler&lt;/a&gt; assigns a worker to run the &lt;code&gt;execute&lt;/code&gt; method of the operator (e.g., &lt;a href="https://github.com/apache/airflow/blob/2d53c1089f78d8d1416f51af60e1e0354781c661/airflow/operators/trigger_dagrun.py#L73"&gt;TriggerDagRunOperator&lt;/a&gt;). If the task runs &lt;a href="https://github.com/apache/airflow/blob/2d53c1089f78d8d1416f51af60e1e0354781c661/airflow/operators/trigger_dagrun.py#L211"&gt;self.defer&lt;/a&gt; which raises a &lt;a href="https://github.com/apache/airflow/blob/2d53c1089f78d8d1416f51af60e1e0354781c661/airflow/models/baseoperator.py#L1684"&gt;TaskDeferred&lt;/a&gt;. The scheduler will change the task instance state to &lt;a href="https://github.com/apache/airflow/blob/e299ac91e2fddc709487aaaa4bb24162f77ba615/airflow/utils/state.py#L59C17-L59C25"&gt;deferred&lt;/a&gt;. Then the &lt;a href="https://airflow.apache.org/docs/apache-airflow/2.9.1/authoring-and-scheduling/deferring.html"&gt;triggerer&lt;/a&gt; will pick up the task and run the task in an async manner. After finishing, the trigger &lt;code&gt;yield&lt;/code&gt; a TriggerEvent. Then the scheduler will once again assign a worker to run this task and run the &lt;code&gt;next_method&lt;/code&gt; which is usually named as &lt;code&gt;execute_complate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The current flow looks like this.&lt;/p&gt;
&lt;div class="mermaid"&gt;
sequenceDiagram
autonumber
Scheduler -&gt;&gt; Worker: change the TaskInstanceState to QUEUED
Worker -&gt;&gt; Worker: run "execute" method
Worker -&gt;&gt; Triggerer: raise "TaskDeferred" exception and change TaskInstanceState to DEFERRED
Triggerer -) Triggerer: run "run" method and yield "TriggerEvent"
Triggerer --) Scheduler: Change the TaskInstanceState to SCHEDULED
Scheduler -&gt;&gt; Worker 2: Change the TaskInstanceState to QUEUED
Worker 2 -&gt;&gt; Worker 2: run "next_method"
Worker 2 -&gt;&gt; Scheduler: Change the TaskInstanceState to SUCCESS
&lt;/div&gt;

&lt;h2 id="why-do-we-want-it"&gt;Why do we want it?&lt;/h2&gt;
&lt;p&gt;If you take a look at &lt;a href="https://github.com/apache/airflow/blob/2d53c1089f78d8d1416f51af60e1e0354781c661/airflow/providers/amazon/aws/sensors/s3.py#L346-L367"&gt;S3KeysUnchangedSensor&lt;/a&gt;, the only thing that the &lt;a href="https://github.com/apache/airflow/blob/2d53c1089f78d8d1416f51af60e1e0354781c661/airflow/providers/amazon/aws/sensors/s3.py#L346-L367"&gt;execute method&lt;/a&gt; do is pretty much just deferring. Thus, we don’t really to execute it from a worker and than defer it to triggerer. We can just start the execution from triggerer and change the flow to the following.&lt;/p&gt;
&lt;div class="mermaid"&gt;
sequenceDiagram
autonumber
Scheduler -&gt;&gt; Triggerer: raise "TaskDeferred" and change TaskInstanceState to DEFERRED
Triggerer -) Triggerer: run "run" method and yield "TriggerEvent"
Triggerer --) Scheduler: Change the TaskInstanceState to SCHEDULED
Scheduler -&gt;&gt; Worker 2: Change the TaskInstanceState to QUEUED
Worker 2 -&gt;&gt; Worker 2: run "next_method"
Worker 2 -&gt;&gt; Scheduler: Change the TaskInstanceState to SUCCESS
&lt;/div&gt;

&lt;p&gt;And, in some cases, we don’t even need to run “next_method” in the triggerer, so we probably could support skip “next_method” as well in the future.&lt;/p&gt;
&lt;div class="mermaid"&gt;
sequenceDiagram
autonumber
Scheduler -&gt;&gt; Triggerer: raise "TaskDeferred" and change TaskInstanceState to DEFERRED
Triggerer -) Triggerer: run "run" and yield "TriggerEvent"
Triggerer --) Scheduler: Change the TaskInstanceState to SUCCESS
&lt;/div&gt;

&lt;h2 id="how-does-it-affect-dag-authors"&gt;How does it affect DAG authors?&lt;/h2&gt;
&lt;p&gt;Well, not much at this moment. Ideally, everything should be the same but more efficient, and it might also open new opportunities for other use cases.&lt;/p&gt;
&lt;h2 id="how-does-it-affect-operator-authors"&gt;How does it affect operator authors?&lt;/h2&gt;
&lt;p&gt;A new way to way to implement operators in an async manner&lt;/p&gt;
&lt;h2 id="lets-see-how-it-looks-like"&gt;Let's see how it looks like&lt;/h2&gt;
&lt;p&gt;Before this feature was added, to defer &lt;code&gt;WaitOneHourSensor&lt;/code&gt;, we need to run call the &lt;code&gt;defer&lt;/code&gt; method in &lt;code&gt;execute&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.sensors.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseSensorOperator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.triggers.temporal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TimeDeltaTrigger&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.utils.context&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WaitOneHourSensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseSensorOperator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TimeDeltaTrigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execute_complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# We have no more work to do here. Mark as complete.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we can add &lt;code&gt;start_trigger&lt;/code&gt; and &lt;code&gt;next_method&lt;/code&gt; attributes and the scheduler will know we want to execute this task directly from the triggerer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.sensors.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseSensorOperator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.triggers.temporal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TimeDeltaTrigger&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.utils.context&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WaitOneHourSensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseSensorOperator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeDeltaTrigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;execute_complete&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# We have no more work to do here. Mark as complete.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="how-does-it-work-under-the-hook"&gt;How does it work under the hook&lt;/h2&gt;
&lt;p&gt;Let's take a look at &lt;a href="https://github.com/apache/airflow/blob/3d97474a49a00bb6fcd67cf20d470a1fc2861f4f/airflow/models/dagrun.py#L1541-L1553"&gt;airflow/models/dagrun.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_method&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_execute_callback&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_success_callback&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outlets&lt;/span&gt;
            &lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;TaskInstanceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UP_FOR_RESCHEDULE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;try_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defer_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TaskDeferred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_trigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_method&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It checks whether a task has both &lt;code&gt;start_trigger&lt;/code&gt; and &lt;code&gt;next_method&lt;/code&gt; set. If so, we'll defer this task by calling &lt;code&gt;defer_task&lt;/code&gt; instead of adding it to &lt;code&gt;schedulable_ti_ids.&lt;/code&gt; (The &lt;code&gt;on_execute_callback&lt;/code&gt;, &lt;code&gt;on_success_callback&lt;/code&gt;, and &lt;code&gt;outlets&lt;/code&gt; checks are actually wrong and are addressed in &lt;a href="https://github.com/apache/airflow/pull/39585"&gt;#39585&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="limitation"&gt;Limitation&lt;/h2&gt;
&lt;p&gt;Dynamic Task Mapping / MappedOperator is not fully supported at this time due to the way this type of operator is initialized on the worker. However, a draft PR &lt;a href="https://github.com/apache/airflow/pull/39912"&gt;#39912&lt;/a&gt; has been created to address this.&lt;/p&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;

&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;</content><category term="Tech"></category><category term="Airflow"></category><category term="Airflow 2.10"></category><category term="Triggerer"></category></entry><entry><title>PyCon US 2024 Development Sprint</title><link href="https://blog.wei-lee.me/posts/tech/2024/05/pycon-us-2024-development-sprint" rel="alternate"></link><published>2024-05-21T10:15:00+08:00</published><updated>2024-05-21T10:15:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-05-21:/posts/tech/2024/05/pycon-us-2024-development-sprint</id><summary type="html">&lt;p&gt;The last time I came to &lt;a href="https://blog.wei-lee.me/posts/tech/2019/06/how-was-pycon-us-2019"&gt;PyCon US&lt;/a&gt;. I had quite a good time during the development sprint and had a few of my PRs merged. (even though the one to CPython was later closed 🥲) So yep, I think this might be a good idea to host a &lt;a href="https://us.pycon.org/2024/events/dev-sprints/"&gt;development sprint&lt;/a&gt; for &lt;a href="https://commitizen-tools.github.io/commitizen/"&gt;commitizen-tools&lt;/a&gt;. 👀&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The last time I came to &lt;a href="https://blog.wei-lee.me/posts/tech/2019/06/how-was-pycon-us-2019"&gt;PyCon US&lt;/a&gt;. I had quite a good time during the development sprint and had a few of my PRs merged. (even though the one to CPython was later closed 🥲) So yep, I think this might be a good idea to host a &lt;a href="https://us.pycon.org/2024/events/dev-sprints/"&gt;development sprint&lt;/a&gt; for &lt;a href="https://commitizen-tools.github.io/commitizen/"&gt;commitizen-tools&lt;/a&gt;. 👀&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="broad" src="/images/posts-image/2024-pycon-us-2024-development-sprint/broad.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="registration-broad-1" src="/images/posts-image/2024-pycon-us-2024-development-sprint/registration-broad-1.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="registration-broad-2" src="/images/posts-image/2024-pycon-us-2024-development-sprint/registration-broad-2.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Disclaimer: the doll has absolutely nothing to do with Python and commitizen-tools. It's just cute, and it might make it easier for people to find me 😆&lt;/p&gt;
&lt;p&gt;&lt;img alt="commitizen-tools" src="/images/posts-image/2024-pycon-us-2024-development-sprint/commitizen-tools.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;It turns out that no one is interested in such a small project. 🥲 I met someone who said he wanted to take a look, but he left after lunch. I feel like I've already gotten used to it, or maybe I just should. Or I should just lead &lt;a href="https://github.com/apache/airflow/"&gt;airflow&lt;/a&gt; next time 🥲&lt;/p&gt;
&lt;p&gt;Nonetheless, this sprint was quite intensive and productive for commitizen-tools. With &lt;a href="https://github.com/marcosdotme"&gt;@marcosdotme&lt;/a&gt; (who didn't even attend PyCon US) and I, we achieved the following results.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pulls"&gt;Pull Requests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Reviewed and Merged&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1123"&gt; build(deps-dev): bump pytest from 8.2.0 to 8.2.1 #1123 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1126"&gt; ci(workflow): move 'generate_cli_screenshots' steps to 'docspublish' #1126 &lt;/a&gt; to close &lt;a href="https://github.com/commitizen-tools/commitizen/issues/1125"&gt; CLI screenshots will not be updated on Github Pages #1125 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1127"&gt; Add py.typed file #1127 &lt;/a&gt; to close &lt;a href="https://github.com/commitizen-tools/commitizen/issues/1106"&gt; Add py.typed marker #1106 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Reviewed but Not Yet Merged&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1120"&gt; fix: add description for subcommands #1120 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1124"&gt; fix: set shell to False if running subprocess on Windows #1124 &lt;/a&gt; to close &lt;a href="https://github.com/commitizen-tools/commitizen/issues/1118"&gt; cz bump fails when running with rye #1118 &lt;/a&gt; and &lt;a href="https://github.com/commitizen-tools/commitizen/issues/1117"&gt; Installing pre-commit hook step in cz init fails when using rye #1117 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/995"&gt; fix(changelog): handle custom tag_format in changelog generation #995 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Helped Fixing&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/723"&gt; feat: draft of the --empty parameter #723 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1120"&gt; fix: add description for subcommands #1120 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Opened&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1128"&gt; Turn on isort for ruff #1128 &lt;/a&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues"&gt;issues&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Triaged&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/1111"&gt; Add option for "cz.toml" config file #1111 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/1110"&gt; UnicodeDecodeError when run the command cz bump #1110 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/1109"&gt; Auto-linked references to commits/PRs in changelog #1109 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/1032"&gt; Error "fatal: unknown refname: format lstrip=2" raised when running "cz bump" #1032 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/956"&gt; Exceptions when using cz from ISO8859-1 Terminal #956 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/938"&gt; Change default bump_message for plugin #938 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/841"&gt; cz bump cannot find version scheme "semver" after upgrade #841 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/798"&gt; Cannot create release version after creating a pre-release version #1068 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/790"&gt; Create a flag to build the changelog from commits in multiple git repositories #790 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/879"&gt; Can't bump without using annotated_tag #879 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/753"&gt; Flag to avoid creating a new commit for the bump #753 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/129"&gt; Use named capture group in bump_pattern to enable stricter check #129 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Closed&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/1095"&gt; option ci reads Changes to our CI configuration, possibly an error #1095 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/826"&gt; cz ch cannot decode Chinese word #826 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/827"&gt; conventional keyword in body would be parsed #827 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/798"&gt; change log was generated with garbage data #798 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/916"&gt; cz bump fails if any non semver tag exist #916 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/871"&gt; Bumping issue with PATCH version #871 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/788"&gt; Shortcut for commit types #788 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/757"&gt; cz bump with a breaking change after an RC does not automatically increase the major version #757 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/751"&gt; Allow releasing after a release candidate without commits #751 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/672"&gt; Be able to configure the allowed prefixes list #672 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/597"&gt; Global Configuration #597 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Created&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen-tools/commitizen/issues/1129"&gt; Add won't added features to FAQ page #1129 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also want to thank Yucheng for attempting to address &lt;a href="https://github.com/commitizen-tools/commitizen/issues/1110"&gt; UnicodeDecodeError when running cz bump #1110 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The great thing is that I finally managed to triage &lt;strong&gt;all&lt;/strong&gt; issues with the &lt;code&gt;issue-status: needs-triage&lt;/code&gt; label! but... found out we still need to check issues filed before &lt;a href="https://commitizen-tools.github.io/commitizen/contributing/#use-of-github-labels"&gt;the labeling system&lt;/a&gt; was introduced.&lt;/p&gt;
&lt;p&gt;Among all the PRs I worked on yesterday,  &lt;a href="https://github.com/commitizen-tools/commitizen/pull/1120"&gt; fix: add description for subcommands #1120 &lt;/a&gt; was quite interesting. I didn't know that &lt;code&gt;argparse&lt;/code&gt; changed the prompt of optional arguments from &lt;code&gt;Optional Arguments&lt;/code&gt; to &lt;code&gt;options&lt;/code&gt; since Python 3.10.&lt;/p&gt;
&lt;p&gt;During the sprint, I shared commitizen-tools with Takanoryさん. Later, he introduced me to &lt;a href="https://github.com/twisted/towncrier"&gt;towncrier&lt;/a&gt;, a similar tool that I plan to explore further. We also had a great chat about Star Wars. 🌟 I was excited to share that I went to &lt;a href="https://travlog.wei-lee.me/posts/travel/2019/12/rise-of-the-resistance/"&gt;Rise of the Resistence&lt;/a&gt; on the very first day it opened. 🚀&lt;/p&gt;
&lt;p&gt;After the sprint, a couple of APAC folks went to this church restaurant. It was quite a pleasant dinner. Always love to hangout with Pythonistas 😄&lt;/p&gt;
&lt;p&gt;&lt;img alt="church-1" src="/images/posts-image/2024-pycon-us-2024-development-sprint/church-1.jpeg"&gt;&lt;br&gt;
&lt;img alt="church-2" src="/images/posts-image/2024-pycon-us-2024-development-sprint/church-2.jpeg"&gt;&lt;br&gt;
&lt;img alt="church-3" src="/images/posts-image/2024-pycon-us-2024-development-sprint/church-3.jpeg"&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="PyCon"></category><category term="Python"></category><category term="Development Sprint"></category><category term="commitizen-tools"></category></entry><entry><title>將終端機畫面紀錄成 gif</title><link href="https://blog.wei-lee.me/posts/tech/2024/04/record-terminal-actions-and-export-as-gif" rel="alternate"></link><published>2024-04-07T22:42:00+08:00</published><updated>2024-04-07T22:42:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-04-07:/posts/tech/2024/04/record-terminal-actions-and-export-as-gif</id><summary type="html">&lt;p&gt;想說 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; README 的 demo 動畫也好久沒更新了&lt;br&gt;
可以來研究一下怎麼產出新的動畫更新上去&lt;/p&gt;
&lt;p&gt;&lt;img alt="commitizen-demo" src="/images/posts-image/2024-record-terminal-actions-and-export-as-gif/commitizen-demo.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;想說 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; README 的 demo 動畫也好久沒更新了&lt;br&gt;
可以來研究一下怎麼產出新的動畫更新上去&lt;/p&gt;
&lt;p&gt;&lt;img alt="commitizen-demo" src="/images/posts-image/2024-record-terminal-actions-and-export-as-gif/commitizen-demo.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;之前做簡報的時候就有用過一次&lt;br&gt;
本文是當時的草稿，躺到現在才下定決心要整理完&lt;br&gt;
記錄一下為了發&lt;a href="https://github.com/commitizen-tools/commitizen/pull/1055/files"&gt;這個 PR&lt;/a&gt;所用到的工具 &lt;a href="https://github.com/asciinema/asciinema"&gt;asciinema&lt;/a&gt; 跟 &lt;a href="https://github.com/asciinema/agg"&gt;agg&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="asciinema"&gt;asciinema&lt;/h2&gt;
&lt;p&gt;asciinema 是負責進行終端機紀錄的工具，會存成 &lt;code&gt;.cast&lt;/code&gt; 的格式&lt;br&gt;
可以存在 local 或上傳到 &lt;a href="https://asciinema.org/"&gt;asciinema.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;asciinema rec&lt;/code&gt; 開始紀錄&lt;br&gt;
要結束錄影時可以按 &lt;code&gt;&amp;lt;ctrl-d&amp;gt;&lt;/code&gt; 或輸入 &lt;code&gt;exit&lt;/code&gt;&lt;br&gt;
結束錄影時會詢問要不要存擋，要存在哪&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;asciinema&lt;span class="w"&gt; &lt;/span&gt;rec&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;output&lt;span class="w"&gt; &lt;/span&gt;path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;extension&lt;span class="w"&gt; &lt;/span&gt;.cast&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;

asciinema:&lt;span class="w"&gt; &lt;/span&gt;recording&lt;span class="w"&gt; &lt;/span&gt;asciicast&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;output&lt;span class="w"&gt; &lt;/span&gt;path&amp;gt;
asciinema:&lt;span class="w"&gt; &lt;/span&gt;press&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;ctrl-d&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;re&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;


asciinema:&lt;span class="w"&gt; &lt;/span&gt;recording&lt;span class="w"&gt; &lt;/span&gt;finished
&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;ave&lt;span class="w"&gt; &lt;/span&gt;locally,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;u&lt;span class="o"&gt;)&lt;/span&gt;pload&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;asciinema.org,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;d&lt;span class="o"&gt;)&lt;/span&gt;iscard
&lt;span class="o"&gt;[&lt;/span&gt;s,u,d&lt;span class="o"&gt;]&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過 &lt;code&gt;asciinema play&lt;/code&gt; 可以在終端機重新播放剛剛的紀錄&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;asciinema&lt;span class="w"&gt; &lt;/span&gt;play&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;.cast&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;想要一次看完所有內容可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;asciinema&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;.cast&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="agg"&gt;agg&lt;/h2&gt;
&lt;p&gt;agg 則是 asciinema 組織中的專案，負責產生 gif&lt;br&gt;
（全名是  asciinema gif generator ）&lt;br&gt;
有不少可以客製化的參數&lt;br&gt;
我比較常用的是 &lt;code&gt;--font-family&lt;/code&gt;, &lt;code&gt;--speed&lt;/code&gt;, &lt;code&gt;--no-loop&lt;/code&gt;&lt;br&gt;
分別可以設定字體、播放速度跟是否要讓 gif 重播&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agg&lt;span class="w"&gt; &lt;/span&gt;--font-family&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ComicShannsMono Nerd Font&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.5&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;input&lt;span class="w"&gt; &lt;/span&gt;cast&lt;span class="w"&gt; &lt;/span&gt;path&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;output&lt;span class="w"&gt; &lt;/span&gt;gif&lt;span class="w"&gt; &lt;/span&gt;path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="lets-put-everything-together"&gt;Let's put everything together&lt;/h2&gt;
&lt;p&gt;既然是分享 asciinema 的文章&lt;br&gt;
當然是得把文章用到的指令們直接做成 gif demo 吧！&lt;/p&gt;
&lt;p&gt;&lt;img alt="asciinema" src="/images/posts-image/2024-record-terminal-actions-and-export-as-gif/asciinema.gif"&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="tool"></category></entry><entry><title>Python package installation failure inside a CircleCI pipeline</title><link href="https://blog.wei-lee.me/posts/tech/2024/04/python-package-installation-failure-inside-a-CircleCI-pipeline" rel="alternate"></link><published>2024-04-04T15:06:00+08:00</published><updated>2024-04-04T15:06:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-04-04:/posts/tech/2024/04/python-package-installation-failure-inside-a-CircleCI-pipeline</id><summary type="html">&lt;p&gt;就像上次的&lt;a href="https://blog.wei-lee.me/posts/tech/2024/01/how-to-deal-with-could-not-read-username-for-github"&gt; github actions 上遇到的&lt;/a&gt;&lt;br&gt;
原本跑得好好的 CI pipeline 又又又死掉了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;就像上次的&lt;a href="https://blog.wei-lee.me/posts/tech/2024/01/how-to-deal-with-could-not-read-username-for-github"&gt; github actions 上遇到的&lt;/a&gt;&lt;br&gt;
原本跑得好好的 CI pipeline 又又又死掉了&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3 id="error-message"&gt;Error Message&lt;/h3&gt;
&lt;p&gt;這次是在 CircleCI 中，設定 Python 的環境時，遇到以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Traceback&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;recent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/site-packages/build/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;176&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_handle_build_error&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/site-packages/build/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;427&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;built&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/site-packages/build/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;236&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build_package&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isolation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;srcdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;distribution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;config_settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;skip_dependency_check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;installer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/site-packages/build/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_build&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_build_in_isolated_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;srcdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;distribution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;config_settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;installer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/site-packages/build/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_build_in_isolated_env&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;DefaultIsolatedEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;installer&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;installer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/site-packages/build/env.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;__enter__&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;_ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;Creating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;isolated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_env_backend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/site-packages/build/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_log&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;_cprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;}{}{&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;initial_indent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/textwrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;391&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/textwrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;363&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/textwrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;354&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wrap&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_wrap_chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/.../python3.9/textwrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;248&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_wrap_chunks&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;invalid width %r (must be &amp;gt; 0)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而且在我還無法在 local 重現 😱&lt;/p&gt;
&lt;h3 id="root-cause"&gt;Root Cause&lt;/h3&gt;
&lt;p&gt;terminal / tty 的視窗大小設定在不正常的大小&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;p&gt;雖然問題根源是問同事才知道的，但後來有看一下其他人是不是遇到同樣的問題&lt;br&gt;
根據&lt;a href="https://github.com/Nuitka/Nuitka/issues/1803#issuecomment-1254006096"&gt;這個討論&lt;/a&gt; 好像是 CircleCI 的 bug&lt;br&gt;
至於為什麼會突然出錯，我就沒研究到那麼細了&lt;br&gt;
寬度 -2 到底是搞什麼...&lt;/p&gt;
&lt;p&gt;解決方案也很直覺，只要把 tty 設定到正常的大小，就不會遇到相似的錯誤了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stty&lt;span class="w"&gt; &lt;/span&gt;cols&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Nuitka/Nuitka/issues/1803"&gt; Why the compilation fails inside a CircleCI pipeline ? #1803 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/travis-ci/travis-ci/issues/5407"&gt; Notes on setting tty/console/terminal width #5407 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="CircleCI"></category><category term="CI/CD"></category><category term="Python"></category></entry><entry><title>Intro to Airflow - From Zero to Hero</title><link href="https://blog.wei-lee.me/posts/tech/2024/02/intro-to-airflow-from-zero-to-hero" rel="alternate"></link><published>2024-02-20T23:59:00+08:00</published><updated>2024-02-20T23:59:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-02-20:/posts/tech/2024/02/intro-to-airflow-from-zero-to-hero</id><summary type="html">&lt;p&gt;上週六感謝&lt;a href="https://www.facebook.com/profile.php?id=100090487996922"&gt;源來適你&lt;/a&gt;邀請我到社群線上分享 Airflow&lt;br&gt;
好久沒有準備超過 10 分鐘的分享了 😱&lt;/p&gt;
</summary><content type="html">&lt;p&gt;上週六感謝&lt;a href="https://www.facebook.com/profile.php?id=100090487996922"&gt;源來適你&lt;/a&gt;邀請我到社群線上分享 Airflow&lt;br&gt;
好久沒有準備超過 10 分鐘的分享了 😱&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;上次上台還是帶著無敵星星在 PyCon APAC 2023 &lt;a href="https://speakerdeck.com/leew/does-kobayashi-san-write-code-vulnerable-to-sql-injection"&gt;閃電講&lt;/a&gt; 的時候了&lt;br&gt;
當時台下笑得還蠻開心的&lt;br&gt;
這次不知道是因為線上，還是只是我太沒梗了嗚嗚嗚&lt;br&gt;
內容已經不夠充實了，娛樂效果還不足 🥲&lt;/p&gt;
&lt;p&gt;&lt;img alt="star" src="/images/posts-image/2024-intro-to-airflow-from-zero-to-hero/star.jpg"&gt;&lt;/p&gt;
&lt;p&gt;這次的分享主要介紹了 Airflow 的 component&lt;br&gt;
透過 WebUI 觸發 DAG 後， worker, scheduler, metadata database 是怎麼互動？&lt;br&gt;
deferrable operator 是如何在 worker 跟 triggerer 運作的&lt;br&gt;
上次去勇哥的誰來午餐的時候，剛好有跟 TP 討論到就學了一課&lt;/p&gt;
&lt;p&gt;記錄了最近用 &lt;a href="https://airflow.apache.org/docs/apache-airflow/stable/authoring-and-scheduling/datasets.html"&gt;Dataset&lt;/a&gt; 遇到的小雷&lt;br&gt;
Dataset 目前還沒有辦法自動偵測 data 是否改變&lt;br&gt;
只能作為其他 DAG 的 outlet&lt;br&gt;
如果那個 DAG 被執行了，才去通知相依於 Dataset 的 DAG&lt;br&gt;
雖然雷的可能是我沒有好好 read the **** documentation&lt;/p&gt;
&lt;p&gt;去年聖誕節有被 Flyte 嘴了一下 Airflow 的 operator 語法不直覺&lt;br&gt;
這次輪到我用 &lt;a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/taskflow.html#taskflow"&gt;Taskflow&lt;/a&gt; 反駁一下&lt;br&gt;
其實 Airflow 也是有跟 Python function 接近的語法啊！&lt;/p&gt;
&lt;p&gt;除了介紹其他 astronomer 的開源專案外&lt;br&gt;
還是得例行的工商 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen-tools&lt;/a&gt; 跟 &lt;a href="https://tw.pycon.org/"&gt;PyCon Taiwan&lt;/a&gt;&lt;br&gt;
還有讚揚了 PyCon Taiwan 的 Airflow 最初導師 - 博安老師&lt;/p&gt;
&lt;iframe class="speakerdeck-iframe" style="border: 0px; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 420;" frameborder="0" src="https://speakerdeck.com/player/37a8ccf607f245dc8430ad414e74ad81" title="Intro to Airflow - From Zero to Hero" allowfullscreen="true" data-ratio="1.3333333333333333"&gt;&lt;/iframe&gt;

&lt;p&gt;倒是 Q &amp;amp; A 還蠻熱烈、蠻有趣的&lt;br&gt;
討論了不少職涯、公司的商業模式、技術問題&lt;br&gt;
雖然我離公司很商業的部分有點距離，很多問題都只能窩不知道&lt;/p&gt;
&lt;p&gt;&lt;img alt="i-don't-know" src="/images/posts-image/2024-intro-to-airflow-from-zero-to-hero/i-don't-know.jpg"&gt;&lt;/p&gt;
&lt;p&gt;簡單記錄一下這次的分享&lt;br&gt;
不過最重要還是要宣傳&lt;strong&gt;暫定 3/16 Sat 10:00 a.m. 拍抗女神在源來適你的分享&lt;/strong&gt;&lt;br&gt;
請鎖定&lt;a href="https://www.facebook.com/profile.php?id=100090487996922"&gt;源來適你&lt;/a&gt;的 FB 粉專公告！&lt;br&gt;
看到這的你各位，通通給我去捧場參加啊&lt;/p&gt;</content><category term="Tech"></category><category term="源來適你"></category><category term="Airflow"></category><category term="Talks"></category></entry><entry><title>2023 東京 Coworking Spaces</title><link href="https://blog.wei-lee.me/posts/tech/2024/01/2023-tokyo-coworking-space" rel="alternate"></link><published>2024-01-22T22:58:00+08:00</published><updated>2024-01-22T22:58:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-01-22:/posts/tech/2024/01/2023-tokyo-coworking-space</id><summary type="html">&lt;p&gt;因緣際會下 2023 稍微去了幾次東京&lt;br&gt;
因為想待在日本久一點，但又沒有那麼多假&lt;br&gt;
只好在當地找 coworking space 來工作&lt;/p&gt;
</summary><content type="html">&lt;p&gt;因緣際會下 2023 稍微去了幾次東京&lt;br&gt;
因為想待在日本久一點，但又沒有那麼多假&lt;br&gt;
只好在當地找 coworking space 來工作&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;我很推薦先閱讀&lt;a href="https://irvinfly.medium.com/co-working-space-in-tokyo-8a1162e4bc58"&gt;旅途中的 co-working space&lt;/a&gt;&lt;br&gt;
這篇文章大致介紹了在日本幾種常見的 coworking spaces&lt;br&gt;
在 2023 年找 coworking space 的旅途中給了我不小的幫助&lt;br&gt;
我寫的這篇文則是針對去過的這幾間紀錄下我的想法&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#kamata-coworking-space-ota-fab"&gt;Kamata Coworking Space Ōta fab (京急浦田)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#monz-space"&gt;MONZ SPACE (築地)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basispoint"&gt;BasisPoint 上野店 (上野)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;猫カフェ モカラウンジ 池袋東口店 (池袋)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tefu-lounge-shimokitazawa"&gt;(tefu) lounge Shimokitazawa (下北澤)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yokohamawakusupesu"&gt;Yokohamawakusupesu (橫濱)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#andwork-shibuya"&gt;.andwork shibuya (涉谷)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#andwork-kawasaki"&gt;.andwork kawasaki (川崎)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;紀錄的價錢都是平日一天的價錢&lt;br&gt;
有些 coworking spaces 可能連續幾天會比較便宜&lt;br&gt;
但因為我常常換地方，所以用不太到&lt;br&gt;
開放時間盡可能會想希望找超過 19:00 的&lt;br&gt;
或者至少要到 18:00&lt;br&gt;
飲料的話我就還好，沒有也沒差&lt;br&gt;
以下順序大致是我的喜歡順序&lt;/p&gt;
&lt;h2 id="kamata-coworking-space-ota-fab"&gt;Kamata Coworking Space Ōta fab (京急浦田)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maps.app.goo.gl/HqK7oGfC4sUSMKrs6"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間: 09:00 ~ 19:00&lt;/li&gt;
&lt;li&gt;價格： ￥1,800&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這間算是意外找到，但真的很喜歡的一間&lt;br&gt;
待起來有點像是摩茲工寮&lt;br&gt;
大部分來的人都蠻安靜的，是個很適合工作的地方&lt;br&gt;
但要開會也沒有問題&lt;br&gt;
不用額外付費就有外接螢幕可以用&lt;br&gt;
有幾張還不錯的電腦椅可以用&lt;br&gt;
飲料只有一台很簡單的咖啡機，但也足夠了&lt;br&gt;
離羽田機場不遠，離市中心小有距離&lt;br&gt;
價位是 2023 年去到最划算的&lt;br&gt;
是我最推薦的 coworking space&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ōta fab" src="/images/posts-image/2024-2023-tokyo-coworking-space/17057695327403.jpg"&gt;&lt;/p&gt;
&lt;h2 id="monz-space"&gt;MONZ SPACE (築地)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maps.app.goo.gl/EQXw9BE7aGpAnQ4R8"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間： 09:00 ~ 18:00&lt;/li&gt;
&lt;li&gt;價位： ￥2,000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MONZ SPACE 幾乎在築地市場旁邊&lt;br&gt;
所以不用擔心午餐沒地方吃，但觀光客可能很多就是了（笑&lt;br&gt;
一樣是不用額外付費就可以使用外接螢幕&lt;br&gt;
中間長桌的高度，印象中可以站立工作&lt;br&gt;
而且也有提供一些小房間可以開線上會議&lt;br&gt;
整體氛圍像是在很 chill 的咖啡廳&lt;br&gt;
相比之下 Kamata Coworking Space Ōta fab 給人的辦公室感比較重些&lt;br&gt;
有提供一些簡單的飲料&lt;br&gt;
最大的缺點就是單日方案的結束時間是 18:00，稍微早了一點&lt;/p&gt;
&lt;p&gt;&lt;img alt="MONZ SPACE" src="/images/posts-image/2024-2023-tokyo-coworking-space/17057694174279.jpg"&gt;&lt;/p&gt;
&lt;h2 id="basispoint"&gt;BasisPoint 上野店 (上野)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maps.app.goo.gl/4GD8SdLPpnKhAxrV8"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間： 08:00 ~ 22:00&lt;/li&gt;
&lt;li&gt;價位: ￥2,860&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很單純就是很適合工作的地方，還蠻安靜的&lt;br&gt;
但要開會也沒問題&lt;br&gt;
有可租借的外接螢幕&lt;br&gt;
好像有簡單的冰飲料，熱的好像要錢&lt;br&gt;
旁邊是阿美橫町，吃飯很方便&lt;br&gt;
不過上野店收了，可以找其他 BasisPoint 試試看&lt;/p&gt;
&lt;p&gt;&lt;img alt="BasisPoint" src="/images/posts-image/2024-2023-tokyo-coworking-space/17057693821324.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;猫カフェ モカラウンジ 池袋東口店 (池袋)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://catmocha.jp/shop/ikebukuro2/"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間： 10:00 ~ 20:00&lt;/li&gt;
&lt;li&gt;價位： ￥3,025&lt;ul&gt;
&lt;li&gt;最大料金： ￥2,400 (2,640)&lt;/li&gt;
&lt;li&gt;Drink bar 費： ￥350 (385)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我還蠻意外貓咪咖啡廳竟然這麼適合工作...&lt;br&gt;
這裡的缺點（？）大概就是太舒服了&lt;br&gt;
有很多貓可以嚕，裡面又一堆漫畫&lt;br&gt;
還有 Switch 跟紅白機可以玩&lt;br&gt;
到底誰想要工作&lt;br&gt;
甚至還有床可以睡耶&lt;br&gt;
（當天一大早才到日本，有床真的幫了大忙）&lt;br&gt;
環境還蠻安靜的&lt;br&gt;
感覺不是個適合大聲開會的地方&lt;br&gt;
飲料的選擇很多樣，Drink bar 費有值得&lt;br&gt;
（雖然也沒有不付的選擇就是了）&lt;/p&gt;
&lt;p&gt;&lt;img alt="猫カフェ モカラウンジ 池袋東口店" src="/images/posts-image/2024-2023-tokyo-coworking-space/17057693476533.jpg"&gt;&lt;/p&gt;
&lt;h2 id="tefu-lounge-shimokitazawa"&gt;(tefu) lounge Shimokitazawa (下北澤)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maps.app.goo.gl/TPmJ6GYqZNuj7xQr6"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間： 09:00 ~ 23:30&lt;/li&gt;
&lt;li&gt;價位： ￥3,000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很適合工作也蠻舒服的咖啡廳，可以待到很晚&lt;br&gt;
英文好像不太通，但我靠著看動畫學來的日文撐過去了&lt;br&gt;
跟 SkyCo 的收費模式差不多&lt;br&gt;
只要有使用空間，基本款的飲料就可以喝到飽&lt;br&gt;
想喝好一點或吃東西的可以加價購&lt;br&gt;
不過下北澤本身就很多吃的，倒也不見得要在這吃&lt;br&gt;
想邊工作邊聖地巡禮孤獨搖滾的話，這間很適合&lt;/p&gt;
&lt;p&gt;&lt;img alt="tefu" src="/images/posts-image/2024-2023-tokyo-coworking-space/17057694674070.jpg"&gt;&lt;/p&gt;
&lt;h2 id="yokohamawakusupesu"&gt;Yokohamawakusupesu (橫濱)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maps.app.goo.gl/UaJSkWmLqfDZAwrA7"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間： 07:00 ~ 22:00&lt;/li&gt;
&lt;li&gt;價位： ￥2,000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;單純適合工作的地方，蠻安靜的&lt;br&gt;
位置稍微有點難找&lt;br&gt;
沒有免費飲料，但有飲料販賣機&lt;/p&gt;
&lt;h2 id="andwork-shibuya"&gt;.andwork shibuya (涉谷)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.xandwork.com/en/shibuya/"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間： 07:00 ~ 24:00&lt;/li&gt;
&lt;li&gt;價錢: ￥3,000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這是我東京第一間去的 coworking sapce&lt;br&gt;
一開始蠻喜歡的&lt;br&gt;
多去了幾間之後，我覺得這間只有還可以&lt;br&gt;
本質是飯店的交誼空間&lt;br&gt;
但運氣不好的話就會有點吵&lt;br&gt;
飲料是有幾種選擇的咖啡機，我覺得蠻夠的&lt;br&gt;
位置在涉谷這點可能是他最大的優點&lt;/p&gt;
&lt;p&gt;&lt;img alt=".andwork shibuya" src="/images/posts-image/2024-2023-tokyo-coworking-space/17057695142234.jpg"&gt;  &lt;/p&gt;
&lt;h2 id="andwork-kawasaki"&gt;.andwork kawasaki (川崎)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maps.app.goo.gl/JHFqummPCTrKf4oC7"&gt;Google Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;營業時間： 07:00 ~ 22:00&lt;/li&gt;
&lt;li&gt;價位: ￥2,000 (3 hours ￥1,500)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非常不推薦&lt;br&gt;
真的是不要不信 Google 上的評價 🤦‍♂️&lt;br&gt;
它的本質是飯店的餐廳，座位不算適合工作&lt;br&gt;
用餐時段會被要求換位置，而且也蠻吵的&lt;br&gt;
之所以在價位標了 3 小時，是因為還待不滿一天就決定要走了...&lt;/p&gt;</content><category term="Tech"></category><category term="Coworking Space"></category></entry><entry><title>遇到 Error: fatal: could not read Username for 'https://github.com': terminal prompts disabled 怎麼辦 😱</title><link href="https://blog.wei-lee.me/posts/tech/2024/01/how-to-deal-with-could-not-read-username-for-github" rel="alternate"></link><published>2024-01-17T22:56:00+08:00</published><updated>2024-01-17T22:56:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2024-01-17:/posts/tech/2024/01/how-to-deal-with-could-not-read-username-for-github</id><summary type="html">&lt;p&gt;相信有在用 GitHub Actions 的大家應該都有用過 &lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近某個平常跑得好好的 CI/CD pipeline 卻噴了這個錯誤&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Error: fatal: could not read Username for &amp;#39;https://github.com&amp;#39;: terminal prompts disabled
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;相信有在用 GitHub Actions 的大家應該都有用過 &lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近某個平常跑得好好的 CI/CD pipeline 卻噴了這個錯誤&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Error: fatal: could not read Username for &amp;#39;https://github.com&amp;#39;: terminal prompts disabled
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h2 id="root-cause"&gt;Root Cause&lt;/h2&gt;
&lt;p&gt;這可能是因為 PAT (&lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens"&gt;Personal Access Token&lt;/a&gt;) 已經過期了&lt;br&gt;
（我也是想了一下才看懂 PAT 是什麼縮寫...）&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;先到 GitHub 個人頁面的 &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Developer Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Personal Access Tokens&lt;/code&gt;&lt;br&gt;
找出&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt;用的那個過期的 token，並且更新它&lt;/p&gt;
&lt;p&gt;接著回到專案頁面的 &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Secrets and variables&lt;/code&gt; &amp;gt; &lt;code&gt;Actions&lt;/code&gt; 找到對應的 secret，並取代成更新過的 token&lt;/p&gt;
&lt;h2 id="_1"&gt;雜記&lt;/h2&gt;
&lt;p&gt;遙想當初開始寫部落格，其實也就只是把筆記存起來，讓未來的自己好找&lt;br&gt;
現在部落格的搜尋，好像又可以開始寫這種短短的小文章了&lt;br&gt;
回歸初心（？？？）&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/checkout/issues/664"&gt; Error: fatal: could not read Username for 'https://github.com': terminal prompts disabled #664 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="GitHub Actions"></category><category term="CI/CD"></category><category term="GitHub"></category></entry><entry><title>TIL: 字串也是 JSON</title><link href="https://blog.wei-lee.me/posts/tech/2023/11/til-string-is-a-kind-of-json" rel="alternate"></link><published>2023-11-28T23:30:00+08:00</published><updated>2023-11-28T23:30:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2023-11-28:/posts/tech/2023/11/til-string-is-a-kind-of-json</id><summary type="html">&lt;p&gt;之前在 review &lt;a href="https://github.com/apache/airflow/pull/33224"&gt;airflow PR&lt;/a&gt; 的時候問了一個蠢問題&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;May I know why is '"hello"' an valid json content?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更蠢的是這句英文還是錯的&lt;br&gt;
應該要是 a valid json&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前在 review &lt;a href="https://github.com/apache/airflow/pull/33224"&gt;airflow PR&lt;/a&gt; 的時候問了一個蠢問題&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;May I know why is '"hello"' an valid json content?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更蠢的是這句英文還是錯的&lt;br&gt;
應該要是 a valid json&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;得到了&lt;a href="https://github.com/apache/airflow/pull/33224#discussion_r1292201137"&gt;Jarek 的回覆&lt;/a&gt;才知道字串本身就是合法的 JSON，不需要是 object&lt;br&gt;
可以從 &lt;a href="https://www.json.org/json-en.html"&gt;Introducing JSON&lt;/a&gt; 找到 "any value on it's own (string) is perfectly valid json"&lt;/p&gt;
&lt;p&gt;用 Python 做了點小實驗，確實也不會遇到 &lt;code&gt;JSONDecodeError&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="JSON"></category><category term="TIL"></category></entry><entry><title>Pagefind UI 我的超人</title><link href="https://blog.wei-lee.me/posts/tech/2023/11/pagefind-ui" rel="alternate"></link><published>2023-11-01T23:10:00+08:00</published><updated>2023-11-01T23:10:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2023-11-01:/posts/tech/2023/11/pagefind-ui</id><summary type="html">&lt;p&gt;當我說搜尋功能，我指的是真的可以用的搜尋功能&lt;/p&gt;
</summary><content type="html">&lt;p&gt;當我說搜尋功能，我指的是真的可以用的搜尋功能&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;會這麼說是因為之前的真的是不能用的 🥲&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pagefind-ui"&gt;什麼是 Pagefind UI 呢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pagefind-ui-pelican"&gt;如何將 Pagefind UI 整合進 Pelican？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#search-index-github-actions"&gt;將產生 search index 整合進 GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;看起來如何呢？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;那些你不需要知道的背後故事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="pagefind-ui"&gt;什麼是 &lt;a href="https://pagefind.app/"&gt;Pagefind UI&lt;/a&gt; 呢&lt;/h3&gt;
&lt;p&gt;根據官網的介紹&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pagefind is a fully static search library that aims to perform well on large sites, while using as little of your users’ bandwidth as possible, and without hosting any infrastructure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Pagefind 是&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;靜態搜尋的函式庫&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;即使在很大的網站也有不錯的表現&lt;/li&gt;
&lt;li&gt;盡可能的減少使用者的頻寬&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不用架任何的 infra&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再往下滑一點還有很多酷功能，但我大多還沒用到 😆&lt;br&gt;
其中比較重要的是多語言支援，尤其是中文&lt;/p&gt;
&lt;p&gt;而設定上很簡單，也是我喜歡 Pagefind UI 的一點&lt;/p&gt;
&lt;p&gt;我的 blog 都是使用 &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; 產生，並 host 在 Github Pages 上&lt;br&gt;
下一段會分享如何將 Pagefind UI 整合進 Pelican&lt;br&gt;
關於 Pelican 的細節不會贅述太多&lt;/p&gt;
&lt;h2 id="pagefind-ui-pelican"&gt;如何將 Pagefind UI 整合進 Pelican？&lt;/h2&gt;
&lt;p&gt;首先可以在 pelican 的設定檔（i.e., &lt;code&gt;pelicanconf.py&lt;/code&gt;）加入 &lt;code&gt;PAGEFIND_ENABLED&lt;/code&gt; 變數&lt;br&gt;
用它來決定是否使用 Pagefind UI&lt;/p&gt;
&lt;p&gt;再來要去修改主題&lt;br&gt;
以我使用的主題 &lt;a href="https://github.com/Lee-W/elegant"&gt;elegant&lt;/a&gt; 為例&lt;br&gt;
需要將載入 &lt;a href="https://github.com/Lee-W/elegant/blob/blog-pagefindui-example/templates/base.html#L18-L20"&gt;css&lt;/a&gt; 和 &lt;a href="https://github.com/Lee-W/elegant/blob/blog-pagefindui-example/templates/base.html#L128-L138"&gt;js&lt;/a&gt; 的部分加入 &lt;a href="https://github.com/Lee-W/elegant/blob/blog-pagefindui-example/templates/base.html"&gt;templates/base.html&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;&amp;lt;!--templates/base.html--&amp;gt;&lt;/span&gt;

  {% if PAGEFIND_ENABLED|default(False) %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/pagefind/pagefind-ui.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;&amp;lt;!--templates/base.html--&amp;gt;&lt;/span&gt;

  {% if PAGEFIND_ENABLED|default(True) %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/pagefind/pagefind-ui.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PagefindUI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#search&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;showImages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;理想上應該要把這幾段拆成各自的 template，然後在 &lt;code&gt;templates/base.html&lt;/code&gt; include 他們&lt;br&gt;
但我有點懶，之後想 refactor 再說&lt;/p&gt;
&lt;p&gt;搜尋區塊的改動則會根據主題的設計跟你希望如何呈現搜尋有關&lt;br&gt;
在 elegant 中是把搜尋欄放在 &lt;a href="https://github.com/Lee-W/elegant/blob/blog-pagefindui-example/templates/base.html#L90-L92"&gt;base.html&lt;/a&gt; 的一個項目&lt;br&gt;
所在這我用 &lt;code&gt;li&lt;/code&gt; 包住 &lt;code&gt;&amp;lt;div id="search"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;&amp;lt;!--templates/base.html--&amp;gt;&lt;/span&gt;

{% if PAGEFIND_ENABLED %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% else %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而在我&lt;a href="https://travlog.wei-lee.me/"&gt;另一個 blog &lt;/a&gt;則把它設定成獨立的頁面&lt;br&gt;
如果沒意外的話，就大功告成了&lt;br&gt;
（另一個 blog 因為 css 的調整確實有多花了點時間，但功能上是這樣就完成了）&lt;/p&gt;
&lt;p&gt;沒錯！ 就是這麼簡單&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy" src="/images/posts-image/2023-pagefindui/easy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如果這時候直接把 Pelican 的 local server 跑起來，你就會發現&lt;br&gt;
什麼都搜尋不到 🔍&lt;br&gt;
因為沒有產生 search index 給 Pagefind UI 去找&lt;/p&gt;
&lt;p&gt;而 search index 可以透過以下指令產生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npx&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;pagefind&lt;span class="w"&gt; &lt;/span&gt;--site&lt;span class="w"&gt; &lt;/span&gt;output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;--site&lt;/code&gt; 後面吃的參數是 Pelican 的輸出資料夾&lt;br&gt;
預設通常是 &lt;code&gt;output&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="search-index-github-actions"&gt;將產生 search index 整合進 GitHub Actions&lt;/h2&gt;
&lt;p&gt;我的 blog 在寫完文章後，只要推上 main 分支&lt;br&gt;
GitHub Actions 就會自動幫我產出最新的 blog ，並且部署到 GitHub Pages 上&lt;/p&gt;
&lt;p&gt;為了讓 Pagefind UI 有 search index 可以找&lt;br&gt;
必須在產出 blog 跟部屬的步驟中間，加入以下的步驟讓 GitHub Actions 也幫我產生 search index&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# steps that build the blog&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;GitHub Action for npx&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mikeal/npx@1.0.0&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build search index&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;npx -y pagefind --site output&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# steps that deploy the blog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;看起來如何呢？&lt;/h2&gt;
&lt;p&gt;這個 blog&lt;/p&gt;
&lt;p&gt;&lt;img alt="this-blog" src="/images/posts-image/2023-pagefindui/this-blog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travlog.wei-lee.me/"&gt;另一個 blog &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="another-blog" src="/images/posts-image/2023-pagefindui/another-blog.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;那些你不需要知道的背後故事&lt;/h2&gt;
&lt;p&gt;以下聽故事&lt;/p&gt;
&lt;p&gt;當初使用 &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;elegant&lt;/a&gt; 主題，其中一個原因就是它自帶搜尋功能（&lt;a href="https://elegant.oncrashreboot.com/add-search"&gt;Add Search to Your Site&lt;/a&gt;）&lt;br&gt;
結果它背後用的 &lt;a href="https://github.com/pelican-plugins/tipue-search"&gt;tipue-search&lt;/a&gt; 壞掉了，搜尋功能就跟著死掉了&lt;/p&gt;
&lt;p&gt;之前有想換到 &lt;a href="https://github.com/pelican-plugins/search"&gt;pelican-search&lt;/a&gt;&lt;br&gt;
搞了好久才弄起來，但他對中文斷詞的支援很差，基本上可以當作不存在&lt;br&gt;
👉 &lt;a href="https://github.com/jameslittle230/stork/issues/191#"&gt;Search in Chinese seems to be not working#191&lt;/a&gt;&lt;br&gt;
後來還跑去玩 &lt;a href="https://lunrjs.com/"&gt;luar.js&lt;/a&gt;，也是中文支援不行&lt;br&gt;
之前原本還想寫一篇 "pelican-search does not work for Madarain."&lt;br&gt;
但一直躺在草稿夾，就躺到死掉惹&lt;br&gt;
不過也算是這篇的養分，是否也能算是某種轉生呢 🤔&lt;/p&gt;
&lt;p&gt;最近心血來潮就想再回來看 &lt;a href="https://github.com/pelican-plugins/search"&gt;pelican-search&lt;/a&gt;&lt;br&gt;
然後就找到 &lt;a href="https://github.com/pelican-plugins/search/issues/35"&gt; Consider alternatives to Stork #35 &lt;/a&gt; ...&lt;br&gt;
pelican-search 背後的 Strok 將不再維護 🥲&lt;/p&gt;
&lt;p&gt;只好回去翻翻看 &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; 中，比較有在更新的主題有沒有支援搜尋的&lt;br&gt;
還真的讓我找到 &lt;a href="https://github.com/hrw/pelican-haerwu-theme/tree/ea01213468a775dcd14e6aa5800f654af5670bc5"&gt;pelican-haerwu-theme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-theme" src="/images/posts-image/2023-pagefindui/pelican-theme.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="search" src="/images/posts-image/2023-pagefindui/search.jpg"&gt;&lt;/p&gt;
&lt;p&gt;去追一下原始碼就找到 Pagefind UI&lt;br&gt;
恩，整個故事大概就是這樣&lt;/p&gt;</content><category term="Tech"></category><category term="blog"></category></entry><entry><title>Atomic Commits: An Easy &amp; Proven Way to Manage &amp; Automate Release Process</title><link href="https://blog.wei-lee.me/posts/tech/2023/08/atomic-commits-coscup-2023" rel="alternate"></link><published>2023-08-13T11:45:00+08:00</published><updated>2023-08-13T11:45:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2023-08-13:/posts/tech/2023/08/atomic-commits-coscup-2023</id><summary type="html">&lt;p&gt;隨著 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; v3 的發佈和今年辦在日本的 PyCon APAC&lt;br&gt;
我一時被沖昏了頭&lt;br&gt;
想說反正都要參加 PyCon APAC 了&lt;br&gt;
就來投個稿，如果上了還可以上去講&lt;/p&gt;
</summary><content type="html">&lt;p&gt;隨著 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; v3 的發佈和今年辦在日本的 PyCon APAC&lt;br&gt;
我一時被沖昏了頭&lt;br&gt;
想說反正都要參加 PyCon APAC 了&lt;br&gt;
就來投個稿，如果上了還可以上去講&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;結果果然是沒上🫠&lt;br&gt;
不過認真想想跟 Python 本身的關係也不算太深就是了&lt;br&gt;
就只是這個工具是用 Python 寫的&lt;br&gt;
沒上也是很合理&lt;/p&gt;
&lt;p&gt;與此同時， PyCon TW 第一次在 COSCUP 報名了社群軌&lt;br&gt;
我被推坑去投了一篇&lt;br&gt;
反正稿件寫都寫了，那就直接拿來用吧&lt;br&gt;
（嗯... 真的是連一個字都沒改）&lt;br&gt;
還好議程組長大大不嫌棄 🙇&lt;/p&gt;
&lt;p&gt;不過真的要做起投影片還是好累啊...&lt;br&gt;
已經 2~3 年沒有上台胡說八道了&lt;br&gt;
COSCUP 的前一兩週我一直在問自己&lt;br&gt;
「啊... 我是不是太衝動了...才會投稿」&lt;br&gt;
直到前一天才勉強趕出最簡易的版本&lt;br&gt;
不過我到分享前的半小時都在修改就是了&lt;/p&gt;
&lt;p&gt;如果點進這篇文章是期待看到這次議程內容的話&lt;br&gt;
投影片如下&lt;br&gt;
這篇文章主要會是 COSCUP 2023 的簡易心得&lt;br&gt;
&lt;del&gt;抱歉把你騙進來&lt;/del&gt;&lt;/p&gt;
&lt;iframe class="speakerdeck-iframe" style="border: 0px none; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 420;" src="https://speakerdeck.com/player/d34778fbc4974eda996e73ca1d3b3a44" title="Atomic Commits - An Easy &amp;amp; Proven Way to Manage &amp;amp; Automate Release Process" allowfullscreen="true" data-ratio="1.3333333333333333" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;雖然製作簡報花時間又累，但做過程本身還是蠻好玩的&lt;br&gt;
尤其是放梗圖的部分&lt;br&gt;
如何在聽眾會睡著的地方，讓大家清醒一下是很重要的！&lt;/p&gt;
&lt;p&gt;內容的編排跟以往相似主題的分享比起來也做了很大的調整&lt;br&gt;
回到問題的源頭開始討論&lt;br&gt;
在什麼情境下會遇到，為什麼我們要在乎&lt;br&gt;
進而討論有什麼已知的方案&lt;br&gt;
最後才帶入 &lt;a href="https://github.com/commitizen-tools"&gt;commitizen-tools&lt;/a&gt; 是怎麼把這些流程串起來&lt;/p&gt;
&lt;p&gt;到了分享當天，來聽的人比想像中的多了不少&lt;br&gt;
應該跟我 2019 去 PyCon CA 的人數差不多（但我當時分享的內容應該比較有趣）&lt;br&gt;
前幾年帶 development sprint ，我已經很習慣不會有太多人來我的場子了 🥲&lt;br&gt;
不過這場分享竟然有幾年前來過 sprint 的朋友來捧場&lt;br&gt;
這幾年有堅持帶下去還是有些成果的 😭&lt;br&gt;
分享中途跟結束都有人來找我討論分享的細節&lt;br&gt;
也收到了「這是場非技術人也能聽懂的分享」的回饋&lt;br&gt;
對我來說，這已經是足夠成功的演講了 🙌&lt;/p&gt;
&lt;p&gt;可惜的是我的分享是 day 1 的最後一場&lt;br&gt;
前面的時間都在準備，沒能好好去享受 COSCUP&lt;br&gt;
原本想去逛的樂高攤位也收了 🥲&lt;br&gt;
day 2 因為太晚到，剩下的時間都在顧 PyCon TW 的攤位&lt;br&gt;
不過這兩天還是遇到了不少新朋友跟老朋友&lt;br&gt;
頗有回到大拜拜的感覺，很是令人懷念&lt;br&gt;
最大的遺憾大概就是剩下沒去抽 VLC 的大帽帽吧（？？？？？&lt;br&gt;
到結束我才知道那不是工作人員專屬，而是可以抽的&lt;/p&gt;</content><category term="Tech"></category><category term="PyCon TW"></category><category term="COSCUP"></category></entry><entry><title>Utterances - 用 GitHub Issues 當文章留言區</title><link href="https://blog.wei-lee.me/posts/tech/2022/02/use-github-issues-as-comment-system" rel="alternate"></link><published>2022-02-23T11:05:00+08:00</published><updated>2022-02-23T11:05:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2022-02-23:/posts/tech/2022/02/use-github-issues-as-comment-system</id><summary type="html">&lt;p&gt;之前看到有人用 GitHub Issues 當部落格的留言區，一直讓我想從 Disqus 搬走&lt;br&gt;
想了很久，終於在過年期間弄好了，弄起來比想像的簡單許多&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前看到有人用 GitHub Issues 當部落格的留言區，一直讓我想從 Disqus 搬走&lt;br&gt;
想了很久，終於在過年期間弄好了，弄起來比想像的簡單許多&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;除了這裡，我還有經營 &lt;a href="https://travlog.wei-lee.me/"&gt;Meet people around the world&lt;/a&gt;&lt;br&gt;
（原本想寫遊記，結果現在都在記錄料理或影評 😅）&lt;br&gt;
總之，它們都是透過 &lt;a href="https://github.com/getpelican/pelican/"&gt;pelican&lt;/a&gt; 產生的部落格&lt;br&gt;
分別使用了客製化的 &lt;a href="https://github.com/Lee-W/elegant"&gt;elegant&lt;/a&gt; 和 &lt;a href="https://github.com/Lee-W/attila"&gt;attila&lt;/a&gt; 主題&lt;/p&gt;
&lt;p&gt;目前看到要加上 GitHub Issues 最簡單的做法是使用 &lt;a href="https://utteranc.es/"&gt;utterances 🔮&lt;/a&gt;&lt;br&gt;
由於 elegant 本身就支援 utterances ，設定起來非常簡單&lt;br&gt;
而 attila 則是需要改 jinja2 template&lt;/p&gt;
&lt;p&gt;本文會聊聊怎麼在 elegant 設定 utterances&lt;br&gt;
接著看 elegant 是如何在 template 中加入 utterances，並將同樣的概念搬到 attila 上&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#elegant-utterances"&gt;如何在 elegant 設定 utterances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elegant"&gt;elegant 是怎麼做到的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utterances"&gt;如何為其他主題加入 utterances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;雜談&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="elegant-utterances"&gt;如何在 elegant 設定 utterances&lt;/h3&gt;
&lt;p&gt;根據 &lt;a href="https://elegant.oncrashreboot.com/enable-utterances-comments"&gt;Comments — Enable Utterances&lt;/a&gt; ， pelican 這端只要在 &lt;code&gt;pelicanconf.py&lt;/code&gt; 加入 &lt;code&gt;UTTERANCES_REPO&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# [username]/[repo name]&lt;/span&gt;
&lt;span class="n"&gt;UTTERANCES_REPO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Lee-W/Lee-W.github.io&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意前面不能加上 &lt;code&gt;https://github.com/&lt;/code&gt;&lt;br&gt;
我因為這個愚蠢的錯誤卡了超久......&lt;/p&gt;
&lt;p&gt;如果想為留言產生的 issue 加上特定的標籤，則可以設定 &lt;code&gt;UTTERANCES_LABEL&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;UTTERANCES_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;comment&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用的標籤本身必須要已經存在&lt;br&gt;
如果沒有的話，可以到先到 repo 的 Issues 頁面建立&lt;/p&gt;
&lt;p&gt;&lt;img alt="create-label" src="/images/posts-image/2021-use-github-issues-as-comment-system/create-label.png"&gt;&lt;/p&gt;
&lt;p&gt;下一步要為你的 GitHub 帳號安裝 &lt;a href="https://github.com/apps/utterances"&gt;utterances 的 GitHub App&lt;/a&gt;，並賦予部落格 repo 讀寫 issues 的權限&lt;/p&gt;
&lt;p&gt;&lt;img alt="utterances" src="/images/posts-image/2021-use-github-issues-as-comment-system/utterances.png"&gt;&lt;/p&gt;
&lt;p&gt;設定完成後就能在文章的最下面看到留言的區塊&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment-empty" src="/images/posts-image/2021-use-github-issues-as-comment-system/comment-empty.png"&gt;&lt;/p&gt;
&lt;p&gt;完成留言後，就會出現在 GitHub Issues 上了&lt;br&gt;
攥寫這篇文章的時候是用 localhost 測試，所以屆時裡面的連結會無效&lt;br&gt;
但實際部署到 GitHub Pages 後，它就會寫入實際的網址&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment-result" src="/images/posts-image/2021-use-github-issues-as-comment-system/comment-result.png"&gt;&lt;/p&gt;
&lt;p&gt;如果覺得用文章的 URL 當 issue 的標題很醜，可以在文章的 metadata 中加入 comment_id&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: Utterances - 用 GitHub Issues 作為文章留言區
Date: 2022-02-23 10:40
Category: Tech
Tags: Pelican, blog
Slug: use-github-issues-as-comment-system
comment_id: use-github-issues-as-comment-system
Authors: Wei Lee
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再留言一次就會產生以 &lt;code&gt;comment_id&lt;/code&gt; 為標題的 issue&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment-with-comment-id" src="/images/posts-image/2021-use-github-issues-as-comment-system/comment-with-comment-id.png"&gt;&lt;/p&gt;
&lt;p&gt;我會建議可以的話為每篇文章加上 &lt;code&gt;commend_id&lt;/code&gt;&lt;br&gt;
除了比較好看以外，也能避免換網域，評論全都不見的問題&lt;br&gt;
&lt;del&gt;但像我這種沒什麼人留言的就沒差了 😭&lt;/del&gt;&lt;/p&gt;
&lt;h2 id="elegant"&gt;elegant 是怎麼做到的？&lt;/h2&gt;
&lt;p&gt;為了能更容易在 attlia 加入 utterances，我稍微研究了 elgant 是怎麼加的&lt;br&gt;
以下的程式碼都是使用 &lt;a href="https://github.com/Pelican-Elegant/elegant/tree/V5.4.0"&gt;elegnat @ v5.4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 elegant 中全域搜尋 utterances，會先找到 &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/V5.4.0/templates/_includes/utterances_scripts.html"&gt;elegant/templates/_includes/utterances_scripts.html&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;comments_script_utterances&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://utteranc.es/client.js&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;data-repo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;repo&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;data-issue-term=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;data-label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;data-theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;theme&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這段 &lt;a href="https://jinja.palletsprojects.com/"&gt;jinja2&lt;/a&gt; macro 會產生的 JavaScript 程式碼會跟手動在 &lt;a href="https://utteranc.es/"&gt;utterances 🔮&lt;/a&gt; 產生的小有不同&lt;br&gt;
差別是在 &lt;code&gt;repo&lt;/code&gt;, &lt;code&gt;issue-term&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;theme&lt;/code&gt; 前面的 &lt;code&gt;data-&lt;/code&gt; 前綴&lt;br&gt;
不過不太會影響實際的使用&lt;br&gt;
詳細可以參考 👉&lt;a href="https://github.com/utterance/utterances/pull/334"&gt;Update index.html #334&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再來能找到 macro &lt;code&gt;comments_script_utterances&lt;/code&gt; 會在 &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/V5.4.0/templates/_includes/comments.html#L55"&gt;templates/_includes/comments.html#L55&lt;/a&gt; 被用到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use_utterances&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_includes/utterances_scripts.html&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;comments_script_utterances&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comments_script_utterances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UTTERANCES_REPO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UTTERANCES_LABEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UTTERANCES_THEME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中參數 &lt;code&gt;UTTERANCES_REPO&lt;/code&gt;, &lt;code&gt;UTTERANCES_LABEL&lt;/code&gt;, &lt;code&gt;UTTERANCES_THEME&lt;/code&gt; 都是能透過 &lt;code&gt;pelicanconf.py&lt;/code&gt; 被設定的&lt;br&gt;
而 &lt;code&gt;identifier&lt;/code&gt; 則可以往上在 &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/V5.4.0/templates/_includes/comments.html#L11"&gt;templates/_includes/comments.html#L11&lt;/a&gt; 找到&lt;br&gt;
如果沒有在文章的 metadata 加入 comment_id，則預設值是 &lt;code&gt;SITEURL + '/' + article.url&lt;/code&gt;&lt;br&gt;
（就是一開始比較醜的 issue 標題）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;article.url&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article.comment_id&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;article.comment_id&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;article.disqus_identifier&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;article.disqus_identifier&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="utterances"&gt;如何為其他主題加入 utterances&lt;/h2&gt;
&lt;p&gt;我將 attila 的改動細節記錄在 &lt;a href="https://github.com/Lee-W/attila/commit/236706851759c07d1ee0dd312eaf703293911c08"&gt;commit 236706&lt;/a&gt;&lt;br&gt;
流程大致如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;關閉或取代預設的評論系統&lt;ul&gt;
&lt;li&gt;&lt;code&gt;templates/base.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static/js/script.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加入 macro &lt;code&gt;comments_script_utterances&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;templates/partials/utterances_scripts.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 render每篇文章的 template 中使用 &lt;code&gt;comments_script_utterances&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;templates/article.html#L222&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;確保 macro 用到的參數，即使在 &lt;code&gt;peliconconf.py&lt;/code&gt; 沒有正確設定的狀況下，依然有適當的預設值&lt;ul&gt;
&lt;li&gt;&lt;code&gt;templates/partials/_defaults.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;templates/article.html#L212&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果沒興趣看的話也可以直接使用我改的 &lt;a href="https://github.com/Lee-W/attila/tree/add-utterances-support"&gt;attila @ add-utterances-support&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;雜談&lt;/h2&gt;
&lt;p&gt;雖然一直都想從 disqus 移出，但我佛系經營的部落格平常根本就不會有人留言&lt;br&gt;
尤其是 &lt;a href="https://travlog.wei-lee.me/"&gt;Meet people around the world&lt;/a&gt; 根本就不是只寫給工程師的文章，要留言還要登入 GitHub&lt;br&gt;
原本留言的動機就夠低了，現在一口氣降到冰點 📉&lt;/p&gt;
&lt;p&gt;不過往另一個方向想，反正也沒什麼人留言，我搬來 GitHub Issues 的成本根本超低 🤔&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://nijialin.com/2021/05/15/hexo-utterances-comment/"&gt; 在 Hexo 的 Next 樣板中引入 utterances 的留言區 | GitHub Issue &lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Pelican"></category><category term="blog"></category></entry><entry><title>DVC - Pipeline Versioning</title><link href="https://blog.wei-lee.me/posts/tech/2021/06/dvc-pipeline-versioning" rel="alternate"></link><published>2021-06-20T11:30:00+08:00</published><updated>2021-06-27T17:58:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2021-06-20:/posts/tech/2021/06/dvc-pipeline-versioning</id><summary type="html">&lt;p&gt;We've versioned our data in the previous post. This article will demonstrate how we could define a data pipeline and version it through DVC.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;We've versioned our data in the previous post. This article will demonstrate how we could define a data pipeline and version it through DVC.&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pipeline-versioning"&gt;Pipeline versioning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#split-training-logic-into-different-stages"&gt;Split training logic into different stages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-the-first-stage-in-our-pipeline-to-dvc"&gt;Add the first stage in our pipeline to DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#define-the-whole-pipeline"&gt;Define the whole pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-the-pipeline"&gt;Run the pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#track-parameters"&gt;Track parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#track-metrics"&gt;Track metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plotting"&gt;plotting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#one-more-thing-when-should-we-save-files-to-dvc-instead-of-git"&gt;One more thing: When should we save files to DVC instead of git?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="pipeline-versioning"&gt;Pipeline versioning&lt;/h2&gt;
&lt;p&gt;We'll continue using &lt;a href="https://github.com/Lee-W/dvc_example/"&gt;dvc_example&lt;/a&gt;. You can checkout to tag &lt;a href="https://github.com/Lee-W/dvc_example/tree/v3-remove-2-rows"&gt;v3-remove-2-rows&lt;/a&gt; to follow along.&lt;/p&gt;
&lt;h3 id="split-training-logic-into-different-stages"&gt;Split training logic into different stages&lt;/h3&gt;
&lt;p&gt;In the original design, we use &lt;code&gt;pipenv run python digit_recognizer/digit_recognizer.py&lt;/code&gt; to run the whole training process. We'll split them into &lt;code&gt;process-data&lt;/code&gt;, &lt;code&gt;train&lt;/code&gt;, and &lt;code&gt;report&lt;/code&gt; stages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;process-data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data/digit_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/digit_target.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;export_processed_data&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output/training_data.pkl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;export_processed_data&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output/testing_data.pkl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;train&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_processed_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output/training_data.pkl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;export_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output/model.pkl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;report&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_processed_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output/testing_data.pkl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output/model.pkl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;predicted_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;output_test_data_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicted_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;output_metrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicted_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can view the complete code change on &lt;a href="https://github.com/Lee-W/dvc_example/compare/v3-remove-2-rows...v4-split-pipeline-logic"&gt;v3-remove-2-rows...v4-split-pipeline-logic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After these changes, we'll use the following 3 commands to run the pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;process-data
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;train
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;report
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="add-the-first-stage-in-our-pipeline-to-dvc"&gt;Add the first stage in our pipeline to DVC&lt;/h3&gt;
&lt;p&gt;We add stages through &lt;a href="https://dvc.org/doc/command-reference/run"&gt;dvc run&lt;/a&gt; command. Let's add our first stage &lt;code&gt;process-data&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# add process-data stage&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;process-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;data/digit_data.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;data/digit_target.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/training_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/testing_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run python digit_recognizer/digit_recognizer.py process-data&amp;quot;&lt;/span&gt;

Running&lt;span class="w"&gt; &lt;/span&gt;stage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;process-data&amp;#39;&lt;/span&gt;:
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;process-data
Creating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dvc.yaml&amp;#39;&lt;/span&gt;
Adding&lt;span class="w"&gt; &lt;/span&gt;stage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;process-data&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dvc.yaml&amp;#39;&lt;/span&gt;
Generating&lt;span class="w"&gt; &lt;/span&gt;lock&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dvc.lock&amp;#39;&lt;/span&gt;
Updating&lt;span class="w"&gt; &lt;/span&gt;lock&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dvc.lock&amp;#39;&lt;/span&gt;

To&lt;span class="w"&gt; &lt;/span&gt;track&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;changes&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;git,&lt;span class="w"&gt; &lt;/span&gt;run:

git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;dvc.yaml&lt;span class="w"&gt; &lt;/span&gt;output/.gitignore&lt;span class="w"&gt; &lt;/span&gt;dvc.lock


Next,&lt;span class="w"&gt; &lt;/span&gt;we&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;these&lt;span class="w"&gt; &lt;/span&gt;DVC&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;into&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;track.

&lt;span class="c1"&gt;# add DVC configuration to git and commit&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;dvc.yaml&lt;span class="w"&gt; &lt;/span&gt;dvc.lock&lt;span class="w"&gt; &lt;/span&gt;output/.gitignore
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See what's composed of this command&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt;: the name of this stage&lt;ul&gt;
&lt;li&gt;It must be unique throughout the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: the dependencies of this stage&lt;ul&gt;
&lt;li&gt;All the files related to running this stage should be counted as dependencies.&lt;/li&gt;
&lt;li&gt;DVC won't these dependency files into it storage but only store the hashes of them.&lt;/li&gt;
&lt;li&gt;In this example, we need &lt;code&gt;digit_recognizer/digit_recognizer.py&lt;/code&gt; to load &lt;code&gt;data/digit_data.csv&lt;/code&gt; and &lt;code&gt;data/digit_target.csv&lt;/code&gt; to process the data. Thus, these 3 files are added as dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: the output files of this stage&lt;ul&gt;
&lt;li&gt;DVC stores these files in its storage. If you want to track it through git or simply don't want to track it, you can use &lt;code&gt;-O&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;dvc run&lt;/code&gt; runs the stage right after adding it. If you don't want DVC to run it, you can add &lt;code&gt;--no-exec&lt;/code&gt; flag or &lt;a href="https://dvc.org/doc/command-reference/stage/add"&gt;dvc stage add&lt;/a&gt; with the same arguments&lt;/p&gt;
&lt;p&gt;After adding a stage, DVC updates &lt;code&gt;dvc.yaml&lt;/code&gt;, &lt;code&gt;output/.gitignore&lt;/code&gt; and &lt;code&gt;dvc.lock&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;dvc.yaml&lt;/code&gt;: the definition of stages&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;process-data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run python digit_recognizer/digit_recognizer.py process-data&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;data/digit_data.csv&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;data/digit_target.csv&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;digit_recognizer/digit_recognizer.py&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;outs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/testing_data.pkl&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/training_data.pkl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DVC transforms what we defined in &lt;code&gt;dvc run&lt;/code&gt; to a human-readable format and store it. But if you already know how to define the stage, you can edit &lt;code&gt;dvc.yaml&lt;/code&gt; directly. In addition, there're advanced techniques like &lt;a href="https://dvc.org/doc/user-guide/project-structure/pipelines-files#templating"&gt;Templating&lt;/a&gt; and &lt;a href="https://dvc.org/doc/user-guide/project-structure/pipelines-files#foreach-stages"&gt;foreach stages&lt;/a&gt; that can help us define complicated stages.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;dvc.lock&lt;/code&gt;: the hashes of dependencies and outputs&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2.0&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;process-data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run python digit_recognizer/digit_recognizer.py process-data&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;data/digit_data.csv&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;942481fce846fb9750b7b8023c80a5ef&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;490582&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;data/digit_target.csv&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2a6cfa13365ac9b3af5146133aca6789&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3590&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;digit_recognizer/digit_recognizer.py&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;65ecf27479538a74ade42462b1566db1&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3629&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;outs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/testing_data.pkl&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;78be1761d227f71b1a8f858fed766982&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;529016&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/training_data.pkl&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;f95e8f978a05395ba23479ff60eda076&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;528427&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DVC uses these hashes to know whether there's any modification on our stages. Therefore, we only add deterministic files. Randomness might make this lock file meaningless. Take a look at the "Avoiding unexpected behavior" in &lt;a href="https://dvc.org/doc/command-reference/run#description"&gt;dvc run - Description&lt;/a&gt; could save your time debugging unexpected failure.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;output/.gitignore&lt;/code&gt;: Add files that DVC should track to gitignore&lt;/h4&gt;
&lt;h3 id="define-the-whole-pipeline"&gt;Define the whole pipeline&lt;/h3&gt;
&lt;p&gt;With similar command, we can add &lt;code&gt;train&lt;/code&gt; and &lt;code&gt;report&lt;/code&gt; stages to our pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# add train stage&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;train&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/training_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/model.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run python digit_recognizer/digit_recognizer.py train&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# add report stage&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;report&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/testing_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/model.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/metrics.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run python digit_recognizer/digit_recognizer.py report&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# add DVC configuration to git and commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;dvc.yaml&lt;span class="w"&gt; &lt;/span&gt;dvc.lock&lt;span class="w"&gt; &lt;/span&gt;model/.gitignore
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar to our previous step, DVC updates &lt;code&gt;dvc.yaml&lt;/code&gt;, &lt;code&gt;dvc.lock&lt;/code&gt; and &lt;code&gt;output/.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ cat dvc.yaml&lt;/span&gt;

&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;train&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run python digit_recognizer/digit_recognizer.py train&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;digit_recognizer/digit_recognizer.py&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/training_data.pkl&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;outs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/model.pkl&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;report&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run python digit_recognizer/digit_recognizer.py report&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;digit_recognizer/digit_recognizer.py&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/model.pkl&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/testing_data.pkl&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;outs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/metrics.json&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output/test_data_results.csv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can visualize the pipeline through &lt;a href="https://dvc.org/doc/command-reference/dag"&gt;dvc dag&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;dag

&lt;span class="w"&gt;    &lt;/span&gt;+----------+
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;data.dvc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;+----------+
&lt;span class="w"&gt;          &lt;/span&gt;*
&lt;span class="w"&gt;          &lt;/span&gt;*
&lt;span class="w"&gt;          &lt;/span&gt;*
&lt;span class="w"&gt;  &lt;/span&gt;+--------------+
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;process-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;+--------------+
&lt;span class="w"&gt;     &lt;/span&gt;**&lt;span class="w"&gt;        &lt;/span&gt;**
&lt;span class="w"&gt;   &lt;/span&gt;**&lt;span class="w"&gt;            &lt;/span&gt;*
&lt;span class="w"&gt;  &lt;/span&gt;*&lt;span class="w"&gt;               &lt;/span&gt;**
+-------+&lt;span class="w"&gt;           &lt;/span&gt;*
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;train&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;**
+-------+&lt;span class="w"&gt;        &lt;/span&gt;*
&lt;span class="w"&gt;     &lt;/span&gt;**&lt;span class="w"&gt;        &lt;/span&gt;**
&lt;span class="w"&gt;       &lt;/span&gt;**&lt;span class="w"&gt;    &lt;/span&gt;**
&lt;span class="w"&gt;         &lt;/span&gt;*&lt;span class="w"&gt;  &lt;/span&gt;*
&lt;span class="w"&gt;     &lt;/span&gt;+--------+
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;report&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;+--------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you pay attention to each parameter passes to &lt;code&gt;dvc run&lt;/code&gt;, you might have noticed that &lt;code&gt;train&lt;/code&gt; stage depends on the output &lt;code&gt;output/training_data.pkl&lt;/code&gt; from &lt;code&gt;process-data&lt;/code&gt; stage. This is how DVC decides the order of each stage in our pipeline.&lt;/p&gt;
&lt;h3 id="run-the-pipeline"&gt;Run the pipeline&lt;/h3&gt;
&lt;p&gt;Contradict to its naming, &lt;code&gt;dvc run&lt;/code&gt; is only used for defining the stage and run it for the first time. &lt;a href="https://dvc.org/doc/command-reference/repro#repro"&gt;dvc repro&lt;/a&gt; (reproduce) is what we use to run the pipeline,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;repro

&lt;span class="s1"&gt;&amp;#39;data.dvc&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;didn&lt;span class="s1"&gt;&amp;#39;t change, skipping&lt;/span&gt;
&lt;span class="s1"&gt;Stage &amp;#39;&lt;/span&gt;train&lt;span class="s1"&gt;&amp;#39; didn&amp;#39;&lt;/span&gt;t&lt;span class="w"&gt; &lt;/span&gt;change,&lt;span class="w"&gt; &lt;/span&gt;skipping
Data&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;pipelines&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;date.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because we've not yet made any changes since we define our pipeline, DVC won't waste time and resources to generate results it has already known. However, you can add a &lt;code&gt;-f&lt;/code&gt; flag to force DVC to rerun the pipeline.&lt;/p&gt;
&lt;p&gt;Next, we'll change gamma to 0.01 to see how &lt;code&gt;dvc repro&lt;/code&gt; works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;train_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;clf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SVC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because our dependency &lt;code&gt;digit_recognizer/digit_recognizer.py&lt;/code&gt; has been modified, DVC expects the result might be different. Therefore, we can now run &lt;code&gt;dvc repro&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;repro

&lt;span class="s1"&gt;&amp;#39;data.dvc&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;didn&lt;span class="s1"&gt;&amp;#39;t change, skipping&lt;/span&gt;
&lt;span class="s1"&gt;Running stage &amp;#39;&lt;/span&gt;process-data&lt;span class="s1"&gt;&amp;#39;:&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt; pipenv run python digit_recognizer/digit_recognizer.py process-data&lt;/span&gt;
&lt;span class="s1"&gt;Updating lock file &amp;#39;&lt;/span&gt;dvc.lock&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;Running stage &amp;#39;&lt;/span&gt;train&lt;span class="s1"&gt;&amp;#39;:&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt; pipenv run python digit_recognizer/digit_recognizer.py train&lt;/span&gt;
&lt;span class="s1"&gt;Updating lock file &amp;#39;&lt;/span&gt;dvc.lock&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;Running stage &amp;#39;&lt;/span&gt;report&lt;span class="s1"&gt;&amp;#39;:&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt; pipenv run python digit_recognizer/digit_recognizer.py report&lt;/span&gt;
&lt;span class="s1"&gt;Updating lock file &amp;#39;&lt;/span&gt;dvc.lock&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

To&lt;span class="w"&gt; &lt;/span&gt;track&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;changes&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;git,&lt;span class="w"&gt; &lt;/span&gt;run:

git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;dvc.lock
Use&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;send&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;updates&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;storage.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By running &lt;code&gt;git diff&lt;/code&gt;, you'll find out that the hashes of &lt;code&gt;digit_recognizer/digit_recognizer.py&lt;/code&gt;, &lt;code&gt;output/model.pkl&lt;/code&gt;, &lt;code&gt;output/metrics.json&lt;/code&gt;, &lt;code&gt;output/test_data_results.csv&lt;/code&gt; inside &lt;code&gt;dvc.lock&lt;/code&gt; has been changed.&lt;/p&gt;
&lt;h3 id="track-parameters"&gt;Track parameters&lt;/h3&gt;
&lt;p&gt;In the previous section, even though we change only the parameter related to the &lt;code&gt;train&lt;/code&gt; stage, DVC still reruns the whole pipeline. To make DVC runs only the stages affect by the changed parameters, we can refactor our code to load parameters from a separate file &lt;code&gt;params.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;params.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data/digit_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/digit_target.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;process_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;train&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;export_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is how &lt;code&gt;params.yaml&lt;/code&gt; looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;test_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.5&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
&lt;span class="nt"&gt;train&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.01&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full code changes can be found on &lt;a href="https://github.com/Lee-W/dvc_example/tree/v5-parameters-in-separate-file"&gt;v5-parameters-in-separate-file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To add parameters to a stage, we'll need to run the previous &lt;code&gt;dvc run&lt;/code&gt; command again with &lt;code&gt;-f&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; flag.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;: overwrite the stage with the same name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: parameters&lt;ul&gt;
&lt;li&gt;Use "," to separate parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Add parameters process_data.test_size and process_data.shuffle to process-data stage&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;process-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;data/digit_data.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;data/digit_target.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/training_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/testing_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;process_data.test_size,process_data.shuffle&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run python digit_recognizer/digit_recognizer.py process-data&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Add parameters train.gamma to train stage&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;train&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/training_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/model.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;train.gamma&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run python digit_recognizer/digit_recognizer.py train&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;

&lt;span class="c1"&gt;# add DVC configuration to git and commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;dvc.yaml&lt;span class="w"&gt; &lt;/span&gt;dvc.lock&lt;span class="w"&gt; &lt;/span&gt;model/.gitignore
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DVC adds &lt;code&gt;params&lt;/code&gt; key to both &lt;code&gt;process-data&lt;/code&gt; and &lt;code&gt;train&lt;/code&gt; stages in &lt;code&gt;dvc.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stages:
&lt;span class="w"&gt;  &lt;/span&gt;process-data:
&lt;span class="w"&gt;    &lt;/span&gt;......
&lt;span class="w"&gt;    &lt;/span&gt;params:
&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;process_data.shuffle
&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;process_data.test_size
&lt;span class="w"&gt;  &lt;/span&gt;train:
&lt;span class="w"&gt;      &lt;/span&gt;......
&lt;span class="w"&gt;    &lt;/span&gt;params:
&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;train.gamma
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;params.yaml&lt;/code&gt; is the default parameter file name, but DVC also supports YAML, JSON, TOML, and &lt;a href="https://dvc.org/doc/command-reference/params#examples-python-parameters-file"&gt;Python files&lt;/a&gt;. We only need to add the file name as an additional layer to &lt;code&gt;params&lt;/code&gt; to use it. e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# this is an example of using different parameter file name&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# we don&amp;#39;t need to make changes to our code&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;train&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;......&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;params&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="w w-Error"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;params.json&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- train.gamma&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's change gamma to 0.1. We can check this change through &lt;a href="https://dvc.org/doc/command-reference/params/diff"&gt;dvc params diff&lt;/a&gt;. By providing git reference, we can even see parameters difference between different git commits. (e.g., &lt;code&gt;dvc params diff HEAD~1&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;params&lt;span class="w"&gt; &lt;/span&gt;diff

Path&lt;span class="w"&gt;     &lt;/span&gt;Param&lt;span class="w"&gt;        &lt;/span&gt;Old&lt;span class="w"&gt;    &lt;/span&gt;New
params.yaml&lt;span class="w"&gt;  &lt;/span&gt;train.gamma&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we run &lt;code&gt;dvc repro&lt;/code&gt; now, DVC reruns only &lt;code&gt;train&lt;/code&gt; and &lt;code&gt;report&lt;/code&gt; stages. &lt;code&gt;train&lt;/code&gt; stage is affected by &lt;code&gt;train.gamma&lt;/code&gt; change. Due to this change, the output file from the &lt;code&gt;train&lt;/code&gt; stage has been updated. Thus, DVC reruns &lt;code&gt;report&lt;/code&gt; stages as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;repro

&lt;span class="s1"&gt;&amp;#39;data.dvc&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;didn&lt;span class="s1"&gt;&amp;#39;t change, skipping&lt;/span&gt;
&lt;span class="s1"&gt;Stage &amp;#39;&lt;/span&gt;process-data&lt;span class="s1"&gt;&amp;#39; didn&amp;#39;&lt;/span&gt;t&lt;span class="w"&gt; &lt;/span&gt;change,&lt;span class="w"&gt; &lt;/span&gt;skipping
Running&lt;span class="w"&gt; &lt;/span&gt;stage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;train&amp;#39;&lt;/span&gt;:
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;train
Updating&lt;span class="w"&gt; &lt;/span&gt;lock&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dvc.lock&amp;#39;&lt;/span&gt;

Running&lt;span class="w"&gt; &lt;/span&gt;stage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;report&amp;#39;&lt;/span&gt;:
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;report
Updating&lt;span class="w"&gt; &lt;/span&gt;lock&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dvc.lock&amp;#39;&lt;/span&gt;

To&lt;span class="w"&gt; &lt;/span&gt;track&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;changes&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;git,&lt;span class="w"&gt; &lt;/span&gt;run:

&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;dvc.lock
Use&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;send&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;updates&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;storage.

&lt;span class="c1"&gt;# reset gamma back to 0.01&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;dvc.lock&lt;span class="w"&gt; &lt;/span&gt;params.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We're not going to store this parameter change. Run &lt;code&gt;git checkout out params.yaml dvc.lock&lt;/code&gt; to restore the previous state.&lt;/p&gt;
&lt;h3 id="track-metrics"&gt;Track metrics&lt;/h3&gt;
&lt;p&gt;We now know how to track parameters. Next, we'll see how changing these parameters affect the performance of our models. You may have already noticed that we've outputted a &lt;code&gt;output/metrics.json&lt;/code&gt; file. Although we could track it as the output file, DVC has better support for metrics files.&lt;/p&gt;
&lt;p&gt;Like adding parameters, we add &lt;code&gt;-m&lt;/code&gt; flag for DVC to recognize the output as metrics. Instead of using &lt;code&gt;-M&lt;/code&gt; as the official tutorial did, I use &lt;code&gt;-m&lt;/code&gt; because I prefer tracking metrics through DVC remote storage instead of saving it to git as part of our source code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Add output/metrics.json as metrics to report stage&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;report&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/testing_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/model.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;output/metrics.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run python digit_recognizer/digit_recognizer.py report&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# add DVC configuration to git and commit&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;dvc.yaml&lt;span class="w"&gt; &lt;/span&gt;dvc.lock&lt;span class="w"&gt; &lt;/span&gt;model/.gitignore
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;commit

&lt;span class="c1"&gt;# metrics have been added to the report stage as expected&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;dvc.yaml

...
&lt;span class="w"&gt;  &lt;/span&gt;report:
&lt;span class="w"&gt;    &lt;/span&gt;......
&lt;span class="w"&gt;    &lt;/span&gt;metrics:
&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;metrics.json:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use &lt;a href="https://dvc.org/doc/command-reference/metrics/show"&gt;dvc metrics show&lt;/a&gt; to see how well our model performs&lt;br&gt;
Note that values are not calculated through DVC. DVC only provides a way to display values in file organized as tree hierarchies and compare them throughout different git commits.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;metrics&lt;span class="w"&gt; &lt;/span&gt;show

Path&lt;span class="w"&gt;             &lt;/span&gt;accuracy_score&lt;span class="w"&gt;    &lt;/span&gt;weighted_f1_score&lt;span class="w"&gt;    &lt;/span&gt;weighted_precision&lt;span class="w"&gt;    &lt;/span&gt;weighted_recall
output/metrics.json&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.69265&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.74567&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.91941&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.69265
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change gamma to 0.1 again and use &lt;a href="https://dvc.org/doc/command-reference/metrics/diff"&gt;dvc metrics diff&lt;/a&gt; to see if model performance is improved after this change.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# reruns the pipeline with new parameters&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;repro

&lt;span class="c1"&gt;# check metrics differences between unstaged and HEAD&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;metrics&lt;span class="w"&gt; &lt;/span&gt;diff

Path&lt;span class="w"&gt;             &lt;/span&gt;Metric&lt;span class="w"&gt;              &lt;/span&gt;Old&lt;span class="w"&gt;      &lt;/span&gt;New&lt;span class="w"&gt;      &lt;/span&gt;Change
output/metrics.json&lt;span class="w"&gt;  &lt;/span&gt;accuracy_score&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.69265&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10134&lt;span class="w"&gt;  &lt;/span&gt;-0.59131
output/metrics.json&lt;span class="w"&gt;  &lt;/span&gt;weighted_f1_score&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.74567&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01865&lt;span class="w"&gt;  &lt;/span&gt;-0.72702
output/metrics.json&lt;span class="w"&gt;  &lt;/span&gt;weighted_precision&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.91941&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01027&lt;span class="w"&gt;  &lt;/span&gt;-0.90914
output/metrics.json&lt;span class="w"&gt;  &lt;/span&gt;weighted_recall&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.69265&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10134&lt;span class="w"&gt;  &lt;/span&gt;-0.59131

&lt;span class="c1"&gt;# reset gamma back to 0.01&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;dvc.lock&lt;span class="w"&gt; &lt;/span&gt;params.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We don't need this change either. Reset gamma back to 0.01 through &lt;code&gt;git checkout&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="plotting"&gt;plotting&lt;/h3&gt;
&lt;p&gt;There's only one left output &lt;code&gt;output/test_data_results.csv&lt;/code&gt; that has not yet been used. This file stores the ground truth and the predicted result from our model. We're going to use it to see how DVC plots our data. Before plotting, let's change gamma to 0.001 first and run &lt;code&gt;dvc repro&lt;/code&gt;. Otherwise, the output plot will look a bit odd due to the low model performance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv

actual,predicted
&lt;span class="m"&gt;4&lt;/span&gt;.0,4.0
&lt;span class="m"&gt;8&lt;/span&gt;.0,8.0
......
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add &lt;code&gt;--plots&lt;/code&gt; flag and specify &lt;code&gt;output/test_data_results.csv&lt;/code&gt; as the file to plot&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# add output/test_data_results.csv as the file to plot to report stage&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;report&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer/digit_recognizer.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/testing_data.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/model.pkl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;output/metrics.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;--plots&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run python digit_recognizer/digit_recognizer.py report&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# plots have been added to dvc.yaml&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;dvc.yaml
&lt;span class="w"&gt;  &lt;/span&gt;......
&lt;span class="w"&gt;  &lt;/span&gt;plots:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DVC generates plots through &lt;a href="https://vega.github.io/vega/"&gt;Vega&lt;/a&gt;, a declarative grammar that can define interactive graph in JSON format. It supports linear plot, scatter plot, and confusion matrix by default. These templates are stored in &lt;code&gt;.dvc/plots&lt;/code&gt;. We can also define our plots. (Read&lt;br&gt;
&lt;a href="https://dvc.org/doc/command-reference/plots#custom-templates"&gt;dvc plots - Custom templates&lt;/a&gt; to find out more)&lt;/p&gt;
&lt;p&gt;In the following example, we'll plot a confusion matrix through &lt;a href="https://dvc.org/doc/command-reference/plots/show"&gt;dvc plots show&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;plots&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv&lt;span class="w"&gt; &lt;/span&gt;--template&lt;span class="w"&gt; &lt;/span&gt;confusion&lt;span class="w"&gt; &lt;/span&gt;-x&lt;span class="w"&gt; &lt;/span&gt;actual&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;predicted&lt;span class="w"&gt; &lt;/span&gt;--out&lt;span class="w"&gt; &lt;/span&gt;confusion_matrix.html

file:///....../confusion_matrix.html
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--template&lt;/code&gt;: name of the plot template&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt;: field name of the data for the X-axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-y&lt;/code&gt;: field name of the data for the y axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--out&lt;/code&gt;: output file name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following is a screenshot of the generated plot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="confusion-matrix" src="/images/posts-image/2021-dvc/confusion-matrix.jpg"&gt;&lt;/p&gt;
&lt;p&gt;As of now, DVC does not track our plot (i.e. &lt;code&gt;confusion-matrix.jpg&lt;/code&gt;) but only our data to plot (i.e., &lt;code&gt;output/test_data_results.csv&lt;/code&gt;). Let's add &lt;code&gt;plot&lt;/code&gt; as the final stage of our pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Add stage plot&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;plot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;output/test_data_results.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;confusion_matrix.html&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv run dvc plots show output/test_data_results.csv --template confusion -x actual -y predicted --out confusion_matrix.html&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we create a data pipeline that process data, train the model, generate the report and visualize it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;dag

&lt;span class="w"&gt;       &lt;/span&gt;+----------+
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;data.dvc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;+----------+
&lt;span class="w"&gt;             &lt;/span&gt;*
&lt;span class="w"&gt;             &lt;/span&gt;*
&lt;span class="w"&gt;             &lt;/span&gt;*
&lt;span class="w"&gt;     &lt;/span&gt;+--------------+
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;process-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;+--------------+
&lt;span class="w"&gt;         &lt;/span&gt;*&lt;span class="w"&gt;        &lt;/span&gt;*
&lt;span class="w"&gt;       &lt;/span&gt;**&lt;span class="w"&gt;          &lt;/span&gt;*
&lt;span class="w"&gt;      &lt;/span&gt;*&lt;span class="w"&gt;             &lt;/span&gt;**
+-------+&lt;span class="w"&gt;             &lt;/span&gt;*
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;train&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;**
+-------+&lt;span class="w"&gt;          &lt;/span&gt;*
&lt;span class="w"&gt;         &lt;/span&gt;*&lt;span class="w"&gt;        &lt;/span&gt;*
&lt;span class="w"&gt;          &lt;/span&gt;**&lt;span class="w"&gt;    &lt;/span&gt;**
&lt;span class="w"&gt;            &lt;/span&gt;*&lt;span class="w"&gt;  &lt;/span&gt;*
&lt;span class="w"&gt;        &lt;/span&gt;+--------+
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;report&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;+--------+
&lt;span class="w"&gt;             &lt;/span&gt;*
&lt;span class="w"&gt;             &lt;/span&gt;*
&lt;span class="w"&gt;             &lt;/span&gt;*
&lt;span class="w"&gt;         &lt;/span&gt;+------+
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;plot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;+------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also see how to use DVC to track each component and provide an easy way to run the pipeline. In the following article, we will discuss how to run experiments with different parameters and compare the results in an even more convenient way.&lt;/p&gt;
&lt;h2 id="one-more-thing-when-should-we-save-files-to-dvc-instead-of-git"&gt;One more thing: When should we save files to DVC instead of git?&lt;/h2&gt;
&lt;p&gt;Short answer: It depends.&lt;/p&gt;
&lt;p&gt;When defining pipeline we can decide whether to save our outputs (&lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;-O&lt;/code&gt;), metrics (&lt;code&gt;-m&lt;/code&gt; / &lt;code&gt;-M&lt;/code&gt;) and plots (&lt;code&gt;--plots&lt;/code&gt; / &lt;code&gt;--plots-no-cache&lt;/code&gt;) to DVC storage. DVC document suggests not storing metrics and plots to DVC as they are typically small enough for git to track. But I'd prefer storing only thing relates to our logic to git. That's why I use &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;--plots&lt;/code&gt; in the examples. If you don't want to track these, you could just pass &lt;code&gt;-O&lt;/code&gt;, &lt;code&gt;-M&lt;/code&gt;, or &lt;code&gt;--plots-no-cache&lt;/code&gt; and add them to both &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;.dvcignore&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dvc.org/"&gt;DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stanford-cs329s.github.io/syllabus.html"&gt;CS 329S: Machine Learning Systems Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Data"></category><category term="Version Control"></category><category term="DVC"></category></entry><entry><title>DVC - Data Versioning</title><link href="https://blog.wei-lee.me/posts/tech/2021/06/dvc-data-versioning" rel="alternate"></link><published>2021-06-14T15:18:00+08:00</published><updated>2021-06-14T15:18:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2021-06-14:/posts/tech/2021/06/dvc-data-versioning</id><summary type="html">&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-dvc-data-version-control"&gt;About DVC (Data Version Control)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use-dvc"&gt;How to use DVC?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-dvc-globally"&gt;Install DVC globally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#take-a-look-at-the-example-project"&gt;Take a look at the example project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-dvc-into-the-virtual-environment"&gt;Install DVC into the virtual environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initialize-dvc"&gt;Initialize DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-dvc-remote"&gt;Add DVC remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#track-data-through-dvc"&gt;Track data through DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetch-data-from-dvc-remote-storage"&gt;Fetch data from DVC remote storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-data-changes-into-dvc"&gt;Add data changes into DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetch-code-and-data-changes-from-remote"&gt;Fetch code and data changes …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-dvc-data-version-control"&gt;About DVC (Data Version Control)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use-dvc"&gt;How to use DVC?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-dvc-globally"&gt;Install DVC globally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#take-a-look-at-the-example-project"&gt;Take a look at the example project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-dvc-into-the-virtual-environment"&gt;Install DVC into the virtual environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initialize-dvc"&gt;Initialize DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-dvc-remote"&gt;Add DVC remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#track-data-through-dvc"&gt;Track data through DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetch-data-from-dvc-remote-storage"&gt;Fetch data from DVC remote storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-data-changes-into-dvc"&gt;Add data changes into DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetch-code-and-data-changes-from-remote"&gt;Fetch code and data changes from remote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="about-dvc-data-version-control"&gt;About DVC (Data Version Control)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What's DVC?&lt;ul&gt;
&lt;li&gt;version control system for data science and machine learning&lt;/li&gt;
&lt;li&gt;compatible with git (it's based on git)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What can DVC do?&lt;ul&gt;
&lt;li&gt;track&lt;ul&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;model&lt;/li&gt;
&lt;li&gt;pipeline&lt;/li&gt;
&lt;li&gt;metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use storage directly&lt;/li&gt;
&lt;li&gt;no external services needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Who are the targeted users of DVC?&lt;ul&gt;
&lt;li&gt;ML research / engineer&lt;/li&gt;
&lt;li&gt;DevOps &amp;amp; Engineers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why DVC?&lt;ul&gt;
&lt;li&gt;It links your data, model, and pipelines with your metrics.&lt;ul&gt;
&lt;li&gt;reproducibility&lt;/li&gt;
&lt;li&gt;trackable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read &lt;a href="https://dvc.org/doc/use-cases/versioning-data-and-model-files"&gt;DVC - Versioning Data and Models&lt;/a&gt; for more use cases&lt;/p&gt;
&lt;h2 id="how-to-use-dvc"&gt;How to use DVC?&lt;/h2&gt;
&lt;h3 id="install-dvc-globally"&gt;Install DVC globally&lt;/h3&gt;
&lt;p&gt;I suggest using &lt;a href="https://pypa.github.io/pipx/"&gt;pipx&lt;/a&gt; if you're to install DVC globally. However, an even better way is to install it inside the virtual environment within your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pipx
$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;dvc
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;--version

&lt;span class="m"&gt;2&lt;/span&gt;.3.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DVC also provides &lt;a href="https://dvc.org/doc/install/completion"&gt;Shell Completion&lt;/a&gt; and &lt;a href="https://dvc.org/doc/install/plugins"&gt;Syntax Highlighting Plugins&lt;/a&gt; for popular editors.&lt;/p&gt;
&lt;h3 id="take-a-look-at-the-example-project"&gt;Take a look at the example project&lt;/h3&gt;
&lt;p&gt;I'll use &lt;a href="https://github.com/Lee-W/dvc_example/"&gt;dvc_example&lt;/a&gt; to demonstrate how I applied DVC to an existing machine learning project. The example is based on &lt;a href="https://scikit-learn.org/0.24/auto_examples/classification/plot_digits_classification.html"&gt;Recognizing hand-written digits&lt;/a&gt; from scikit-learn documentation. All the DVC parts start from &lt;a href="https://github.com/Lee-W/dvc_example/tree/v1-base"&gt;v1-base&lt;/a&gt;. You can &lt;code&gt;git checkout&lt;/code&gt; to the tag to follow along.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/Lee-W/dvc_example/&lt;span class="w"&gt; &lt;/span&gt;--branch&lt;span class="w"&gt; &lt;/span&gt;v1-base
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dvc_example
$&lt;span class="w"&gt; &lt;/span&gt;tree
.
├──&lt;span class="w"&gt; &lt;/span&gt;LICENSE
├──&lt;span class="w"&gt; &lt;/span&gt;Pipfile
├──&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock
├──&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer.py
├──&lt;span class="w"&gt; &lt;/span&gt;docs
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;README.md
├──&lt;span class="w"&gt; &lt;/span&gt;mkdocs.yml
├──&lt;span class="w"&gt; &lt;/span&gt;output
└──&lt;span class="w"&gt; &lt;/span&gt;tasks.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To set up the development environment, you'll need &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv&lt;/a&gt; and &lt;a href="https://www.pyinvoke.org/"&gt;invoke&lt;/a&gt;. If you run into an error when running &lt;code&gt;pipenv install&lt;/code&gt;, you can run &lt;code&gt;export SYSTEM_VERSION_COMPAT=1&lt;/code&gt; before it. It's an open issue (&lt;a href="https://github.com/pypa/pipenv/issues/4564#issuecomment-756625303"&gt;Issue with NumPy, macOS 11 Big Sur, Python 3.9.1 Does pipenv not use the latest pip? #4564&lt;/a&gt;) of pipenv as of now. Or, you can just run the following commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install needed tools&lt;/span&gt;
pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;invoke

&lt;span class="c1"&gt;# set up environments&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;init-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll use &lt;a href="https://github.com/Lee-W/dvc_example/blob/v1-base/digit_recognizer/digit_recognizer.py"&gt;digit_recognizer/digit_recognizer.py&lt;/a&gt; for training a model that can recognize handwritten digits.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;predicted_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicted_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_metrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicted_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="install-dvc-into-the-virtual-environment"&gt;Install DVC into the virtual environment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;dvc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're to save data to remote storage, you might need to install extra dependencies.&lt;br&gt;
(e.g., &lt;code&gt;pipenv install dvc[s3]&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supported types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[s3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[azure]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[gdrive]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[gs]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[oss]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ssh]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or, use &lt;code&gt;pipenv install dvc[all]&lt;/code&gt; to install them all&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://dvc.org/doc/command-reference/remote"&gt;dvc remote&lt;/a&gt; for more information&lt;/p&gt;
&lt;h3 id="initialize-dvc"&gt;Initialize DVC&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# initialize DVC configurations&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;init

&lt;span class="c1"&gt;# see what&amp;#39;s created by DVC&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;.dvc

.dvc
├──&lt;span class="w"&gt; &lt;/span&gt;config
└──&lt;span class="w"&gt; &lt;/span&gt;plots
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;confusion.json
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;confusion_normalized.json
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;default.json
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;linear.json
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;scatter.json
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;smooth.json

&lt;span class="c1"&gt;# track DVC configuration through git&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.dvc

&lt;span class="c1"&gt;# git commit&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;commit
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="add-dvc-remote"&gt;Add DVC remote&lt;/h3&gt;
&lt;p&gt;I'll use another local directory &lt;code&gt;../dvc_remote&lt;/code&gt; as our remote storage. You can change it to s3 or other remote storage.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;../dvc_remote
dvc&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;--default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;../dvc_remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Through &lt;code&gt;--default&lt;/code&gt; flag, we can push/pull from &lt;code&gt;local&lt;/code&gt; remote without specifying remote name.&lt;/p&gt;
&lt;p&gt;Let see what's changed in &lt;code&gt;.dvc/config&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;$ cat .dvc/config&lt;/span&gt;

&lt;span class="k"&gt;[core]&lt;/span&gt;
&lt;span class="na"&gt;remote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;local&lt;/span&gt;
&lt;span class="k"&gt;[&amp;#39;remote &amp;quot;local&amp;quot;&amp;#39;]&lt;/span&gt;
&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;../../dvc_remote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The url is &lt;code&gt;../../dvc_remote&lt;/code&gt; instead of &lt;code&gt;../dvc_remote&lt;/code&gt; because it's the relative path to &lt;code&gt;.dvc&lt;/code&gt;. As we've not yet push anything to our pseudo remote, &lt;code&gt;../dvc_remote&lt;/code&gt; is still empty.&lt;/p&gt;
&lt;h3 id="track-data-through-dvc"&gt;Track data through DVC&lt;/h3&gt;
&lt;p&gt;By this time, the data is loaded through &lt;a href="https://scikit-learn.org/0.24/modules/generated/sklearn.datasets.load_digits.html"&gt;sklearn.datasets.load_digits&lt;/a&gt;. We're going to change it to read from static file in &lt;code&gt;data/&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Load data&lt;/span&gt;
    &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_digits&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can use the following script to output the digit data into &lt;code&gt;data/&lt;/code&gt;. Note that it's a one-time use script. We won't add it into git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_digits&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data/digit_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data/digit_target.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll need to make changes to &lt;code&gt;load_data&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; functions to read data from these files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quoting&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QUOTE_NONNUMERIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quoting&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QUOTE_NONNUMERIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data/digit_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/digit_target.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run &lt;code&gt;pipenv run python digit_recognizer/digit_recognizer.py&lt;/code&gt; to check whether everything works as we expected. If so, add these code changes into git.&lt;/p&gt;
&lt;p&gt;Next, add &lt;code&gt;data/&lt;/code&gt; to DVC.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;data

&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;Add&lt;span class="p"&gt;|&lt;/span&gt;████████████████&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00,&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.14file/s&lt;span class="o"&gt;]&lt;/span&gt;

To&lt;span class="w"&gt; &lt;/span&gt;track&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;changes&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;git,&lt;span class="w"&gt; &lt;/span&gt;run:

git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;data.dvc&lt;span class="w"&gt; &lt;/span&gt;.gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dvc add&lt;/code&gt; creates a &lt;code&gt;data.dvc&lt;/code&gt; file to track &lt;code&gt;data/&lt;/code&gt; and add it into &lt;code&gt;.gitignore&lt;/code&gt; so that &lt;code&gt;data/&lt;/code&gt; will only be tracked through DVC but not git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Add DVC files into git track&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.gitignore&lt;span class="w"&gt; &lt;/span&gt;data.dvc

&lt;span class="c1"&gt;# git commit&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;data.dvc&lt;/code&gt;, we can see 2 files (&lt;code&gt;digit_data.csv&lt;/code&gt; and &lt;code&gt;digit_target.csv&lt;/code&gt;) are tracked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;data.dvc

outs:
-&lt;span class="w"&gt; &lt;/span&gt;md5:&lt;span class="w"&gt; &lt;/span&gt;b8d81f4964ecb86739c79c833fb491f3.dir
&lt;span class="w"&gt;  &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;494728&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;nfiles:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;path:&lt;span class="w"&gt; &lt;/span&gt;data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Push these tracked data into DVC remote&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See what's changed in our repo storage &lt;code&gt;../dvc_remote&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;../dvc_remote

../dvc_remote
├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;b861b6dc8e08da6d66547860f69277
├──&lt;span class="w"&gt; &lt;/span&gt;8c
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;ba569595920d230ade453b150f372b
└──&lt;span class="w"&gt; &lt;/span&gt;b8
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;d81f4964ecb86739c79c833fb491f3.dir

&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The md5 value of our tracked data is &lt;code&gt;b8d81f4964ecb86739c79c833fb491f3.dir&lt;/code&gt;. There's also a corresponding file in &lt;code&gt;../dvc_remote/b8/d81f4964ecb86739c79c833fb491f3.dir&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;../dvc_remote/b8/d81f4964ecb86739c79c833fb491f3.dir

&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;md5&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;02b861b6dc8e08da6d66547860f69277&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;relpath&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;digit_data.csv&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;md5&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8cba569595920d230ade453b150f372b&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;relpath&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;digit_target.csv&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This file indicates where the actual data sources are stored in &lt;code&gt;../dvc_remote&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In conclusion, if we want to know how data is stored through DVC,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;find the md5 value in &lt;code&gt;*.dvc&lt;/code&gt; in our project&lt;/li&gt;
&lt;li&gt;find the path that matches this md5 value in our remote storage&lt;/li&gt;
&lt;li&gt;use the md5 value specified in the previous step to find the data sources in our remote storage&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But most of the time, we don't need to do so. We can leave the tracking work to DVC.&lt;/p&gt;
&lt;h3 id="fetch-data-from-dvc-remote-storage"&gt;Fetch data from DVC remote storage&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# temporary delete our data locally&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;data

&lt;span class="c1"&gt;# check whether DVC actually tracks our data&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;status

data.dvc:
changed&lt;span class="w"&gt; &lt;/span&gt;outs:
&lt;span class="w"&gt;    &lt;/span&gt;deleted:&lt;span class="w"&gt;            &lt;/span&gt;data

&lt;span class="c1"&gt;# bring our data back from remote storage&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;data

data
├──&lt;span class="w"&gt; &lt;/span&gt;digit_data.csv
└──&lt;span class="w"&gt; &lt;/span&gt;digit_target.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="add-data-changes-into-dvc"&gt;Add data changes into DVC&lt;/h3&gt;
&lt;p&gt;To demonstrate how DVC track data changes, let's remove the last 2 rows from &lt;code&gt;data/digit_data.csv&lt;/code&gt; and &lt;code&gt;data/digit_target.csv&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# check what&amp;#39;s changed&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;status

data.dvc:
changed&lt;span class="w"&gt; &lt;/span&gt;outs:
&lt;span class="w"&gt;    &lt;/span&gt;modified:&lt;span class="w"&gt;           &lt;/span&gt;data

&lt;span class="c1"&gt;# Add these changes to DVC and git&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;add
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;data.dvc
&lt;span class="c1"&gt;# git commit&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;commit

&lt;span class="c1"&gt;# Push these changes to our remote storage&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The md5 value has been changed, and the size of our data is smaller than our previous record, 494728.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;data.dvc

outs:
-&lt;span class="w"&gt; &lt;/span&gt;md5:&lt;span class="w"&gt; &lt;/span&gt;a333e114a49194e823ab9a4fa9e33ee9.dir
&lt;span class="w"&gt;  &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;494172&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;nfiles:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;path:&lt;span class="w"&gt; &lt;/span&gt;data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More files are added to &lt;code&gt;../dvc_remote&lt;/code&gt; due to the data changes. You can follow the steps in the previous section to see what're actually store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;../dvc_remote

../dvc_remote
├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;b861b6dc8e08da6d66547860f69277
├──&lt;span class="w"&gt; &lt;/span&gt;2a
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;6cfa13365ac9b3af5146133aca6789
├──&lt;span class="w"&gt; &lt;/span&gt;8c
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;ba569595920d230ade453b150f372b
├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;2481fce846fb9750b7b8023c80a5ef
├──&lt;span class="w"&gt; &lt;/span&gt;a3
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;33e114a49194e823ab9a4fa9e33ee9.dir
└──&lt;span class="w"&gt; &lt;/span&gt;b8
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;d81f4964ecb86739c79c833fb491f3.dir

&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's &lt;code&gt;git checkout&lt;/code&gt; to the previous git commit to see what happens if we only revert the changes in &lt;code&gt;data.dvc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# or &amp;quot;git checkout v2-track-data&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;HEAD~1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running &lt;code&gt;wc -l data/digit_data.csv&lt;/code&gt;, we'll still find 1795 rows instead of 1797 rows in the previous stage. That's because we need to run &lt;code&gt;dvc checkout&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;We might easily forget this step. Thus, DVC implements a git-hook that can trigger &lt;code&gt;dvc checkout&lt;/code&gt; right after &lt;code&gt;git checkout&lt;/code&gt;. You can install these git-hooks through &lt;code&gt;dvc install&lt;/code&gt;. These hooks are added into &lt;code&gt;.git/hooks&lt;/code&gt;. If you want to know the detail of what's added, read &lt;a href="https://dvc.org/doc/command-reference/install"&gt;dvc install&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Test these steps again. There should be an additional line after running &lt;code&gt;git checkout&lt;/code&gt;. This is the output message of &lt;code&gt;dvc checkout&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;M       data/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Push our code to a remote git repository&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;REMOTE&lt;span class="w"&gt; &lt;/span&gt;GIT&lt;span class="w"&gt; &lt;/span&gt;REPO&amp;gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="fetch-code-and-data-changes-from-remote"&gt;Fetch code and data changes from remote&lt;/h3&gt;
&lt;p&gt;We've already pushed all the code and data changes to remote. Let's see how we could reproduce in another environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# check what&amp;#39;s in our repo&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;REMOTE&lt;span class="w"&gt; &lt;/span&gt;GIT&lt;span class="w"&gt; &lt;/span&gt;REPO&amp;gt;

.dvcignore
.github
.gitignore
LICENSE
Pipfile
Pipfile.lock
data
data.dvc
digit_recognizer
docs
mkdocs.yml
output
tasks.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although git does not track &lt;code&gt;data/&lt;/code&gt;, we can still list it through DVC.&lt;/p&gt;
&lt;p&gt;Because we use relative path &lt;code&gt;../dvc_remote&lt;/code&gt; as DVC remote storage, we need to create the new project in the same layer as &lt;code&gt;dvc_example&lt;/code&gt;. We'll clone the project into &lt;code&gt;../dvc_example_on_another_machine&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Clone repo git repo&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;YOUR&lt;span class="w"&gt; &lt;/span&gt;REMOTE&lt;span class="w"&gt; &lt;/span&gt;GIT&lt;span class="w"&gt; &lt;/span&gt;REPO&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;../dvc_example_on_another_machine
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;../dvc_example_on_another_machine
$&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;.

.
├──&lt;span class="w"&gt; &lt;/span&gt;LICENSE
├──&lt;span class="w"&gt; &lt;/span&gt;Pipfile
├──&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock
├──&lt;span class="w"&gt; &lt;/span&gt;data.dvc
├──&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer.py
├──&lt;span class="w"&gt; &lt;/span&gt;docs
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;README.md
├──&lt;span class="w"&gt; &lt;/span&gt;mkdocs.yml
├──&lt;span class="w"&gt; &lt;/span&gt;output
└──&lt;span class="w"&gt; &lt;/span&gt;tasks.py

&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, &lt;code&gt;data/&lt;/code&gt; has not yet been added to the project. We can now pull data from our DVC remote storage.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pull data from default DVC remote storage&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;pull

A&lt;span class="w"&gt;   &lt;/span&gt;data/
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;added&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;fetched

&lt;span class="c1"&gt;# `data` has now been added to the project&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;.

.
├──&lt;span class="w"&gt; &lt;/span&gt;LICENSE
├──&lt;span class="w"&gt; &lt;/span&gt;Pipfile
├──&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock
├──&lt;span class="w"&gt; &lt;/span&gt;data
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;digit_data.csv
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;digit_target.csv
├──&lt;span class="w"&gt; &lt;/span&gt;data.dvc
├──&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;digit_recognizer.py
├──&lt;span class="w"&gt; &lt;/span&gt;docs
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;README.md
├──&lt;span class="w"&gt; &lt;/span&gt;mkdocs.yml
├──&lt;span class="w"&gt; &lt;/span&gt;output
└──&lt;span class="w"&gt; &lt;/span&gt;tasks.py

&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all for data versioning in DVC. In the next post, We'll continue on versioning a data pipeline, tracking parameters and metrics. We won't need &lt;code&gt;dvc_example_on_another_machine&lt;/code&gt; for the following steps. Feel free to remove it and change directory back to &lt;code&gt;dvc_example&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dvc.org/"&gt;DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stanford-cs329s.github.io/syllabus.html"&gt;CS 329S: Machine Learning Systems Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Data"></category><category term="Version Control"></category><category term="DVC"></category></entry><entry><title>2020 發文頻率分析 - 如何在 pelican 頁面中嵌入 HTML</title><link href="https://blog.wei-lee.me/posts/tech/2021/01/post-frequency-analysis-how-to-embed-html-in-pelican" rel="alternate"></link><published>2021-01-29T23:10:00+08:00</published><updated>2021-01-29T23:10:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2021-01-29:/posts/tech/2021/01/post-frequency-analysis-how-to-embed-html-in-pelican</id><summary type="html">&lt;p&gt;因為不想在文章裡面直接寫 HTML（主要是不想自己去調大小、風格什麼的）&lt;br&gt;
我花了點時間研究要怎麼樣正確且優雅（？）的在 pelican 中嵌入 HTML&lt;/p&gt;
</summary><content type="html">&lt;p&gt;因為不想在文章裡面直接寫 HTML（主要是不想自己去調大小、風格什麼的）&lt;br&gt;
我花了點時間研究要怎麼樣正確且優雅（？）的在 pelican 中嵌入 HTML&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;不過當我把它們放到 pelican 的專案目錄下後&lt;br&gt;
就會因為這些 HTML 沒有 title 造成錯誤&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Skipping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.../&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="sr"&gt;/static/post-static/2021-post-frequency/&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;could&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Meta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.../&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="sr"&gt;/static/post-static/2021-post-frequency/&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;does&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;skipping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起來是 pelican 把它們也當作文章&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican/issues/1157"&gt;ERROR: Skipping extra/XXXXX.html: could not find information about 'title'&lt;/a&gt; 中也有人遇到同樣的問題&lt;br&gt;
只要在 &lt;code&gt;pelicanconf.py&lt;/code&gt; 加上設定，讓 pelican 不要去讀 HTML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;READERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelican 的文件 &lt;a href="https://docs.getpelican.com/en/4.5.4/content.html#including-other-files"&gt;including-other-files&lt;/a&gt; 有提到 reStructuredText 有原生支援&lt;br&gt;
如果是 markdown 就得安裝 &lt;a href="https://github.com/neurobin/mdx_include"&gt;mdx_include&lt;/a&gt;&lt;br&gt;
沒想到這個套件用下去我的建置時間從幾秒鐘飆升到幾分鐘...&lt;/p&gt;
&lt;p&gt;最後我只好妥協用 reStructuredText 來寫下一篇文章&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; html
    &lt;span class="nc"&gt;:file:&lt;/span&gt; ../../../static/post-static/2021-post-frequency/all.html
&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="pelican"></category></entry><entry><title>2020 發文頻率分析 - 如何得到 pelican 文章資訊並用來做圖</title><link href="https://blog.wei-lee.me/posts/tech/2021/01/post-frequency-analysis-how-i-get-pelican-article-data-and-plot" rel="alternate"></link><published>2021-01-29T18:45:00+08:00</published><updated>2021-01-29T18:45:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2021-01-29:/posts/tech/2021/01/post-frequency-analysis-how-i-get-pelican-article-data-and-plot</id><summary type="html">&lt;p&gt;原本只打算發篇文簡單回顧 2020 年我寫了什麼文章&lt;br&gt;
沒想到就慢慢演變成開發 &lt;a href="https://github.com/Lee-W/pelican-stat"&gt;pelican-stat&lt;/a&gt; ......&lt;/p&gt;
</summary><content type="html">&lt;p&gt;原本只打算發篇文簡單回顧 2020 年我寫了什麼文章&lt;br&gt;
沒想到就慢慢演變成開發 &lt;a href="https://github.com/Lee-W/pelican-stat"&gt;pelican-stat&lt;/a&gt; ......&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;原本只打算寫一篇的回顧文，就莫名其妙變成了三篇文章的系列文&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2021/01/post-frequency-analysis-how-i-get-pelican-article-data-and-plot"&gt;如何得到 pelican 文章資訊並用來做圖&lt;/a&gt;： 就是本文，主要會聊開發 &lt;a href="https://github.com/Lee-W/pelican-stat"&gt;pelican-stat&lt;/a&gt; 的過程&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2021/01/post-frequency-analysis-how-to-embed-html-in-pelican"&gt;如何在 pelican 頁面中嵌入 HTML&lt;/a&gt;： 將產生的互動式趨勢圖嵌入 pelican 的文章中，遇到的各種雷&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/gossiping/2021/02/post-frequency-analysis"&gt;2020 過去了，我寫了什麼文章&lt;/a&gt;： 2020 主要發了什麼文章，並聊聊當初為什麼會想寫這些文章&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pelican-stat"&gt;什麼是 pelican-stat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican-stat_1"&gt;如何使用 pelican-stat&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect"&gt;collect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plot"&gt;plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican-stat_2"&gt;設計 pelican-stat&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#collect_1"&gt;collect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plot_1"&gt;plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="pelican-stat"&gt;什麼是 pelican-stat&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt; 是用來產生靜態網頁的工具，最常見的用途應該是寫部落格&lt;br&gt;
你所看到的這個部落格就是透過這套工具產生的&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Lee-W/pelican-stat"&gt;pelican-stat&lt;/a&gt; 則是我這次開發來蒐集pelican 文章資料並作圖的工具&lt;/p&gt;
&lt;h2 id="pelican-stat_1"&gt;如何使用 pelican-stat&lt;/h2&gt;
&lt;h3 id="_1"&gt;安裝&lt;/h3&gt;
&lt;p&gt;因為我把 &lt;a href="https://github.com/getpelican/pelican/tree/4.5.4"&gt;pelican&lt;/a&gt; 的版本定在 4.5.4&lt;br&gt;
為了避免跟你的 pelican 版本打架，強烈建議使用 &lt;a href="https://github.com/pipxproject/pipx"&gt;pipx&lt;/a&gt; 安裝&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican-stat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelican-stat 目前支援 &lt;code&gt;collect&lt;/code&gt; 和 &lt;code&gt;plot&lt;/code&gt; 兩種指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Usage:&lt;span class="w"&gt; &lt;/span&gt;pelican-stat&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;COMMAND&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;ARGS&lt;span class="o"&gt;]&lt;/span&gt;...

Options:
&lt;span class="w"&gt;  &lt;/span&gt;--help&lt;span class="w"&gt;  &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;message&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;exit.

Commands:
&lt;span class="w"&gt;  &lt;/span&gt;collect&lt;span class="w"&gt;  &lt;/span&gt;Collect&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;project&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;article&lt;span class="w"&gt; &lt;/span&gt;metadata
&lt;span class="w"&gt;  &lt;/span&gt;plot&lt;span class="w"&gt;     &lt;/span&gt;Draw&lt;span class="w"&gt; &lt;/span&gt;trend&lt;span class="w"&gt; &lt;/span&gt;plot&lt;span class="w"&gt; &lt;/span&gt;based&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;frequency&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;posts
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="collect"&gt;collect&lt;/h3&gt;
&lt;p&gt;將文章的資訊整理並輸出成 json 檔&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1560308220.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Travel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;authors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lee-W&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;reader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;published&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Star Wars&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Galaxy&amp;#39;s Edge&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;timezone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Asia/Taipei&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Star Wars: Galaxy&amp;#39;s Edge - First Peek&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一個參數吃的是 pelican 的設定檔，第二個則是輸出的位置&lt;/p&gt;
&lt;h3 id="plot"&gt;plot&lt;/h3&gt;
&lt;p&gt;就如同指令的名稱，它就是拿來做圖用的&lt;br&gt;
目前只支援趨勢圖&lt;/p&gt;
&lt;p&gt;使用上比 &lt;code&gt;collect&lt;/code&gt; 複雜一點，有 5 個可以設定的參數&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--pelican-conf-path [PATH]&lt;/code&gt;： pelican 設定檔的路徑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--articles-metadata-path [PATH]&lt;/code&gt;： 用 &lt;code&gt;collect&lt;/code&gt; 指令所產生的文章資料 json 檔的路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面兩個一定要有一個有值，不然 pelican-stat 不知道要去哪抓文章資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--output-path [PATH]&lt;/code&gt;： 輸出檔名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--year [YEAR]&lt;/code&gt;： 篩選特定年份的文章&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--groupby-category&lt;/code&gt;： 作圖是否要根據文章類別分群&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後就能做出像這樣的圖&lt;br&gt;
產生的會是可以互動的 HTML 檔案&lt;/p&gt;
&lt;p&gt;&lt;img alt="newplot" src="/images/posts-image/2021-2020-post-frequency/newplot.png"&gt;&lt;/p&gt;
&lt;h2 id="pelican-stat_2"&gt;設計 pelican-stat&lt;/h2&gt;
&lt;p&gt;在開始寫 pelican-stat 前，我有找到類似的工具 👉 &lt;a href="https://github.com/romainx/panorama"&gt;panorama&lt;/a&gt;&lt;br&gt;
不過它是作為 pelican-plug 來使用，而不是獨立的指令列工具&lt;br&gt;
所以就只好自己來寫了&lt;/p&gt;
&lt;h3 id="collect_1"&gt;collect&lt;/h3&gt;
&lt;p&gt;第一個收集文章資訊的想法是寫 parser 去解析這些文章&lt;br&gt;
但是這麼做的話，這個工具可能就很難被其他人使用&lt;br&gt;
每個人指定 metadata 、放置文章的方式可能都不同&lt;br&gt;
甚至有人根本是用 reStructuredText 寫的&lt;br&gt;
（pelican 支援 reStructuredText 跟 markdown）&lt;/p&gt;
&lt;p&gt;不過有個工具一定有辦法抓到這些資訊&lt;br&gt;
沒錯💡&lt;br&gt;
那就是 pelican 本身！&lt;br&gt;
所以第二個想法是觀察 pelican 怎麼去解析這些文章&lt;br&gt;
如果能的話，直接呼叫它的函式，不要重造輪子&lt;/p&gt;
&lt;p&gt;從使用 pelican 指令到產生文章，會用這個順序追朔程式碼&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/__main__.py#L9"&gt;pelican/__main__.py#L9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/__init__.py#L491"&gt;pelican/__init__.py#L491&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/__init__.py#L501"&gt;pelican/__init__.py#L501&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/blob/master/pelican/__init__.py#L403-418"&gt;pelican/__init__.py#L403-418&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這就是為什麼我的 &lt;a href="https://github.com/Lee-W/pelican-stat/blob/0.3.0/pelican_stat/collector.py#L15"&gt;_get_pelican_instance&lt;/a&gt; 會這樣寫&lt;/p&gt;
&lt;p&gt;而我額外多做了兩個處理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PLUGINS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MARKDOWN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;原因是 MARKDOWN 跟 PLUGINS 都有可能有額外的相依套件&lt;br&gt;
尤其是 pelican 自從 &lt;a href="https://docs.getpelican.com/en/4.5.0/plugins.html#how-to-use-plugins"&gt;4.5.0&lt;/a&gt; 之後開始支援從 pip 安裝的 pelican-plugins&lt;br&gt;
但它們對文章的 metadata 大多不會有影響&lt;br&gt;
所以將他們從設定中清掉可以避免遇到相依套件沒裝的問題&lt;/p&gt;
&lt;p&gt;接著繼續追程式碼&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/__init__.py#L527"&gt;pelican/__init__.py#L527&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/__init__.py#L85-L100"&gt;pelican/__init__.py#L85-100&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我透過 pdb 看到 &lt;code&gt;generators[0]&lt;/code&gt; 是 &lt;code&gt;ArticlesGenerator&lt;/code&gt;&lt;br&gt;
看起來透過它就有很大的機會能取得文章資訊&lt;br&gt;
它也會對應到我所寫的 &lt;a href="https://github.com/Lee-W/pelican-stat/blob/0.3.0/pelican_stat/collector.py#L29-L43"&gt;pelican_stat/collector.py#L29-L43&lt;/a&gt;&lt;br&gt;
這裡也是我會把 pelican-stat 相依的 pelican 釘在 4.5.4 的主因&lt;br&gt;
&lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/__init__.py#L169"&gt;_get_generator_classes&lt;/a&gt; 在 4.5.2 以前是 &lt;code&gt;get_generator_classes&lt;/code&gt;&lt;br&gt;
雖然可以用 &lt;code&gt;getattr(pelican_instance, "get_generator_classes")&lt;/code&gt; 來支援不同的版本&lt;br&gt;
但難保 pelican 什麼時候又會改 API&lt;br&gt;
而且即使 pelican 的版本不同，對於文章 metadata 的格式應該都不會有改變&lt;br&gt;
所以作為一個工具，使用特定版本的 pelican 應該就足夠了&lt;/p&gt;
&lt;p&gt;最後在 &lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/__init__.py#L111-L113"&gt;pelican/__init__.py#L111-L113&lt;/a&gt; 執行完 &lt;code&gt;generate_context()&lt;/code&gt; 就能從 &lt;code&gt;article_generator.aricles&lt;/code&gt; 取得文章&lt;/p&gt;
&lt;p&gt;而每篇文章都是 &lt;a href="https://github.com/getpelican/pelican/blob/4.5.4/pelican/contents.py#L514"&gt;pelican.context.Article&lt;/a&gt; 的 instance&lt;br&gt;
所以只要看裡面有哪些資訊是我要的，在進行輸出就可以了 👉 &lt;a href="https://github.com/Lee-W/pelican-stat/blob/0.3.0/pelican_stat/collector.py#L47"&gt;pelican_stat/collector.py#L47&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="plot_1"&gt;plot&lt;/h3&gt;
&lt;p&gt;最初版測試用的 script，先了用我比較熟悉的 &lt;a href="https://docs.bokeh.org/en/latest/index.html"&gt;bokeh&lt;/a&gt; 寫&lt;br&gt;
但上次有朋友安利我 &lt;a href="https://plotly.com/python/"&gt;ploty&lt;/a&gt; 很好用，就決定來玩玩看&lt;br&gt;
使用上覺得兩個函式庫都還蠻直覺的&lt;br&gt;
但 ploty 可以不用多做設定就有 hover tool ，還蠻方便的&lt;br&gt;
因為這部分的程式碼大多都是看文件就能找到，就不特別聊了&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="pelican"></category></entry><entry><title>Python Table Manners 番外 - 編輯器</title><link href="https://blog.wei-lee.me/posts/tech/2021/01/python-table-manner-editor" rel="alternate"></link><published>2021-01-02T12:57:00+08:00</published><updated>2021-01-02T12:57:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2021-01-02:/posts/tech/2021/01/python-table-manner-editor</id><summary type="html">&lt;p&gt;在最開始的規劃中，並沒有想要寫編輯器&lt;br&gt;
不過半年前（可能更久以前...），朋友有建議可以寫這個主題&lt;br&gt;
上次去 Taichung.py 分享也有人提問&lt;br&gt;
就稍微整理我在用的編輯器&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在最開始的規劃中，並沒有想要寫編輯器&lt;br&gt;
不過半年前（可能更久以前...），朋友有建議可以寫這個主題&lt;br&gt;
上次去 Taichung.py 分享也有人提問&lt;br&gt;
就稍微整理我在用的編輯器&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;我主要用的編輯器是 neovim&lt;br&gt;
有時候會稍微用一下 Visual Studio Code&lt;br&gt;
需要輸入中文或只是快速瀏覽會開 sublime&lt;/p&gt;
&lt;h2 id="ide"&gt;IDE&lt;/h2&gt;
&lt;p&gt;如果是習慣用 IDE 的人，我推薦用 &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;&lt;br&gt;
看完官方的 &lt;a href="https://code.visualstudio.com/docs/languages/python"&gt;Python in Visual Studio Code&lt;/a&gt; 應該就能弄懂大部分的功能了&lt;/p&gt;
&lt;h2 id="_1"&gt;文字編輯器&lt;/h2&gt;
&lt;p&gt;文字編輯器，我推薦 neovim，用起來跟 vim 差不多&lt;br&gt;
至於要看我怎麼設定 vim 的話，可以參考 &lt;a href="https://github.com/Lee-W/vim-setting"&gt;vim-setting&lt;/a&gt;&lt;br&gt;
另外推薦 Real Python 寫的 &lt;a href="https://realpython.com/vim-and-python-a-match-made-in-heaven/#macos-os-x"&gt;VIM and Python – A Match Made in Heaven&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="vim"&gt;好用的 vim 套件&lt;/h3&gt;
&lt;p&gt;這裡整理一些我很推薦的套件們，其他套件要不要用就看個人習慣了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 相關&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-mode/python-mode"&gt;python-mode&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python 相關功能的集大成，裝了這個大概就有八成的功能了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在 vim 內執行 black&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fisadev/vim-isort"&gt;vim-isort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在 vim 內執行 isort&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通用&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-test/vim-test"&gt;vim-test&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在 vim 內執行測試（支援 20 種以上的程式語言）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/easymotion/vim-easymotion"&gt;vim-easymotion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;快速在 vim 內跳轉，點進去看文件的動畫更容易知道這個工具在幹嘛，它好用到我會為了用它在瀏覽器裝 vim 套件&lt;ul&gt;
&lt;li&gt;Firefox 🦊 套件： &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/vimium-ff/"&gt;Vimium-FF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fzf： 快速在 vim 內做文字、檔案搜尋&lt;ul&gt;
&lt;li&gt;需要同時安裝 &lt;a href="https://github.com/junegunn/fzf.vim"&gt;fzf&lt;/a&gt; 和 &lt;a href="https://github.com/junegunn/fzf.vim"&gt;fzf.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="editor"></category></entry><entry><title>Python Table Manners - Cookiecutter 專案模板</title><link href="https://blog.wei-lee.me/posts/tech/2021/01/python-table-manners-cookiecutter" rel="alternate"></link><published>2021-01-01T13:30:00+08:00</published><updated>2021-01-01T13:30:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2021-01-01:/posts/tech/2021/01/python-table-manners-cookiecutter</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-series"&gt;Python Table Manners 系列&lt;/a&gt; 整理了各種開發 Python 專案能用到的工具們&lt;br&gt;
如果每次重新開啟新專案都得重複設定的步驟就很浪費時間&lt;br&gt;
所以我將它們整理成專案模板 &lt;a href="https://github.com/Lee-W/cookiecutter-python-template"&gt;cookiecutter-python-template&lt;/a&gt;&lt;br&gt;
下次創立新專案的時候，只要透過這個模板就能快速產生已經設定好的空白專案&lt;br&gt;
這篇文章會跟大家聊聊如何使用這個專案模板和如何建立自己的專案模板&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-series"&gt;Python Table Manners 系列&lt;/a&gt; 整理了各種開發 Python 專案能用到的工具們&lt;br&gt;
如果每次重新開啟新專案都得重複設定的步驟就很浪費時間&lt;br&gt;
所以我將它們整理成專案模板 &lt;a href="https://github.com/Lee-W/cookiecutter-python-template"&gt;cookiecutter-python-template&lt;/a&gt;&lt;br&gt;
下次創立新專案的時候，只要透過這個模板就能快速產生已經設定好的空白專案&lt;br&gt;
這篇文章會跟大家聊聊如何使用這個專案模板和如何建立自己的專案模板&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cookiecutter"&gt;什麼是 Cookiecutter？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cookiecutter_1"&gt;如何使用 Cookiecutter 模板？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cookiecutter_2"&gt;如何製作 Cookiecutter 模板？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#hook"&gt;hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="cookiecutter"&gt;什麼是 Cookiecutter？&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;Cookiecutter&lt;/a&gt; 是以 Python 撰寫，透過已有的專案模板產生新專案的工具&lt;br&gt;
雖然是用 Python 撰寫，但不限於只能使用在 Python 專案&lt;br&gt;
甚至也不太需要會寫 Python，就能製作屬於自己的專案模板&lt;br&gt;
目前在 Github 上，已經有超過 5,000 個已經製作好的 cookiecutter 模板&lt;/p&gt;
&lt;p&gt;相較於每次都從前一個專案或空專案複製設定的做法&lt;br&gt;
Cookiecutter 能確保我們不會少代換掉舊的設定（e.g., 舊專案名稱）&lt;br&gt;
並減少需要代換這些內容的人力&lt;/p&gt;
&lt;h2 id="cookiecutter_1"&gt;如何使用 Cookiecutter 模板？&lt;/h2&gt;
&lt;p&gt;以我製作的模板 &lt;a href="https://github.com/Lee-W/cookiecutter-python-template"&gt;cookiecutter-python-template&lt;/a&gt; 為例&lt;/p&gt;
&lt;p&gt;首先要安裝 cookiecutter ，建議使用 pipx&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;cookiecutter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來要指定產生新專案要用的模板&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cookiecutter&lt;span class="w"&gt; &lt;/span&gt;https://github.com/Lee-W/cookiecutter-python-template
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著會進入互動式介面，詢問專案相關的設定&lt;br&gt;
每個問題依序會以 &lt;code&gt;值 [預設值]: 使用者輸入&lt;/code&gt; 的形式出現&lt;br&gt;
有的&lt;code&gt;值&lt;/code&gt;會因為前面的回答不同，而產生對應的預設值&lt;br&gt;
&lt;code&gt;值&lt;/code&gt; (e.g., python_table_manners) 會被帶回專案模板去取代模板中的變數 (e.g., project_slug)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;project_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;manners&lt;/span&gt;
&lt;span class="n"&gt;project_slug&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;python_table_manners&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;project_description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Short&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Descirption&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;
&lt;span class="n"&gt;github_username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Lee&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;github_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/Lee-W/python_table_manners]:&lt;/span&gt;
&lt;span class="n"&gt;author_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Wei&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Lee&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weilee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;python_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;3.7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.9&lt;/span&gt;
&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dependency_management_tool&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt;
&lt;span class="n"&gt;Choose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;use_strict_mypy_config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;open_source_license&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BSD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ISC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Apache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Software&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;License&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GNU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;General&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;License&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;
&lt;span class="n"&gt;Choose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有問題都回答完之後就會出現新的資料夾 python_table_manners&lt;br&gt;
（模板以 project_slug 作為產生的資料夾名稱）&lt;br&gt;
可以看到資料夾裡面已經有前幾篇提到會用到的相關檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;python_table_manners

.
├──&lt;span class="w"&gt; &lt;/span&gt;CHANGELOG.md
├──&lt;span class="w"&gt; &lt;/span&gt;LICENSE
├──&lt;span class="w"&gt; &lt;/span&gt;docs
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;README.md
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;contributing.md
├──&lt;span class="w"&gt; &lt;/span&gt;mkdocs.yml
├──&lt;span class="w"&gt; &lt;/span&gt;pyproject.toml
├──&lt;span class="w"&gt; &lt;/span&gt;python_table_manners
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;python_table_manners.py
├──&lt;span class="w"&gt; &lt;/span&gt;setup.cfg
├──&lt;span class="w"&gt; &lt;/span&gt;tasks
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;build.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;common.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;doc.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;env.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;git.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;secure.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;style.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;test.py
└──&lt;span class="w"&gt; &lt;/span&gt;tests
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;test_python_table_manners.py

&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="cookiecutter_2"&gt;如何製作 Cookiecutter 模板？&lt;/h2&gt;
&lt;p&gt;在新的專案內，先開個名稱為 &lt;code&gt;{{ cookiecutter.project_slug }}&lt;/code&gt; 的資料夾&lt;br&gt;
所有模板的內容都將放在這裡&lt;br&gt;
e.g., &lt;a href="https://github.com/Lee-W/cookiecutter-python-template/tree/0.6.1/%7B%7Bcookiecutter.project_slug%7D%7D"&gt;cookiecutter-python-template/{{ cookiecutter.project_slug }}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接著將想問使用者的問題寫進 &lt;code&gt;cookiecutter.json&lt;/code&gt;&lt;br&gt;
可以參考 &lt;a href="https://github.com/Lee-W/cookiecutter-python-template/blob/0.6.1/cookiecutter.json"&gt;cookiecutter-python-template/cookiecutter.json&lt;/a&gt;&lt;br&gt;
key 就是詢問使用者的問題，value 就是預設值&lt;/p&gt;
&lt;p&gt;對 &lt;a href="https://jinja.palletsprojects.com/en/2.11.x/"&gt;jinja2&lt;/a&gt; 熟悉的讀者，可能看到 &lt;code&gt;{{ }}&lt;/code&gt; 就發現了&lt;br&gt;
cookiecutter 背後是透過 jinja2 來取代這些值&lt;br&gt;
模板中所有 &lt;code&gt;{{ cookiecutter.key_from_cookiecutter_json }}&lt;/code&gt; 都會被代換成 cookiecutter.json 裡面的值&lt;br&gt;
因為是使用 jinja2 ，當然也能運用它方便的語法&lt;br&gt;
並且不限定於模板內才能使用，甚至在 cookiecutter.json 裡面都能使用&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;project_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python Project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;project_slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ cookiecutter.project_name.lower().replace(&amp;#39; &amp;#39;, &amp;#39;_&amp;#39;).replace(&amp;#39;-&amp;#39;, &amp;#39;_&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_template_version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.6.1&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（from &lt;a href="https://github.com/Lee-W/cookiecutter-python-template/blob/0.6.1/cookiecutter.json"&gt;cookiecutter-python-template/cookiecutter.json @ 0.6.1&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;如果有一些值不想問使用者，可以在 key 的最前面加上 &lt;code&gt;_&lt;/code&gt;&lt;br&gt;
(e.g., &lt;code&gt;_template_version&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;當然也能使用 jinja2 的 if/else 語法，針對使用者的回答產生不同的模板內容&lt;br&gt;
以下的範例就是使用者選擇不同的 dependency_management_tool 時，env.py 的指令內容會跟著改變&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Install production dependencies&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependency_management_tool&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pipenv&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pipenv install --deploy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%-&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependency_management_tool&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;poetry&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;poetry install --no-dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%-&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（from &lt;a href="https://github.com/Lee-W/cookiecutter-python-template/blob/0.6.1/%7B%7Bcookiecutter.project_slug%7D%7D/tasks/env.py#L18"&gt;cookiecutter-python-template/{{cookiecutter.project_slug}}/tasks/env.py @ 0.6.1&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;除了預設基本的 jinja2 語法外， cookiecutter 還提供了常用的 jinja2 extensions&lt;br&gt;
這些可以在 &lt;a href="https://cookiecutter.readthedocs.io/en/latest/advanced/hooks.html"&gt;Template Extensions&lt;/a&gt; 找到&lt;/p&gt;
&lt;p&gt;比較可惜的是 Cookiecutter 並不支援追加問答&lt;br&gt;
假設你想在使用者回答 dependency_management_tool 後&lt;br&gt;
因為使用者選擇了 poetry，接續問要用哪個 poetry 版本&lt;br&gt;
但當使用者選 pipenv 則不問這個問題&lt;br&gt;
這樣的設計在 cookiecutter 是做不到的&lt;br&gt;
（Read the discussion 👉 &lt;a href="https://github.com/cookiecutter/cookiecutter/issues/913#issuecomment-286571701"&gt;Conditional follow-up questions based on prior answers #913&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id="hook"&gt;hook&lt;/h3&gt;
&lt;p&gt;如果有嘗試用我的專案模板產生專案，並且選擇不同的 dependency_management_tool&lt;br&gt;
你會發現在選擇 pipenv 的時候會有 Pipfile，但選 poetry 的時候不會有&lt;br&gt;
這就是透過 post_gen_project.py 做到的&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Lee-W/cookiecutter-python-template/tree/0.6.1/hooks"&gt;cookiecutter-python-template/hooks/&lt;/a&gt;中，可以看到以下兩個檔案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pre_gen_project.py&lt;/code&gt;: 建立專案前要執行的內容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_gen_project.py&lt;/code&gt;: 建立專案後要執行的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 post_gen_project.py 中會做判斷，只要使用者不是選 pipenv ，就會把 Pipfile 刪除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ cookiecutter.dependency_management_tool }}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pipenv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;remove_pipfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（from &lt;a href="https://github.com/Lee-W/cookiecutter-python-template/blob/0.6.1/hooks/post_gen_project.py#L8"&gt;cookiecutter-python-template/hooks/post_gen_project.py&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;（Read more 👉 &lt;a href="https://cookiecutter.readthedocs.io/en/latest/advanced/hooks.html"&gt;Using Pre/Post-Generate Hooks (0.7.0+)&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-application-layouts/"&gt;Python Application Layouts: A Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/audreyr/cookiecutter-pypackage"&gt;audreyr/cookiecutter-pypackage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wemake-services/wemake-python-package"&gt;wemake-services/wemake-python-package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourcery.ai/blog/python-best-practices/"&gt;How to set up a perfect Python project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/better-programming/understanding-best-practice-python-tooling-by-comparing-popular-project-templates-6eba49229106"&gt;Understanding Best Practice Python Tooling by Comparing Popular Project Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category></entry><entry><title>Python Table Manners - 持續整合/部署</title><link href="https://blog.wei-lee.me/posts/tech/2020/12/python-table-manner-continuous-integration" rel="alternate"></link><published>2020-12-31T17:53:00+08:00</published><updated>2020-12-31T17:53:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-12-31:/posts/tech/2020/12/python-table-manner-continuous-integration</id><summary type="html">&lt;p&gt;這篇好像真的拖得很久...&lt;br&gt;
原本預定的發表時間還是 2020-03-04 呢 ......&lt;br&gt;
總之，剛好年假就趁機補一下&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這篇好像真的拖得很久...&lt;br&gt;
原本預定的發表時間還是 2020-03-04 呢 ......&lt;br&gt;
總之，剛好年假就趁機補一下&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;在使用 &lt;a href="https://github.com/actions"&gt;GitHub Actions&lt;/a&gt; 前，這篇原本要寫 &lt;a href="https://github.com/drone/drone"&gt;drone&lt;/a&gt; 的使用方式&lt;br&gt;
不過既然是放在 GitHub 上的開源專案，好像沒理由不用 GitHub Actions&lt;br&gt;
（但其實只是我當時想玩玩沒碰過的新東西）&lt;/p&gt;
&lt;p&gt;同樣會延續之前舉例的專案 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; (以下會簡稱 rg-cli）來講為什麼要用、如何使用 GitHub Actions&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;想解決的問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rg-cli"&gt;如何套用到 rg-cli ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github-actions"&gt;GitHub Actions 實例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-check"&gt;Python Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#merge-into-master"&gt;Merge into master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-publish"&gt;Python Publish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;想解決的問題&lt;/h2&gt;
&lt;p&gt;先從這樣的工具能解決什麼問題開始聊起&lt;/p&gt;
&lt;p&gt;假設你是某開源專案的維護者，設定好專案程式碼風格檢查跟自動化測試&lt;br&gt;
有個貢獻者提交了一個 pull request 給你審核&lt;br&gt;
審核完準備要 merge 的時候，才發現他的 pull request 測試跑不過&lt;br&gt;
這可能就會浪費你前面大部分審核的時間&lt;/p&gt;
&lt;p&gt;如果能在貢獻者 push 完，自動就做檢查&lt;br&gt;
確認已經通過基本的檢查，才讓人工介入（維護者審核）&lt;br&gt;
那就能省下你很多時間&lt;/p&gt;
&lt;p&gt;&lt;img alt="pass" src="/images/posts-image/2020-02-22-python-table-manner-series/pass.jpg"&gt;&lt;/p&gt;
&lt;p&gt;當這個 pull request 通過所有測試和人工審核，merge 回 master 分支之後&lt;br&gt;
接下來就要讓服務上線或是發佈套件，而這些步驟通常都很重複性且繁瑣&lt;br&gt;
如果自動化這些步驟就能省下人工成本，並減少人為失誤&lt;/p&gt;
&lt;h2 id="rg-cli"&gt;如何套用到 rg-cli ?&lt;/h2&gt;
&lt;p&gt;簡單先將想做的事分為三個步驟&lt;br&gt;
前一步通過才可以執行下一步&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;當貢獻者提交 pull request 後，自動執行風格檢查、跑測試&lt;/li&gt;
&lt;li&gt;當 pull request 被維護者 merge 回 master 分支之後，根據 git commit 更新版本號並產生 git tag ，最後再將 git tag 推回 master 分支&lt;br&gt;
  （如果不太知道這段在做什麼，可以參考 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/03/python-table-manners-commitizen"&gt;Commitizen: 規格化 commit message&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;當 master 分支偵測到新的版本號（git tag）產生後，自動將新的套件上傳到 &lt;a href="https://pypi.org/project/pycontw-report-generator/"&gt;PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="github-actions"&gt;GitHub Actions 實例&lt;/h2&gt;
&lt;p&gt;接下來看 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/3ff174384639c8d6f40c4cd16e59ceba950838e9/.github/workflows"&gt;pycontw-postevent-report-generator/.github/workflows/ @ 3ff174&lt;/a&gt; 中的三個檔案，分別對應到前面所提的三個步驟&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/blob/3ff174384639c8d6f40c4cd16e59ceba950838e9/.github/workflows/python-check.yaml"&gt;python-check.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/blob/3ff174384639c8d6f40c4cd16e59ceba950838e9/.github/workflows/merge-into-master.yaml"&gt;merge-into-master.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/blob/3ff174384639c8d6f40c4cd16e59ceba950838e9/.github/workflows/python-publish.yaml"&gt;python-publish.yaml&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="python-check"&gt;Python Check&lt;/h3&gt;
&lt;p&gt;每個 GitHub Actions 的 workflow 都需要有一個名稱&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這會顯示在 &lt;strong&gt;Actions&lt;/strong&gt; &amp;gt; &lt;strong&gt;Workflows&lt;/strong&gt; 中&lt;/p&gt;
&lt;p&gt;&lt;img alt="workflow" src="/images/posts-image/2020-02-22-python-table-manner-series/workflow.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接著要指定哪些事件發生時要執行這個 workflow&lt;br&gt;
(See more 👉 &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows"&gt;Events that trigger workflows&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pull_request&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來則是要在哪執行、執行什麼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jobs&lt;/code&gt;： workflow 要執行的 job ，可以有超過一個 job。每個 job 都必須給它一個 job id (e.g., check)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run-on&lt;/code&gt;： 要跑在哪種機器上 （More option 👉&lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on"&gt;jobs.&lt;job_id&gt;.runs-on&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steps&lt;/code&gt;:  要執行的 step&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: step 的名稱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use&lt;/code&gt;: step 要使用哪個 action，可以用在 &lt;a href="https://github.com/marketplace?type=actions"&gt;GitHub Marketplace · Actions&lt;/a&gt; 找看看有沒有別人已經寫好的 action 不用重造輪子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with&lt;/code&gt;: 輸入 actions 的參數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;: 要執行的指令（&lt;code&gt;|&lt;/code&gt; 是 yaml 的斷行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check out&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set up Python&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;python -m pip install pipenv invoke&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;inv env.init-dev -w&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;當這個 workflow 被執行的時候，可以在 GitHub Actions 看到細節&lt;/p&gt;
&lt;p&gt;&lt;img alt="step" src="/images/posts-image/2020-02-22-python-table-manner-series/job.jpg"&gt;&lt;/p&gt;
&lt;h3 id="merge-into-master"&gt;Merge into master&lt;/h3&gt;
&lt;p&gt;上個 workflow 只要偵測到任何 push 或 pull request 就會執行&lt;br&gt;
而這個 workflow 則是在 master 分支有改動時執行&lt;br&gt;
這時就可以在 &lt;code&gt;on&lt;/code&gt; 的後面針對特定的事件做判斷&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# another branch could be specified here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了 workflow 能偵測事件以外，也能依造不同的事件內容執行不同的 job&lt;br&gt;
下面的狀況是只有「開頭不是 "bump:" 的 commit」 才執行 &lt;code&gt;bump-version&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;bump-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!startsWith(github.event.head_commit.message,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bump:&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為 commitizen 自動跳版本號的時候，會 push 一個 commit 回 master 分支&lt;br&gt;
所以要給 GitHub Actions 適當的權限&lt;br&gt;
那就需要設定密碼或 token 來做到&lt;br&gt;
因為它們不適合被公開，所以要設定在 secret 裡面&lt;br&gt;
設定 secret 的頁面可以從 &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Secrets&lt;/strong&gt; &amp;gt; &lt;strong&gt;New repository secret&lt;/strong&gt; (右上角) 找到&lt;/p&gt;
&lt;p&gt;&lt;img alt="secret" src="/images/posts-image/2020-02-22-python-table-manner-series/secret.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在 job 取出 secret 的方式則是如下使用 &lt;code&gt;${{ secrets.secret_id }}&lt;/code&gt; 這樣的語法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check out&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;fetch-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.PERSONAL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="python-publish"&gt;Python Publish&lt;/h3&gt;
&lt;p&gt;跟 GitHub Actions 比較相關的內容，在上面兩個 workflow 都寫得差不多的&lt;br&gt;
那這裡就來聊聊跟 PyPI 相關的&lt;/p&gt;
&lt;p&gt;從去年七月起，PyPI 就有支援使用 API token 上傳&lt;br&gt;
（See more 👉 &lt;a href="https://pyfound.blogspot.com/2019/07/pypi-now-supports-uploading-via-api.html"&gt;PyPI now supports uploading via API token&lt;/a&gt;）&lt;br&gt;
所以建議使用 API token 而不是個人的 PyPI 帳號密碼&lt;br&gt;
產生 PyPI token 的方式可以在上面的文章找到，我就不贅述&lt;br&gt;
使用的方式則是把原本帳號的欄位改成 &lt;code&gt;__token__&lt;/code&gt; （就是這個字串，不用代換成任何東西)&lt;br&gt;
密碼改成 PyPI 給你的 token&lt;/p&gt;
&lt;p&gt;在串 GitHub Actions 時，我踩到一個很有趣（？）的雷&lt;br&gt;
假設你的取得的 token 是 &lt;code&gt;pypi-thisisrandomestringrepresentingyourapitoken&lt;/code&gt;&lt;br&gt;
在 workflow 中用 &lt;code&gt;password: ${{ secrets.pypi_password }}&lt;/code&gt; 取得 secret&lt;br&gt;
那在 secret 就要設定 &lt;code&gt;"pypi-thisisrandomestringrepresentingyourapitoken"&lt;/code&gt;&lt;br&gt;
而不是 &lt;code&gt;pypi-thisisrandomestringrepresentingyourapitoken&lt;/code&gt;&lt;br&gt;
不過也許將 workflow 的內容改成 &lt;code&gt;password: "${{ secrets.pypi_password }}"&lt;/code&gt; 也能解決&lt;br&gt;
總之，要記得加 &lt;code&gt;""&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/free-pro-team@latest/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/python-github-actions/"&gt;Python in GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="CI/CD"></category></entry><entry><title>snowflake-connector-python: 你的 pyarrow 不是你的 pyarrow</title><link href="https://blog.wei-lee.me/posts/tech/2020/12/snowflake-python-connector-install-extra-pyarrow-will-not-solve-your-problem" rel="alternate"></link><published>2020-12-22T23:20:00+08:00</published><updated>2020-12-22T23:20:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-12-22:/posts/tech/2020/12/snowflake-python-connector-install-extra-pyarrow-will-not-solve-your-problem</id><summary type="html">&lt;p&gt;這是個不好好看文件，胡亂嘗試、多繞了一圈才解決問題的經驗&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這是個不好好看文件，胡亂嘗試、多繞了一圈才解決問題的經驗&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;最近剛好接手了別人弄到一半的專案&lt;br&gt;
在嘗試把專案跑起來的時候，遇到了這個問題&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;dependency&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pyarrow&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;installed&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;please&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;see&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;instructions&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;docs&lt;/span&gt;.&lt;span class="nv"&gt;snowflake&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;en&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;guide&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;pandas&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;#&lt;span class="nv"&gt;installation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起來是 &lt;code&gt;pyarrow&lt;/code&gt; 沒有裝起來，所以可以先嘗試 &lt;code&gt;pip install pyarrow&lt;/code&gt;&lt;br&gt;
但很不幸的，這麼做並不會解決問題&lt;br&gt;
&lt;a href="https://github.com/snowflakedb/snowflake-connector-python"&gt;snowflake-connector-python&lt;/a&gt; v2.3.7 需要的 &lt;code&gt;pyarrow&lt;/code&gt; 版本必須是 &amp;gt;=0.17.0, &amp;lt; 0.18.0&lt;br&gt;
這也不是什麼大問題，只要改成 &lt;code&gt;pip install pyarrow==0.17.0&lt;/code&gt; 就可以解決&lt;/p&gt;
&lt;p&gt;不過如果每個套件遇到類似的問題都要這樣試，可能會花上不少的時間&lt;br&gt;
對 pip 稍有概念的人看到 &lt;em&gt;Optional dependency: 'pyarrow' is not installed&lt;/em&gt; 可能會聯想到沒裝 extra requirement&lt;br&gt;
所以我第一個嘗試其實是 &lt;code&gt;pip install snowflake-connector-python[pyarrow]&lt;/code&gt;&lt;br&gt;
但安裝完以後，還是跳出了同樣的錯誤訊息&lt;br&gt;
而且進到虛擬環境中會發現連 &lt;code&gt;pyarrow&lt;/code&gt; 都沒有被安裝&lt;/p&gt;
&lt;p&gt;這時也只好點進它的文件，看是不是有需要額外設定什麼&lt;br&gt;
👉 &lt;a href="https://docs.snowflake.com/en/user-guide/python-connector-pandas.html#installation"&gt;Using Pandas DataFrames with the Python Connector&lt;/a&gt;&lt;br&gt;
點進文件馬上就會看到的指令是 &lt;code&gt;pip install snowflake-connector-python[pandas]&lt;/code&gt;&lt;br&gt;
因為我要裝 &lt;code&gt;pyarrow&lt;/code&gt; 所以我將後面的 &lt;code&gt;pandas&lt;/code&gt; 改成 &lt;code&gt;pyarrow&lt;/code&gt;&lt;br&gt;
不過這其實就跟前次嘗試的指令是一樣的，同樣不能解決問題&lt;br&gt;
就在我百思不得其解時，我隨意測試了跟文件上一模一樣的指令&lt;br&gt;
(i.e., &lt;code&gt;pip install snowflake-connector-python[pandas]&lt;/code&gt;)&lt;br&gt;
然後一切的問題就解決了......&lt;/p&gt;
&lt;p&gt;既然解決了，就要回去思考為什麼能解決&lt;br&gt;
回去看 &lt;a href="https://github.com/snowflakedb/snowflake-connector-python/tree/v2.3.7/"&gt;snowflake-python-connector @ v2.3.7&lt;/a&gt; 的 setup.py&lt;br&gt;
在 &lt;a href="https://github.com/snowflakedb/snowflake-connector-python/blob/v2.3.7/setup.py#L44"&gt;44行&lt;/a&gt; 可以找到 &lt;code&gt;'pyarrow&amp;gt;=0.17.0,&amp;lt;0.18.0'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pandas_requirements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# Must be kept in sync with pyproject.toml&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;pyarrow&amp;gt;=0.17.0,&amp;lt;0.18.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;pandas&amp;gt;=1.0.0,&amp;lt;1.2.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著可以看到 &lt;code&gt;pandas_requirements&lt;/code&gt; 在 &lt;a href="https://github.com/snowflakedb/snowflake-connector-python/blob/v2.3.7/setup.py#L240"&gt;240行&lt;/a&gt; 被用到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;extras_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;secure-local-storage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;keyring&amp;lt;22.0.0,!=16.1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pandas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pandas_requirements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;原來 &lt;code&gt;pip install snowflake-connector-python[pandas]&lt;/code&gt; 同時會安裝 &lt;code&gt;pandas_requirements&lt;/code&gt; 中的 pandas 跟 pyarrow&lt;br&gt;
snowflake-connector-python 並不會單獨裝 pyarrow，這也難怪前面的嘗試會失敗&lt;br&gt;
但其實這個問題只要都造著文件做就能解決，就是因為自作聰明才繞了一大圈&lt;br&gt;
所以我說文件還是要好好的看啊！&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="snowflake"></category></entry><entry><title>小林的程式會不會遇到 SQL Injection</title><link href="https://blog.wei-lee.me/posts/tech/2020/09/will-kobayashi-s-code-encounter-sql-injection" rel="alternate"></link><published>2020-09-22T12:50:00+08:00</published><updated>2020-09-22T12:50:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-09-22:/posts/tech/2020/09/will-kobayashi-s-code-encounter-sql-injection</id><summary type="html">&lt;p&gt;其實這篇文章應該一年前就該寫了...&lt;br&gt;
今年為了在 PyCon TW 的 Lightning Talk 想個梗，就拿出來講 (&lt;a href="https://speakerdeck.com/leew/xiao-lin-de-cheng-shi-ma-hui-bu-hui-yu-dao-sql-injection"&gt;slide&lt;/a&gt;)&lt;br&gt;
沒想到被投影機擺了一道......&lt;/p&gt;
</summary><content type="html">&lt;p&gt;其實這篇文章應該一年前就該寫了...&lt;br&gt;
今年為了在 PyCon TW 的 Lightning Talk 想個梗，就拿出來講 (&lt;a href="https://speakerdeck.com/leew/xiao-lin-de-cheng-shi-ma-hui-bu-hui-yu-dao-sql-injection"&gt;slide&lt;/a&gt;)&lt;br&gt;
沒想到被投影機擺了一道......&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前言雜談&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql-injection"&gt;什麼是 SQL injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpy-sql-injection"&gt;web.py 到底會不會有 SQL injection？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;初始化資料庫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;實作登入功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;該如何修正？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;知其然還要知其所以然啊！&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pdbpp"&gt;pdbpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpy"&gt;追 web.py 原始碼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;結語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#one-more-thing"&gt;One more thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前言雜談&lt;/h2&gt;
&lt;p&gt;去年看了京阿尼的作品&lt;a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E6%9E%97%E5%AE%B6%E7%9A%84%E9%BE%8D%E5%A5%B3%E5%83%95"&gt;小林家的龍女僕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一集就發現主角小林也是寫 Python 的工程師，就開心地分享了這個消息&lt;br&gt;
&lt;img alt="del" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/del.jpg"&gt;&lt;/p&gt;
&lt;p&gt;沒想到馬上就有朋友問我這段程式碼會不會有 SQL injection&lt;br&gt;
&lt;img alt="will it encounter sql injection" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/will it encounter sql injection.png"&gt;&lt;/p&gt;
&lt;p&gt;單看這一段程式碼其實很難直接下定論&lt;br&gt;
畢竟 key 根本就不會被帶入 &lt;code&gt;session_id=$key&lt;/code&gt;，誰知道 db 怎麼實作的&lt;/p&gt;
&lt;p&gt;當然，早就有人注意到這段程式碼了&lt;br&gt;
它出自 &lt;a href="https://github.com/webpy/webpy/blob/webpy-0.39/web/session.py#L313"&gt;webpy/web/session.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/51933296/answer/143492909"&gt;如何评价京都动画2017年1月新作 小林家的龙女仆?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;除了找到程式碼外，它還列出了劇情的其他 Python 程式碼，並討論了京都動畫使用這段程式碼會不會有法律問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ygkn/items/6b3be1afa31e4092826e"&gt;小林さんちのメイドラゴンで出てきたコード（小林さんを探せ！）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;透過 &lt;code&gt;git blame&lt;/code&gt; 來找出「到底誰是小林！」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ponkatsu807462913.wordpress.com/tag/sql-injection/"&gt;Ponkatsu - Tag: sql injection&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;直接點出這段程式碼會遇到 SQL injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但身為工程師還是要自己驗證一下到底會不會有 SQL injection&lt;/p&gt;
&lt;h2 id="sql-injection"&gt;什麼是 SQL injection&lt;/h2&gt;
&lt;p&gt;根據 &lt;a href="https://zh.wikipedia.org/wiki/SQL%E6%B3%A8%E5%85%A5"&gt;SQL注入&lt;/a&gt; 維基百科頁面的例子&lt;br&gt;
假設有一段產生 SQL 字串的程式碼是這樣寫的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sql_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT * FROM users WHERE (name = &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;) and (pw = &amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;);&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要攻擊者輸入了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就會產生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為 1 一定等於 1，這段 SQL 就會產生跟 &lt;code&gt;SELECT * FROM user;&lt;/code&gt; 一樣的效果&lt;br&gt;
也就是攻擊者在完全不知道帳號密碼的情況下，就可以取得所有 users 的帳號密碼&lt;/p&gt;
&lt;h2 id="webpy-sql-injection"&gt;web.py 到底會不會有 SQL injection？&lt;/h2&gt;
&lt;p&gt;因為小林家的龍女僕是在 2017 年的 1 月到 4 月播出&lt;br&gt;
根據 web.py 的 &lt;a href="https://github.com/webpy/webpy/tags"&gt;tags&lt;/a&gt; 頁面，在那之後的第一個發佈是 &lt;code&gt;webpy-0.39&lt;/code&gt;&lt;br&gt;
可以推測，這最有可能是第一個包含小林撰寫程式碼的發佈&lt;/p&gt;
&lt;p&gt;&lt;img alt="web.py release" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/webpy tag.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我們先從安裝 &lt;code&gt;web.py==0.39&lt;/code&gt; 到虛擬環境中開始&lt;br&gt;
（p.s. web 跟 py 中間的 . 是必要的，因為真的有個套件叫 webpy）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;web.py&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.39
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很不幸，如果使用的是 Python 3，會遇到以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Creating virtualenv kobayashi-pwI4Cysh-py3.8 in /Users/weilee/Library/Caches/pypoetry/virtualenvs

Updating dependencies
Resolving dependencies... (0.1s)

Writing lock file


Package operations: 1 install, 0 updates, 0 removals

  - Installing web.py (0.39)

[EnvCommandError]
Command [&amp;#39;/Users/weilee/Library/Caches/pypoetry/virtualenvs/kobayashi-pwI4Cysh-py3.8/bin/pip&amp;#39;, &amp;#39;install&amp;#39;, &amp;#39;--no-deps&amp;#39;, &amp;#39;web.py==0.39&amp;#39;] errored with the following return code 1, and output:
Collecting web.py==0.39
  Using cached web.py-0.39.tar.gz (93 kB)
    ERROR: Command errored out with exit status 1:
     command: /Users/weilee/Library/Caches/pypoetry/virtualenvs/kobayashi-pwI4Cysh-py3.8/bin/python -c &amp;#39;import sys, setuptools, tokenize; sys.argv[0] = &amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;/.../web.py/setup.py&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;; __file__=&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;/.../web.py/setup.py&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;;f=getattr(tokenize, &amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;open&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;, open)(__file__);code=f.read().replace(&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;\r\n&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;, &amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;\n&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;exec&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;))&amp;#39; egg_info --egg-base /...
         cwd: /.../web.py/
    Complete output (7 lines):
    Traceback (most recent call last):
      File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
      File &amp;quot;/.../web.py/setup.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
        from web import __version__
      File &amp;quot;/.../web.py/web/__init__.py&amp;quot;, line 14, in &amp;lt;module&amp;gt;
        import utils, db, net, wsgi, http, webapi, httpserver, debugerror
    ModuleNotFoundError: No module named &amp;#39;utils&amp;#39;
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
WARNING: You are using pip version 20.1.1; however, version 20.2.3 is available.
You should consider upgrading via the &amp;#39;/Users/weilee/Library/Caches/pypoetry/virtualenvs/kobayashi-pwI4Cysh-py3.8/bin/python -m pip install --upgrade pip&amp;#39; command.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;web.py 要到 0.40 才支援 Python 3 (Ref: &lt;a href="https://github.com/webpy/webpy/issues/180"&gt;python3 ImportError: No module named utils #180&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;因為我不太想測試 Python 2，就假設小林的程式碼到 0.40 都沒什麼被改動到好了 😆&lt;/p&gt;
&lt;h3 id="_2"&gt;初始化資料庫&lt;/h3&gt;
&lt;p&gt;要實驗到底有沒有辦法取得資料庫的資料，總是要先有一個資料庫&lt;br&gt;
這裡做了三件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;sqlite3&lt;/code&gt; 跟 "kobayashi.db" 建立連線&lt;/li&gt;
&lt;li&gt;建立 &lt;code&gt;USER&lt;/code&gt; 資料表&lt;/li&gt;
&lt;li&gt;將 "kobayashi", "tohru", "kanna", "elma" 新增到 &lt;code&gt;USER&lt;/code&gt; 資料表中&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# connect and create &amp;quot;kobayashi.db&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kobayashi.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# create USER table&lt;/span&gt;
    &lt;span class="n"&gt;create_table_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    CREATE TABLE `USER` (&lt;/span&gt;
&lt;span class="s2"&gt;        `account`   TEXT NOT NULL UNIQUE,&lt;/span&gt;
&lt;span class="s2"&gt;        `password`  TEXT NOT NULL,&lt;/span&gt;
&lt;span class="s2"&gt;        PRIMARY KEY(`account`)&lt;/span&gt;
&lt;span class="s2"&gt;    );&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# insert users into USER table&lt;/span&gt;
    &lt;span class="n"&gt;insert_user_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    INSERT INTO&lt;/span&gt;
&lt;span class="s2"&gt;        USER (account, password)&lt;/span&gt;
&lt;span class="s2"&gt;    VALUES&lt;/span&gt;
&lt;span class="s2"&gt;        (&amp;#39;kobayashi&amp;#39;, &amp;#39;1&amp;#39;),&lt;/span&gt;
&lt;span class="s2"&gt;        (&amp;#39;tohru&amp;#39;, &amp;#39;2&amp;#39;),&lt;/span&gt;
&lt;span class="s2"&gt;        (&amp;#39;kanna&amp;#39;, &amp;#39;3&amp;#39;),&lt;/span&gt;
&lt;span class="s2"&gt;        (&amp;#39;elma&amp;#39;, &amp;#39;3&amp;#39;);&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_table_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insert_user_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;init_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;實作登入功能&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;login&lt;/code&gt; 會把使用者輸入的 account 跟 password 帶入 &lt;code&gt;where&lt;/code&gt;&lt;br&gt;
如果在資料庫找到正確的匹配，就會回傳找到的第一筆 user&lt;br&gt;
如果找不到就回傳 &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;web&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;result_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;USER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;account =&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; AND password=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login succeeded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wrong username or password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡用三個案例來測試&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;錯誤的帳號密碼 → 不應該取得 user&lt;/li&gt;
&lt;li&gt;正確的帳號密碼 → 應該取得 user&lt;/li&gt;
&lt;li&gt;SQL injection → 理想上，也不該取得 user&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sqlite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kobayashi.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kobayashi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kobayashi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但這個世界始終不理想，包含了 SQL injection 的程式成功取得 user&lt;br&gt;
之所以只取到一筆 user，是因為 &lt;code&gt;login&lt;/code&gt; 只會回傳第一個物件，但這段 SQL 是能取到整個資料庫的 user 的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.0 (1): SELECT * FROM USER WHERE account =&amp;#39;kobayashi&amp;#39; AND password=&amp;#39;&amp;#39;
wrong username or password
None

0.0 (2): SELECT * FROM USER WHERE account =&amp;#39;kobayashi&amp;#39; AND password=&amp;#39;1&amp;#39;
login succeeded
&amp;lt;Storage {&amp;#39;account&amp;#39;: &amp;#39;kobayashi&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;1&amp;#39;}&amp;gt;

0.0 (3): SELECT * FROM USER WHERE account =&amp;#39;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39; AND password=&amp;#39;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;
login succeeded
&amp;lt;Storage {&amp;#39;account&amp;#39;: &amp;#39;kobayashi&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;1&amp;#39;}&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;該如何修正？&lt;/h3&gt;
&lt;p&gt;修正的方式很簡單，只要在呼叫 select 的時候用 &lt;code&gt;vars&lt;/code&gt; 將參數帶進 &lt;code&gt;where&lt;/code&gt; 即可&lt;br&gt;
其實 web.py 的文件就有寫了 (Ref: &lt;a href="https://webpy.org/cookbook/query"&gt;db.query&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;result_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;USER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;account=$account AND password=$password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;account&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login succeeded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wrong username or password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這次就算用原本 SQL injetion 的作法，也取不到任何的資料&lt;br&gt;
因為沒有 account 是 &lt;code&gt;"1' OR '1'='1"&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.0 (3): SELECT * FROM USER WHERE account =&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot; AND password=&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;
wrong username or password
None
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_5"&gt;知其然還要知其所以然啊！&lt;/h2&gt;
&lt;p&gt;除了知道怎麼修正外，我還想知道 web.py 做了什麼&lt;br&gt;
下面冗長的紀錄我追 web.py 原始碼的過程&lt;/p&gt;
&lt;h3 id="pdbpp"&gt;pdbpp&lt;/h3&gt;
&lt;p&gt;寫這篇文章最大的收穫，大概就是大幅的提升了我對 pdb 的熟悉度&lt;br&gt;
剛好聽到廣播 &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes&lt;/a&gt; 推薦的 &lt;a href="https://github.com/pdbpp/pdbpp"&gt;pdbpp&lt;/a&gt; 就順手玩了一下&lt;br&gt;
pdbpp 在安裝後會取代原生的 pdb&lt;br&gt;
主要有這兩個功能比 pdb 好用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;syntax highlight&lt;ul&gt;
&lt;li&gt;不過需要注意的是，如果要能客製化 highlight 風格，需要直接從 master branch 安裝的版本，目前還沒把這個修正釋出到 PyPI 上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sticky mode（在除錯器的上方一直顯示目前追到的程式碼）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="sticky mode example" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/sticky mode.jpg"&gt;&lt;/p&gt;
&lt;p&gt;順便記錄一下常用到的 pdbpp 指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: 下一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: 進到函式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p [var]&lt;/code&gt; (e.g., &lt;code&gt;p locals()&lt;/code&gt;): 印出變數 var&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt;: 印出參數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ll&lt;/code&gt;: 顯示現在在原始碼的哪裡（原本 pdb 的 longlist）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="webpy"&gt;追 web.py 原始碼&lt;/h3&gt;
&lt;p&gt;這部分的紀錄方式會是每進到一次函式 (在 pdb 裡面使用 &lt;code&gt;s&lt;/code&gt;) 就會加一個四級標題&lt;br&gt;
回到原本的函式，則會在標題後面加一個 back&lt;/p&gt;
&lt;p&gt;首先當然是從 &lt;code&gt;login&lt;/code&gt; 呼叫到 &lt;code&gt;db.select&lt;/code&gt; 函式開始追回去&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::select&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L845"&gt;web/db.py#L845&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跑完 874 行的 list comprehension 後，&lt;code&gt;clauses&lt;/code&gt; 會包含以下四個部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Pdb++) p clauses
[&amp;lt;sql: &amp;#39;SELECT *&amp;#39;&amp;gt;, &amp;lt;sql: &amp;#39;FROM USER&amp;#39;&amp;gt;, &amp;lt;sql: &amp;#39;WHERE account =&amp;quot;1\&amp;#39; OR \&amp;#39;1\&amp;#39;=\&amp;#39;1&amp;quot; AND password=&amp;quot;1\&amp;#39; OR \&amp;#39;1\&amp;#39;=\&amp;#39;1&amp;quot;&amp;#39;&amp;gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起來已經成功將特殊字元跳脫，解決 SQL injection&lt;br&gt;
所以接下來要去追產生 &lt;code&gt;clause&lt;/code&gt; 的 &lt;code&gt;gen_clause&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::gen_clause&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L934"&gt;web/db.py#L934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;gen_clause&lt;/code&gt; 會被呼叫三次，當輸入的參數 sql 是 &lt;code&gt;WHERE&lt;/code&gt; 時，會執行到 948 行的 &lt;code&gt;nout = reparam(val, vars)&lt;/code&gt;&lt;br&gt;
此時輸入的各個參數如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;WHERE&amp;#39;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;account =$account AND password=$password&amp;#39;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;web/db.py::reparam&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L344"&gt;web/db.py#L344&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;參數:&lt;ul&gt;
&lt;li&gt;val = &lt;code&gt;'account =$account AND password=$password'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vars = &lt;code&gt;{'account': "1' OR '1'='1", 'password': "1' OR '1'='1"}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一進到 &lt;code&gt;reparm&lt;/code&gt; ，這些值就會繼續被傳到 &lt;code&gt;safteval&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::SafeEval::safeeval&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1699"&gt;web/db.py#L1699&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;帶入參數&lt;ul&gt;
&lt;li&gt;text = &lt;code&gt;'account =$account AND password=$password'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mapping = &lt;code&gt;{'account': "1' OR '1'='1", 'password': "1' OR '1'='1"}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1700 行的 &lt;code&gt;Parser&lt;/code&gt; 會將 text 分解成四個 SQL 的部分，並且將 nodes 連同 mapping 一個一個帶入 &lt;code&gt;eval_node&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Pdb++) p list(nodes)
[Node(&amp;#39;text&amp;#39;, &amp;#39;account =&amp;#39;, None), Node(&amp;#39;param&amp;#39;, &amp;#39;account&amp;#39;, None), Node(&amp;#39;text&amp;#39;, &amp;#39; AND password=&amp;#39;, None), Node(&amp;#39;param&amp;#39;, &amp;#39;password&amp;#39;, None)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;web/db.py::SafeEval::eval_node&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1703"&gt;web/db.py#L1703&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;self.eval_expr&lt;/code&gt; 的功用是在讓 &lt;code&gt;node[1]&lt;/code&gt; 能抓到 &lt;code&gt;"1' OR '1'='1"&lt;/code&gt;&lt;br&gt;
抓到了字串 &lt;code&gt;"1' OR '1'='1"&lt;/code&gt; 後會丟到 &lt;code&gt;sqlquote&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::sqlquote&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L463"&gt;463行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;參數:&lt;ul&gt;
&lt;li&gt;a = &lt;code&gt;"1' OR '1'='1"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a 會在 475 行被初始化成 &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L93"&gt;SQLParam&lt;/a&gt; 物件 ，然後再產生 &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L142"&gt;SQLQuery&lt;/a&gt; 物件&lt;/p&gt;
&lt;h4&gt;web/db.py::SafeEval::eval_node (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1703"&gt;web/db.py#L1703&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到 &lt;code&gt;eval_node&lt;/code&gt; ，就會把剛剛的結果 &lt;code&gt;&amp;lt;sql: '"1\' OR \'1\'=\'1"'&amp;gt;&lt;/code&gt; (&lt;code&gt;SQLQuery&lt;/code&gt; 物件印出的形式) 回傳&lt;/p&gt;
&lt;h4&gt;web/db.py::SafeEval::safeeval (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1699"&gt;web/db.py#L1699&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1701 行的 &lt;code&gt;[self.eval_node(node, mapping) for node in nodes]&lt;/code&gt; 會產生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;1&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt; OR &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;1&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; AND password=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;1&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt; OR &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;1&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這個 list 會接著被帶入 &lt;code&gt;SQLQuery.join&lt;/code&gt; 整合成一整個 SQL 的片段&lt;/p&gt;
&lt;h4&gt;web/db.py::SQLQuery::join&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L254"&gt;web/db.py#L254&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;277 ~ 285 行的 for loop 執行完會產生一個新的 target (&lt;code&gt;SQLQuery&lt;/code&gt; 物件)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Pdb++) p target
&amp;lt;sql: &amp;#39;account =&amp;quot;1\&amp;#39; OR \&amp;#39;1\&amp;#39;=\&amp;#39;1&amp;quot; AND password=&amp;quot;1\&amp;#39; OR \&amp;#39;1\&amp;#39;=\&amp;#39;1&amp;quot;&amp;#39;&amp;gt;

(Pdb++) p target.items
[&amp;#39;account =&amp;#39;, &amp;lt;param: &amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&amp;gt;, &amp;#39; AND password=&amp;#39;, &amp;lt;param: &amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;&amp;gt;]

(Pdb++) p target.values()
[&amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;, &amp;quot;1&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;]

(Pdb++) p target.query()
&amp;#39;account =%s AND password=%s&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以發現這時候要回傳的 &lt;code&gt;SQLQuery&lt;/code&gt; 物件已經把查詢時跟要帶入的值分開儲存&lt;/p&gt;
&lt;h4&gt;web/db.py::reparam（back）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L344"&gt;web/db.py#L344&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;web/db.py::DB::gen_clause (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L948"&gt;web/db.py#L948&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 956 行，剛剛回傳的 &lt;code&gt;nout&lt;/code&gt; 會透過 &lt;code&gt;xjoin&lt;/code&gt; 跟字串 &lt;code&gt;WHERE&lt;/code&gt; 整合成一個新的 &lt;code&gt;SQLQuery&lt;/code&gt; 物件&lt;br&gt;
字串跟 &lt;code&gt;SQLQuery&lt;/code&gt; 相加的行為被定義在 &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L196"&gt;196 行&lt;/a&gt; 的 &lt;code&gt;__radd__&lt;/code&gt;&lt;br&gt;
但因為沒有什麼太意料之外的行為，這裡就不繼續追下去了&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::select (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L874"&gt;web/db.py#L874&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;取得了回傳的 &lt;code&gt;clauses&lt;/code&gt; 後，它會在 879 行的 &lt;code&gt;SQLQuery.join&lt;/code&gt; 整合成一個 &lt;code&gt;SQLQuery&lt;/code&gt; 物件&lt;br&gt;
產生 &lt;code&gt;qout&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Pdb++) p qout
&amp;lt;sql: &amp;#39;SELECT * FROM USER WHERE account =&amp;quot;1\&amp;#39; OR \&amp;#39;1\&amp;#39;=\&amp;#39;1&amp;quot; AND password=&amp;quot;1\&amp;#39; OR \&amp;#39;1\&amp;#39;=\&amp;#39;1&amp;quot;&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後就要看 884 行的 &lt;code&gt;self.query(qout, processed=True)&lt;/code&gt; 是不是真的會以參數化的方式執行這段 SQL&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::query&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L807"&gt;web/db.py#L807&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;執行到 831 行 &lt;code&gt;self._db_execute(db_cursor, sql_query)&lt;/code&gt; 才會用到傳進來的 &lt;code&gt;sql_query&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::_db_execute&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L750"&gt;web/db.py#L750&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 756 行的 &lt;code&gt;_process_query&lt;/code&gt; 產生要執行的 SQL query 跟它的參數，回傳的結果分別是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query = &lt;code&gt;'SELECT * FROM USER WHERE account =? AND password=?'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;params = &lt;code&gt;["1' OR '1'='1", "1' OR '1'='1"])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再帶到 757 行的&lt;code&gt;out = cur.execute(query, params)&lt;/code&gt; 直接對資料庫作查詢，所以就不會遇到 SQL injection 了&lt;/p&gt;
&lt;h4&gt;原本好像是要追 delete 才對&lt;/h4&gt;
&lt;p&gt;顧著重現維基百科的例子，竟然忘記了原本要追的其實是另一段程式碼&lt;br&gt;
不過我想本質應該還是相同的&lt;br&gt;
有興趣的話，可以拿以下這段 SQL 來測測看 delete 的 SQL injection 是不是真的能清空整個資料表&lt;br&gt;
&lt;strong&gt;disclaimer: 請不要拿它用在會影響到其他人的程式上 (e.g., production 環境)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="xkcd joke" src="https://imgs.xkcd.com/comics/exploits_of_a_mom.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你是不是真的把你的兒子取名為 &lt;code&gt;Rober'); DROP TABLE Students;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_6"&gt;結語&lt;/h2&gt;
&lt;p&gt;結論是「雖然小林的程式碼可能遇到 SQL injection，但也存在著很簡單的解決方案，只要使用者有讀文件，應該就不會遇到」&lt;br&gt;
我完全不是資訊安全的專家，只是抱持著對京都動畫和 Python 的愛來追這段程式碼&lt;br&gt;
如果有說錯或可以補充的部分，再麻煩留言讓我知道 🙏&lt;/p&gt;
&lt;p&gt;其實小林家的龍女僕，還有其他場景也有出現 Python&lt;br&gt;
像是這裡說了小林自從開始寫 Python 後變得開朗了許多呢（誤&lt;/p&gt;
&lt;p&gt;&lt;img alt="kobayashi becomes hayppier" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/kobayashi becomes hayppier.png"&gt;&lt;/p&gt;
&lt;p&gt;我也是自從寫了 Python 後，每次考試都考 100 分呢（並沒有）&lt;br&gt;
所以大家一起來寫 Python 吧 🐍&lt;br&gt;
那寫 Python 的人最好的交流平台是什麼呢 🤔&lt;br&gt;
當然是 &lt;a href="https://tw.pycon.org/"&gt;PyCon TW&lt;/a&gt; 啊 🤩&lt;br&gt;
來當 PyCon TW 志工，跟大家交流 Python，變成一個開朗的人吧 💪&lt;/p&gt;
&lt;h2 id="one-more-thing"&gt;One more thing&lt;/h2&gt;
&lt;p&gt;去年七月一場不幸的縱火案，大大的重創了京都動畫&lt;br&gt;
PyCon JP 2019 時，我也去了鷲宮神社留下我的祝福&lt;br&gt;
不會日文的我，就只簡單的寫了 &lt;strong&gt;Pray for Kyoani&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pray for kyoani" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/pray for kyoani.jpg"&gt;&lt;/p&gt;
&lt;p&gt;即便如此，京阿尼還是很快就站起來&lt;br&gt;
一年過後的現在宣布「小林家的龍女僕將於 2021 年開播 」🎉&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;TVアニメ第2期「小林さんちのメイドラゴンS」2021年放送決定！SuperでSupremeなSecond lifeがStartします！&lt;br&gt;そして、メイドラゴンS(読み:エス)ティザービジュアル公開！ティザーサイトもぜひチェックお願いします！　&lt;a href="https://t.co/pKOgbEe3sL"&gt;https://t.co/pKOgbEe3sL&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/meidragon?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#meidragon&lt;/a&gt; &lt;a href="https://t.co/XoyiBPbnvt"&gt;pic.twitter.com/XoyiBPbnvt&lt;/a&gt;&lt;/p&gt;&amp;mdash; TVアニメ「小林さんちのメイドラゴンS」公式 (@maidragon_anime) &lt;a href="https://twitter.com/maidragon_anime/status/1292838380187746305?ref_src=twsrc%5Etfw"&gt;August 10, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Animate"></category></entry><entry><title>COSCUP 2020 / SITCON 2020</title><link href="https://blog.wei-lee.me/posts/tech/2020/08/coscup-2020-sitcon-2020" rel="alternate"></link><published>2020-08-21T15:21:00+08:00</published><updated>2020-08-21T15:21:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-08-21:/posts/tech/2020/08/coscup-2020-sitcon-2020</id><summary type="html">&lt;p&gt;因為這次 COSCUP 跟 SITCON 只隔了一週，就順手寫在一起了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;因為這次 COSCUP 跟 SITCON 只隔了一週，就順手寫在一起了&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="vip" src="/images/posts-image/2020-coscup-2020-sitcon-2020/vip.jpg"&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#coscup-2020"&gt;COSCUP 2020&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前夜派對&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;演講&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bof"&gt;BoF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lightning-talk"&gt;閃電秀（Lightning Talk）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sitcon-2020"&gt;SITCON 2020&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;最不友善贊助商&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lightning-talks"&gt;道歉大會 閃電秀（Lightning Talks）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="coscup-2020"&gt;COSCUP 2020&lt;/h2&gt;
&lt;p&gt;看了今年的議程表才發現很多 Python 的議程，而且還跟 PyCon TW 稿件的重複性很高（笑&lt;br&gt;
早知道今年就該來投一下 COSCUP&lt;/p&gt;
&lt;p&gt;不得不說，在全世界都受疫情所苦，實體研討會紛紛取消&lt;br&gt;
能舉辦一場累計 2800 人次的會議，真的是很厲害 😲😲😲&lt;/p&gt;
&lt;p&gt;&lt;img alt="2800" src="/images/posts-image/2020-coscup-2020-sitcon-2020/2800.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;前夜派對&lt;/h3&gt;
&lt;p&gt;去年收到前夜派對的訊息時，票早就已經賣光了 😢&lt;br&gt;
今年除了把大會的售票亭拆掉，前夜派對的也一起拆了&lt;br&gt;
憑著健康申明書就能入場&lt;/p&gt;
&lt;p&gt;再來之前，好像跟誰聊到天，就會問要不要來喝酒&lt;br&gt;
不小心就揪了不少人來&lt;br&gt;
主要的時間都在跟老朋友聚，沒認識到太多的新朋友&lt;br&gt;
但也還是玩的蠻開心的&lt;/p&gt;
&lt;h3 id="_2"&gt;演講&lt;/h3&gt;
&lt;p&gt;今年就真的是佛係聽講&lt;br&gt;
因為也沒特別提早去搶位置，大家都搶著去的演講&lt;br&gt;
我都是走到門口才看到排不進去了 XDD&lt;/p&gt;
&lt;p&gt;COSCUP 的主題相對算是廣泛&lt;br&gt;
大概有一半都是跟我不太有關，我可能也不感興趣的&lt;br&gt;
技術深度太深的，可能是我連基礎都沒碰過的東西，去聽也聽不懂&lt;br&gt;
較為基礎的技術，也會讓我覺得好像回去看個文件就夠了&lt;br&gt;
所以我比較傾向去聽軟性議題（e.g., &lt;a href="https://hackmd.io/@joeangeltw/HybA7gGgD#/"&gt;溝通的藝術，專案經理與工程師的二三事&lt;/a&gt;) 或是技術如何被應用到不那麼常見的領域（聽不懂細節沒關係，只是想知道講者者思考的方式）&lt;/p&gt;
&lt;p&gt;倒是 COSCUP 幾乎每場演講都「像極了愛情」...&lt;/p&gt;
&lt;h3 id="bof"&gt;BoF&lt;/h3&gt;
&lt;p&gt;想說都要來 COSCUP ，就接受推坑來主持一個 BoF&lt;br&gt;
反正大概跟 Open Space 一樣...吧？&lt;br&gt;
來的人數還算是不少（2/3 是 PyCon TW 老朋友， 1/3 的新朋友）&lt;br&gt;
原本想說既然 PyCon TW 2020 辦在台南，我們就來聊聊要去台南吃什麼美食吧（？&lt;br&gt;
但沒有好好規劃的結果，就是一陣尷尬 XDDD&lt;/p&gt;
&lt;p&gt;如果以「討論要吃什麼台南美食」作為成功與否的指標的話，應該是蠻失敗的 XD&lt;br&gt;
但以「連結對 Python 有興趣的人」為指標的話，倒是蠻成功的&lt;br&gt;
連結到一些 PyCon TW 老朋友，也招募到幾位有淺力，合作愉快的夥伴 🤩&lt;/p&gt;
&lt;h3 id="lightning-talk"&gt;閃電秀（Lightning Talk）&lt;/h3&gt;
&lt;p&gt;最近參加的會議，我都會順手投個閃電秀推廣一下 &lt;a href="https://github.com/commitizen-tools"&gt;commitizen-tools&lt;/a&gt;&lt;br&gt;
但到了第二天被通知有抽到的時候，我才想起來前一天有投...&lt;br&gt;
所以我轉接頭沒帶，投影片也還沒做（雖然閃電秀半小時前做應該也還好）&lt;br&gt;
還好不是現場抽上台的那種，不然就太刺激了 XD&lt;/p&gt;
&lt;p&gt;比起之前在 EuroPython 2020 即興的閃電秀，果然用自己的母語還是有差&lt;br&gt;
大致上，我的閃電秀得到的回饋還算熱烈（？）&lt;br&gt;
像是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真的沒在寫 js， Java Script...&lt;/li&gt;
&lt;li&gt;COSCUP 全大寫啊啊&lt;/li&gt;
&lt;li&gt;中文的 git 好不習慣XD&lt;/li&gt;
&lt;li&gt;根提交...&lt;/li&gt;
&lt;li&gt;啊 打錯了&lt;/li&gt;
&lt;li&gt;哎呀 怎麼會沒有時間了呢&lt;/li&gt;
&lt;li&gt;「先要買，再考慮好..」&lt;br&gt;
  - Pycon 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實我也很不習慣中文的 git ，但要改他實在有點麻煩 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="java script" src="/images/posts-image/2020-coscup-2020-sitcon-2020/java script.jpg"&gt;&lt;br&gt;
&lt;img alt="no space inside javascript" src="/images/posts-image/2020-coscup-2020-sitcon-2020/no space inside javascript.jpg"&gt;&lt;br&gt;
&lt;img alt="upper case coscup" src="/images/posts-image/2020-coscup-2020-sitcon-2020/upper case coscup.jpg"&gt;&lt;/p&gt;
&lt;p&gt;啊，然後附上我的&lt;a href="https://speakerdeck.com/leew/coscup-2020-lightning-talk"&gt;閃電秀投影片&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sitcon-2020"&gt;SITCON 2020&lt;/h2&gt;
&lt;p&gt;當初會想來 SITCON 就只是想支持 Pochun / Rain Wu 的演講&lt;br&gt;
雖然 Pochun 跟去年的我都是在講 X-Village 相關的東西&lt;br&gt;
他講的就是比我精彩很多，座無虛席啊&lt;br&gt;
明顯看得出準備的用心程度就是不同 XD&lt;/p&gt;
&lt;p&gt;除此之外，還想聽聽「臉書資料探勘－鯉魚教の教主崇拜分析」&lt;br&gt;
但不小心在攤位聊得太開心，只趕上感謝教主&lt;br&gt;
&lt;img alt="liyu" src="/images/posts-image/2020-coscup-2020-sitcon-2020/liyu.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;最不友善贊助商&lt;/h3&gt;
&lt;p&gt;今年其實我是以贊助商（社群？）的身份來的&lt;br&gt;
除了回饋學生社群外，還有一個很大的目的是招募對 PyCon TW 有興趣的夥伴&lt;br&gt;
但今年因為疫情從三月延期到八月&lt;br&gt;
對離大會只剩一個月的我們來說，其實是有點晚了&lt;br&gt;
所以我們就修改了這次的攤位方針&lt;br&gt;
只針對主動對 Python / PyCon TW 有興趣的人講解，沒有的話就直接掃 QR Code&lt;br&gt;
雙方都不浪費彼此的時間，仔細想想其實真的蠻不錯的 😆&lt;/p&gt;
&lt;h3 id="lightning-talks"&gt;&lt;del&gt;道歉大會&lt;/del&gt; 閃電秀（Lightning Talks）&lt;/h3&gt;
&lt;p&gt;如同前面所提到的， COSCUP 的閃電秀中，我犯了很多的錯誤&lt;br&gt;
身為一個負責任的人，必須要為自己錯誤的行為道歉&lt;br&gt;
所以只好在 SITCON 公開道歉了（？？？）&lt;/p&gt;
&lt;p&gt;影片很快就出來了，所以想看我道歉的可以直接看&lt;a href="https://www.youtube.com/watch?v=M36UlGbO-mE&amp;amp;feature=youtu.be&amp;amp;t=454"&gt;道歉大會影片&lt;/a&gt;（到底是誰會想看這種東西？？？）&lt;br&gt;
順便附上&lt;a href="https://speakerdeck.com/leew/sitcon-2020-ligthning-talk"&gt;投影片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;倒是會後有聽到也在 SITCON 幫忙的夥伴說，在閃電秀中，大家對我的最有印象...&lt;/p&gt;
&lt;p&gt;這兩場閃電秀，我大致上的分配是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讓人覺得有趣的點 → 像極了愛情（並沒有）、道歉大會&lt;/li&gt;
&lt;li&gt;想要傳達的知識 → commitizen-tools 很好用&lt;/li&gt;
&lt;li&gt;想要業配的訊息 → PyCon TW 售票&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我撰寫這段文字的時候 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen-tools&lt;/a&gt;，比起 COSCUP 前已經增加了 42 個 star&lt;br&gt;
看來這個行銷策略很成功呢（？&lt;/p&gt;
&lt;p&gt;哦對了，如果看到這邊的你還沒買 PyCon TW 2020 的票&lt;br&gt;
就快點買票吧 👉 &lt;a href="https://pycontw.kktix.cc/events/20200905-individual"&gt;PyCon Taiwan 2020 Registration&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="COSCUP"></category><category term="SITCON"></category></entry><entry><title>EuroPython 2020</title><link href="https://blog.wei-lee.me/posts/tech/2020/08/europython-2020" rel="alternate"></link><published>2020-08-06T15:15:00+08:00</published><updated>2020-08-06T15:15:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-08-06:/posts/tech/2020/08/europython-2020</id><summary type="html">&lt;p&gt;好不容易投稿上了 EuroPython&lt;br&gt;
原本打算順便去愛爾蘭的 Skellig Michael&lt;br&gt;
疫情一來就全都去不成了 😭&lt;/p&gt;
</summary><content type="html">&lt;p&gt;好不容易投稿上了 EuroPython&lt;br&gt;
原本打算順便去愛爾蘭的 Skellig Michael&lt;br&gt;
疫情一來就全都去不成了 😭&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前言雜談&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#discord"&gt;Discord 互動設計&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#lobby"&gt;Lobby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conference-tracks"&gt;Conference Tracks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sponsor-exhibit"&gt;Sponsor Exhibit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attendee-rooms"&gt;Attendee Rooms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backstage"&gt;Backstage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;會期&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#day-1"&gt;Day 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-2"&gt;Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-europython-2020-as-an-online-conference"&gt;Running EuroPython 2020 as an online conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developments-sprint"&gt;Developments Sprint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前言雜談&lt;/h2&gt;
&lt;p&gt;EuroPython 2020 在 3 月底的時候公佈轉成線上會議&lt;br&gt;
比起 PyCon US，場地跟其他費用都還沒有支出，算是蠻幸運的&lt;br&gt;
倒是今年線上會議要收票的問題，聽說在 Telegram 群組有一番爭論&lt;br&gt;
一張一般票 EUR 95.00 的確不算很便宜&lt;br&gt;
不過講者票今年不用錢就是了 XD&lt;/p&gt;
&lt;p&gt;今年有來自 69 個國家的會眾參與，比起 2019 多了 40 個國家&lt;br&gt;
雖然大家抱怨歸抱怨，最後好像還是有 1000 人以上買票啊 XDDDD&lt;/p&gt;
&lt;p&gt;線上會議跟真人會議的體驗上會有差是無法避免&lt;br&gt;
但我覺得已經算是盡可能把實體會議的一切搬到線上了&lt;br&gt;
能在這麼短的時間內，完成那麼多規劃真的蠻厲害的&lt;br&gt;
最棒的一點是，留了很多文件給大家參考 🤩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1OAVtZnxVgmkDGvSV1vEzra7m5Nfjr-81kCrustzxAek/edit#"&gt;EuroPython 2020 Online Conference Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1hno9PgvEViHBkmCXP6BkpAsL8-mTpm6Sb8S6A8lwVPs/edit#heading=h.b0yozxqx8i03"&gt;EuroPython 2020 Speaker Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以往 EuroPython 的演講影片都會公開，並放到 &lt;a href="https://pyvideo.org/"&gt;PyVideo&lt;/a&gt; 上&lt;br&gt;
我原本蠻好奇今年打算怎麼在收費和不收費的會眾做出區別&lt;br&gt;
畢竟以往購票參與會議一個很大的價值是跟其他的與會者互動&lt;br&gt;
今年的互動雖然用 Discord 來彌補，但還是會打一些折扣&lt;/p&gt;
&lt;p&gt;最後的作法是會先還沒剪的影片傳到私有的 Youtube 頻道供購票會眾觀看，但兩週後就會公開&lt;br&gt;
幾週後弄完就把修剪版放上去&lt;/p&gt;
&lt;p&gt;整體參加下來我覺得是很成功的線上會議，我也很享受跟會眾的線上互動&lt;br&gt;
雖然少了實體的互動是可惜了點，但降低參與成本讓更多還自不同地區的人能一起來共襄盛舉&lt;br&gt;
現在也還說不準預期疫情到底什麼時候會結束，不知道線上會議會不會是一個新的標準&lt;br&gt;
又或者之後可以嘗試一下實體/虛擬混合的會議？&lt;/p&gt;
&lt;h2 id="discord"&gt;Discord 互動設計&lt;/h2&gt;
&lt;p&gt;EuroPython 設計了很完整的架構，讓會眾可以更快速的找到各個資訊在 Discord 的哪裡&lt;/p&gt;
&lt;h3 id="lobby"&gt;Lobby&lt;/h3&gt;
&lt;p&gt;&lt;img alt="lobby" src="/images/posts-image/2020-07-28-euro-python-2020/lobby.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Lobby 的 Channel Category 主要是註冊用跟大會公告&lt;br&gt;
進到 &lt;code&gt;info-desk&lt;/code&gt; 輸入自己的票務資訊後，就會有機器人自動設定正確的權限&lt;br&gt;
而且這個機器人也有開源 👉 &lt;a href="https://github.com/EuroPython/ep-regbot"&gt;ep-regbot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hallway&lt;/code&gt; 可以想像成大會的走廊，就是讓會眾隨意聊天的地方&lt;br&gt;
好像有人問有沒有人要在 after party 的時段直播表演樂器&lt;br&gt;
有點像是 PyCon TW 的 PyNight&lt;br&gt;
但 after party 的時間，在台灣的凌晨，我就沒有參加到了&lt;/p&gt;
&lt;h3 id="conference-tracks"&gt;Conference Tracks&lt;/h3&gt;
&lt;p&gt;&lt;img alt="conference tracks" src="/images/posts-image/2020-07-28-euro-python-2020/conference-track.png"&gt;&lt;/p&gt;
&lt;p&gt;註冊後最重要的是 Conference Tracks 這個 Channel Category&lt;br&gt;
microsoft / brain/ ni /parrot 可以看成 PyCon TW 的 r0 / r1 /r2，總之就是不同的 track&lt;br&gt;
除了 track 都有自己的討論頻道外，每個 track 還會有一個 &lt;code&gt;.*-peek&lt;/code&gt; 的頻道&lt;br&gt;
機器人會截圖 track 中現在 Zoom 的畫面&lt;br&gt;
供會眾參考要不要連進去現在的 Zoom 或是看 Youtube&lt;br&gt;
我覺得這個功能真的超酷 XDD&lt;/p&gt;
&lt;p&gt;另外，每個 Track 都會有自己的 Channel Category&lt;br&gt;
裡面會有每一個講者的頻道&lt;br&gt;
身為講者，我覺得有一個自己的頻道可以繼續跟會眾互動真的蠻棒的 💯&lt;br&gt;
還有兩個頻道是給 Open Space 用的，這次好像不算特別熱絡&lt;br&gt;
一天大概只有兩、三場&lt;/p&gt;
&lt;h3 id="sponsor-exhibit"&gt;Sponsor Exhibit&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sponsor exhibit" src="/images/posts-image/2020-07-28-euro-python-2020/sponsor.jpg"&gt;&lt;/p&gt;
&lt;p&gt;贊助商也會有各自的頻道&lt;br&gt;
也會有各自的 Zoom ，可以跟跟會眾互動&lt;br&gt;
我有稍微路過一下，但沒參與太多就跑去參加下一個演講了&lt;/p&gt;
&lt;p&gt;另外，在每一場演講的間隔，會播放贊助商的廣告影片&lt;br&gt;
我覺得效果蠻不錯的&lt;br&gt;
畢竟就是在等下一場演講，好像就還是得看完 XD&lt;/p&gt;
&lt;h3 id="attendee-rooms"&gt;Attendee Rooms&lt;/h3&gt;
&lt;p&gt;&lt;img alt="attendee rooms" src="/images/posts-image/2020-07-28-euro-python-2020/attendee-rooms.jpg"&gt;&lt;/p&gt;
&lt;p&gt;會眾有一整個 Channel Category&lt;br&gt;
好像可以自己創主題式的討論&lt;br&gt;
但這部分我就真的沒什麼參與到了&lt;/p&gt;
&lt;h3 id="backstage"&gt;Backstage&lt;/h3&gt;
&lt;p&gt;&lt;img alt="backstage" src="/images/posts-image/2020-07-28-euro-python-2020/speaker-backstage.jpg"&gt;&lt;/p&gt;
&lt;p&gt;講者後台的設計就真的有點複雜&lt;br&gt;
在線上會議會遇到的一個問題是「怎麼提醒講者時間快到了」，直接在演講中打斷講者好像不太適合&lt;br&gt;
他們的作法是講者會在演講開始前 15 分鐘加入 &lt;code&gt;.*-greenroom&lt;/code&gt;，讓 session manager 確定講者已經抵達&lt;br&gt;
接著， session manager 會讓講者加入 Zoom 跟 &lt;code&gt;.*-talkback&lt;/code&gt;&lt;br&gt;
用 Zoom 讓講者做演講並跟主持人做互動&lt;br&gt;
session manager 則是透過 &lt;code&gt;.*-talkback&lt;/code&gt; 跟講者說剩下的時間&lt;/p&gt;
&lt;p&gt;在線上會議也有講者準備/休息室（greenroom）的概念真的蠻有趣的 XD&lt;/p&gt;
&lt;h2 id="_2"&gt;會期&lt;/h2&gt;
&lt;h3 id="day-1"&gt;Day 1&lt;/h3&gt;
&lt;p&gt;第一天開始時因為技術問題卡了十幾分鐘&lt;br&gt;
倒是有會眾開始詢問，有沒有人有 vga-to-hdmi 轉接線&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's just like being there in person - "does someone have the correct vga-to-hdmi adaptor?" 🙂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;EuroPython 就連實體會議找不到轉接線都模擬了（誤&lt;br&gt;
大家都在等有沒有會眾剛好有帶 HDMI 線現場救援（？？？&lt;br&gt;
有跟上這段討論真的超有趣 😆&lt;/p&gt;
&lt;p&gt;開場結束後，馬上又遇到下一個問題&lt;br&gt;
連接線找到了，但找不到講者 😱&lt;br&gt;
第一場 Keynote Speaker 就直接 no show 了，真的有點尷尬 @@&lt;/p&gt;
&lt;p&gt;因為時差的關係，大概會有三分之一的演講完全沒機會聽到&lt;br&gt;
晚上我又另外有事，第一天沒聽到什麼演講&lt;br&gt;
這兩場是我還有時間做筆記覺得也蠻不錯的演講&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/europython-2020/2020/07/clean-architectures-in-python/"&gt;Clean Architectures in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/europython-2020/2020/07/practical-optimisations-for-pandas/"&gt;Practical Optimisations for Pandas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我超佩服 @ongchinhwee&lt;br&gt;
她每個研討會都能在 twitter 上做超多超快的筆記&lt;br&gt;
今年她在 PyCon Taiwan 演講完，要好好跟她請教怎麼辦到的 XD&lt;/p&gt;
&lt;h3 id="day-2"&gt;Day 2&lt;/h3&gt;
&lt;h4&gt;Community-oriented conference status during COVID-19&lt;/h4&gt;
&lt;p&gt;Noah 分享了亞太地區 PyCon 的近況&lt;br&gt;
台灣是亞太地區唯一能辦實體 PyCon&lt;br&gt;
搞不好有機會是 2020 疫情開始後，唯一一場能辦實體的 PyCon&lt;/p&gt;
&lt;h4&gt;How to Avoid Becoming a 10x Engineer&lt;/h4&gt;
&lt;p&gt;這場演講頻道的討論超熱鬧&lt;br&gt;
看來大家應該都遇過了 10x Engineer&lt;br&gt;
寫 code 是一般人的時倍快，製造的 bug 是十倍快&lt;/p&gt;
&lt;h4&gt;Live-coding a music synthesizer&lt;/h4&gt;
&lt;p&gt;原本應該要去聽 Advanced Infrastructure Management in Kubernetes using Python&lt;br&gt;
但這場從 &lt;code&gt;ni-peek&lt;/code&gt; 看到的截圖實在太有趣了，就來看 Ram Rachum 如何現場完成合音器&lt;/p&gt;
&lt;p&gt;&lt;img alt="music" src="/images/posts-image/2020-07-28-euro-python-2020/music.png"&gt;&lt;/p&gt;
&lt;h4&gt;Python Table Manners: Cut the Cookie Gracefully&lt;/h4&gt;
&lt;p&gt;這場是我自己的演講 XD&lt;br&gt;
雖然講過幾次了，而且又是線上的&lt;br&gt;
但老實說還是稍微會有點緊張&lt;/p&gt;
&lt;p&gt;不過在我的頻道中，討論算是還蠻熱烈的&lt;br&gt;
也被問了蠻多問題的&lt;br&gt;
其中一個問題是「為什麼要使用 invoke ，而不用可以跟 poetry 整合的 &lt;a href="https://github.com/illBeRoy/taskipy"&gt;taskipy&lt;/a&gt;」&lt;br&gt;
恩...&lt;br&gt;
就只是單純因為我不知道有這個東西 XD&lt;/p&gt;
&lt;p&gt;就會眾的反應來看，大致上這場演講是成功的&lt;br&gt;
一開始構思這場演講的時候，也會擔心內容會不會不夠深入&lt;br&gt;
但介紹了這麼多工具，總會有一兩個是會眾不知道吧！&lt;br&gt;
不然帶走我的 &lt;a href="https://github.com/Lee-W/cookiecutter-python-template"&gt;cookiecutter template&lt;/a&gt; 還是能省下一些重造輪子的時間&lt;/p&gt;
&lt;h3 id="running-europython-2020-as-an-online-conference"&gt;Running EuroPython 2020 as an online conference&lt;/h3&gt;
&lt;p&gt;這場演講外，大會主席還給了 &lt;strong&gt;EuroPython 2021: Help us build the next edition!&lt;/strong&gt; 的演講&lt;br&gt;
除了講今年線上會議遇到的困難，還招募了明年有意願來籌備會議的會眾&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ep2020.europython.eu/media/conference/slides/7tiTuRY-running-europython-2020-as-an-online-conference.pdf"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中有提到為什麼 2020 還是要收錢&lt;br&gt;
因為如果今年不收錢了，以後如果突然要收錢就會變得很困難&lt;br&gt;
大概就跟調降健保費就漲不回去的概念是一樣的&lt;br&gt;
對於一個組織跟研討會的存續其實是不好的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can handle free, that's fine, I still believe that the free for all is going in the wrong direction. It's likely that we will stay in this situation for a longer while and unless you plan for it longer term, running free events is going to create too much loss for the orgs behind the conference to stay alive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，還有一個問題很有趣&lt;br&gt;
如果開啟 Zoom 會議的主持人電腦當機怎麼辦？&lt;br&gt;
這時候會不會講者的演講就突然中斷了&lt;br&gt;
這還真的是我完全沒想過的問題&lt;br&gt;
他們的解法是直接用雲端服務開 VM 來開 Zoom 的會議避免掉這樣的問題&lt;/p&gt;
&lt;h4&gt;Making Pandas Fly&lt;/h4&gt;
&lt;p&gt;講者 Ian Ozsvald 同時也是 High Performance Python 的作者&lt;br&gt;
這場主要談如何讓 Pandas 更有效率，大多都是蠻泛用的技巧，算是蠻有收穫的&lt;br&gt;
筆記我放在 &lt;a href="https://wei-lee.me/pycon-note/posts/europython-2020/2020/07/making-pandas-fly/"&gt;Making Pandas Fly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果覺得這場演講對你有幫助，可以寄明信片給 Ian&lt;br&gt;
Ian 很喜歡收明信片 XD&lt;/p&gt;
&lt;h4&gt;Lightning Talk&lt;/h4&gt;
&lt;p&gt;除了演講外，我也報名了 Lightning Talk&lt;br&gt;
在一天開始的某一個時段，開放一個 Google Sheet 讓大家填，先搶先贏&lt;/p&gt;
&lt;p&gt;我的內容當然是繼續宣傳 &lt;a href="https://github.com/commitizen-tools"&gt;commitizen-tools&lt;/a&gt; XD&lt;br&gt;
不過用英文演講又要 Live Demo 果然還是需要準備一下&lt;br&gt;
即興上場還是會有點卡&lt;/p&gt;
&lt;h4&gt;Guido van Rossum Q&amp;amp;A&lt;/h4&gt;
&lt;p&gt;&lt;img alt="guido" src="/images/posts-image/2020-07-28-euro-python-2020/guido.png"&gt;&lt;/p&gt;
&lt;p&gt;Guido 的訪談算是第二天的重頭戲，稍微紀錄一下我比較有印象的內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python will always be dynamic language. Type needs to be optional.&lt;/li&gt;
&lt;li&gt;對於新進的軟體工程師，推薦可以看 &lt;a href="http://neopythonic.blogspot.com/2016/04/kings-day-speech.html"&gt;King's Day Speech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: 你能想到你最不喜歡 Python 哪嗎?&lt;ul&gt;
&lt;li&gt;A: 目前沒想法，抱歉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="developments-sprint"&gt;Developments Sprint&lt;/h3&gt;
&lt;p&gt;報名的方式很容易，只要到 &lt;a href="https://wiki.python.org/moin/EuroPython2020/Sprints"&gt;EuroPython 2020 Sprints&lt;/a&gt; 上面自己改文件就好&lt;br&gt;
順帶一提，今年 PyCon TW 的 Sprint 也是採用相似的形式 👉 &lt;a href="https://hackmd.io/w5hh0hUNQr65k4ayG2128Q?view"&gt;PyCon TW 2020 衝刺開發 Development Sprints&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一天的開始會請各個專案的主辦人介紹自己的專案是什麼&lt;br&gt;
除了專案以外，還有人帶初學者 session ，讓第一次參加的人可以更容易進入狀況&lt;br&gt;
算是蠻好的設計，也許我們可以來學一下 🤔&lt;/p&gt;
&lt;p&gt;&lt;img alt="sprint" src="/images/posts-image/2020-07-28-euro-python-2020/sprint.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;今年線上的 Sprint 好像沒有很多人參與&lt;br&gt;
也可能是 commitizen 的 Sprint 真的太邊緣了.....&lt;br&gt;
從頭到尾就只有我跟作者 Santi 兩個人在寫&lt;br&gt;
中間會有人突然跳進來，但他們都一語不發就又跳出去了 0.0&lt;/p&gt;
&lt;p&gt;雖然我們邊緣，我們還是解決了超多 issue！&lt;br&gt;
這兩天把 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 1/3 的 open issue 解掉&lt;br&gt;
而且釋出 2.0&lt;br&gt;
邊緣歸邊緣，我們還是很有產出的！&lt;br&gt;
&lt;img alt="commitizen result" src="/images/posts-image/2020-07-28-euro-python-2020/commitizen result.png"&gt;&lt;/p&gt;
&lt;p&gt;Sprint 的中間還有個有趣的小插曲&lt;br&gt;
因為大家很好奇怎麼做 &lt;a href="https://zh.wikipedia.org/wiki/%E7%91%AA%E9%BB%9B%E8%8C%B6"&gt;mate&lt;/a&gt;&lt;br&gt;
第二天的晚上，就突然開了一個做瑪黛茶的 Open Space XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="mate annonucement" src="/images/posts-image/2020-07-28-euro-python-2020/mate annonucement.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mate open space" src="/images/posts-image/2020-07-28-euro-python-2020/mate open space.png"&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category></entry><entry><title>Remote Python Pizza 🍕 2020</title><link href="https://blog.wei-lee.me/posts/tech/2020/05/remote-python-pizza-2020" rel="alternate"></link><published>2020-05-03T16:52:00+08:00</published><updated>2020-05-03T16:52:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-05-03:/posts/tech/2020/05/remote-python-pizza-2020</id><summary type="html">&lt;p&gt;上週六參加了第一場遠端的 Python 研討會 &lt;a href="https://remote.python.pizza/"&gt;Remote Python Pizza&lt;/a&gt;&lt;br&gt;
由於疫情的關係，國外的 PyCon 大多轉往線上或取消&lt;br&gt;
雖然目前還不確定今年台灣的狀況會如何&lt;br&gt;
但先觀摩一下其他社群怎麼做的，對我們也很有幫助&lt;/p&gt;
</summary><content type="html">&lt;p&gt;上週六參加了第一場遠端的 Python 研討會 &lt;a href="https://remote.python.pizza/"&gt;Remote Python Pizza&lt;/a&gt;&lt;br&gt;
由於疫情的關係，國外的 PyCon 大多轉往線上或取消&lt;br&gt;
雖然目前還不確定今年台灣的狀況會如何&lt;br&gt;
但先觀摩一下其他社群怎麼做的，對我們也很有幫助&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;整體的體驗比我想像的好了不少，我還蠻享受 Remote Python Pizza 的&lt;br&gt;
雖然只是透過螢幕跟文字，還是能感受到整個社群的交流&lt;br&gt;
或許這在疫情趨緩後，也可以作為研討會的另一種標準&lt;br&gt;
雖然少了實體的交流，但不用長途跋涉就可以集結全世界的大大們，其實也很方便&lt;br&gt;
而針對時差這件事，他們也有在議程表上標上 UTC 跟使用者的當地時間，這在遠端研討會上就變得很必要&lt;/p&gt;
&lt;p&gt;會眾交流主要是透過 &lt;a href="https://discordapp.com/"&gt;Discord&lt;/a&gt;&lt;br&gt;
不管是要回報 CoC 、對講者提問、工作人員休息室...等，都有專屬的頻道&lt;br&gt;
盡可能將實體會議的元素都帶進來，其實還蠻有趣的&lt;/p&gt;
&lt;p&gt;演講則是給主辦人先給講者跟主持人 Zoom 的連結&lt;br&gt;
講者演講前的 30 分鐘，就先加入 Zoom 待命，接著把影片串到 Youtube 上讓會眾觀看&lt;/p&gt;
&lt;p&gt;Remote Python Pizza 的時間非常緊湊&lt;br&gt;
每一場演講只有十分鐘，演講之間的休息只有兩分鐘&lt;br&gt;
因為也沒有實際換場的必要，所以這段就很考驗主持人的技術了&lt;br&gt;
&lt;a href="https://pyjok.es/"&gt;pyjokes&lt;/a&gt; 對於英語系的會議，應該會很有幫助 XD&lt;/p&gt;
&lt;p&gt;因為時差的關係，開始的時候已經是下午四點&lt;br&gt;
大概聽到八點就開始覺得有點累了&lt;br&gt;
不過坐在客廳用電視投影演講是真的還蠻爽的 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="tv" src="/images/posts-image/2020-05-03-remote-python-pizza/tv.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;為了響應 Remote Python Pizza ，我當天的晚餐也是吃 Pizza&lt;br&gt;
而且 Discord 中就有一個 &lt;code&gt;#cafeteria&lt;/code&gt; 頻道，讓大家曬自己的 Pizza 照&lt;br&gt;
其實還蠻 High 的 XD&lt;br&gt;
我覺得這是線上會議&lt;strong&gt;鼓勵會眾互動非常棒的設計&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pizza" src="/images/posts-image/2020-05-03-remote-python-pizza/pizza.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;第一場 Hynek 的 &lt;em&gt;On the Meaning of Version Numbers&lt;/em&gt; 就先介紹了 &lt;a href="https://semver.org/"&gt;SemVar&lt;/a&gt;&lt;br&gt;
主要說大部分的專案都沒辦法用好 SemVar ，所以 SemVar 可能太難遵守，不見得是一個很好的作法&lt;br&gt;
可以改成使用 &lt;a href="https://calver.org/"&gt;CalVer&lt;/a&gt;&lt;br&gt;
在一開始我會提到的 SemVar 就好好的被打臉了一波 XDDD&lt;/p&gt;
&lt;p&gt;第二場講者沒來，所以就跳過直接換我，害我錯愕了一下&lt;br&gt;
一場演講只要十分鐘，完全是個適合推廣 &lt;a href="https://github.com/commitizen-tools"&gt;commitizen-tools&lt;/a&gt; 的好機會&lt;br&gt;
就毅然決然的投稿了 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="my-avatar" src="/images/posts-image/2020-05-03-remote-python-pizza/my-avatar.jpg"&gt;&lt;/p&gt;
&lt;p&gt;不過真的沒想到，官網會直接用我 Twitter 的大頭貼＠＠&lt;br&gt;
不過既然都被用了兵長的頭貼，我就順勢穿著調查兵團的披風來給演講了 XD&lt;br&gt;
有點久沒講英文，還是覺得稍微有點卡&lt;br&gt;
倒是我在演講中提到還是 beta 的自動產生變更日誌（changelog）功能&lt;br&gt;
剛好在今天正式釋出了，快點來試試看吧 🤩&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;commitizen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Disconnect3d 給的 &lt;em&gt;sudo python is a trap, use isolate mode&lt;/em&gt; 是我印象最深刻的一場&lt;br&gt;
現場 demo 如果你使用了 &lt;code&gt;sudo python&lt;/code&gt;，駭客多輕鬆就可以駭入你的電腦&lt;br&gt;
所以不要使用 &lt;code&gt;sudo python&lt;/code&gt; 啊！&lt;br&gt;
&lt;img alt="sudo-python-is-a-trap" src="/images/posts-image/2020-05-03-remote-python-pizza/sudo-python-is-a-trap.jpg"&gt;&lt;/p&gt;
&lt;p&gt;整體節奏太緊湊，實在沒什麼時間好好做筆記&lt;br&gt;
之後再找個時間把比較有趣的內容補起來&lt;/p&gt;
&lt;p&gt;每一場演講結束後&lt;br&gt;
除了在 Zoom 中的主持人會拍手外，大家會在 &lt;code&gt;#question-answer&lt;/code&gt; 頻道洗一波 👏 的 emoji&lt;br&gt;
其實還蠻可愛 XD&lt;br&gt;
大家也能在這個頻道直接堆剛講完的講者提問&lt;br&gt;
另外也有 &lt;code&gt;#slide&lt;/code&gt; 頻道，讓大家快速找到講者的投影片&lt;br&gt;
講者也可以在結束後，創一個 &lt;code&gt;#talk-*.&lt;/code&gt; (e.g., &lt;code&gt;#talk-commitizen&lt;/code&gt;) 的頻道討論演講相關的內容&lt;br&gt;
以講者的角度來說，我覺得這裡的交流甚至有機會比實體會議更多，是個蠻好的作法&lt;/p&gt;
&lt;p&gt;中間倒是有個小插曲，直播到一半就被 Youtube 封鎖了......&lt;br&gt;
最後發現原因是直播時不能開 &lt;code&gt;Made for Kids&lt;/code&gt;，很容易被封鎖&lt;br&gt;
而且這還是預設值，要自己記得關掉＠＠&lt;br&gt;
這倒是可以作為一個警示，線上會議要多準備幾套備用的方案&lt;/p&gt;
&lt;p&gt;大概就是這樣&lt;br&gt;
因為時差的關係，我大概撐到 12 點就差不多了&lt;br&gt;
畢竟整個會議有 50 場演講，延續了 12 個小時&lt;br&gt;
要全部參加完實在太累了&lt;br&gt;
之後再來補帶吧&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category></entry><entry><title>Python Table Manners - 文件</title><link href="https://blog.wei-lee.me/posts/tech/2020/04/python-table-manners-documentation" rel="alternate"></link><published>2020-04-15T19:13:00+08:00</published><updated>2020-10-04T16:49:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-04-15:/posts/tech/2020/04/python-table-manners-documentation</id><summary type="html">&lt;p&gt;Python 開源專案中，&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; 是很常見的文件產生工具&lt;br&gt;
它能將 &lt;a href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText&lt;/a&gt; 寫成的文件轉成網頁&lt;br&gt;
&lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt; 也直接支援 Sphinx 產生的網頁&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Python 開源專案中，&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; 是很常見的文件產生工具&lt;br&gt;
它能將 &lt;a href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText&lt;/a&gt; 寫成的文件轉成網頁&lt;br&gt;
&lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt; 也直接支援 Sphinx 產生的網頁&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;但我今天要介紹的工具是 &lt;a href="https://www.mkdocs.org/"&gt;mkdocs&lt;/a&gt;&lt;br&gt;
最簡單的原因就是，我只會寫 Markdown 不會寫 reStructuredText XD&lt;br&gt;
Guido 也說簡單一點的文件可以使用 Markdown 而不需使用 Shpinx&lt;br&gt;
（我又要搬同一張截圖出來救援了 XD）&lt;/p&gt;
&lt;p&gt;&lt;img alt="because-guido-say-so" src="/images/posts-image/2020-02-22-python-table-manner-series/because-guido-say-so.png"&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;修改網站名稱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;增加頁面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;內部連結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;更改主題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;輸出靜態網頁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github-page"&gt;部署至 GitHub Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mkdocsyml"&gt;其他 mkdocs.yml 常用設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus"&gt;Bonus: 徽章&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_9"&gt;自製測試覆蓋率徽章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;安裝&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;mkdocs&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;使用&lt;/h2&gt;
&lt;p&gt;這次依然是以將 mkdocs 運用到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 為例子&lt;br&gt;
在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/3fab5b9e7171d8302b012ad40ec1292d99c297a0"&gt;commit 3fab5b&lt;/a&gt; 版之後產生將文件從 &lt;code&gt;README.md&lt;/code&gt; 移動到 &lt;code&gt;docs&lt;/code&gt; 並產生 GitHub Page&lt;/p&gt;
&lt;h3 id="_3"&gt;初始化&lt;/h3&gt;
&lt;p&gt;首先進到專案資料夾中，初始化 mkdocs 需要的檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行後，資料夾會多出以下兩個檔案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdocs.yml&lt;/code&gt;: mkdocs 的設定檔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc/index.md&lt;/code&gt;: 空白的範例文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;透過這個指令在本機將伺服器跑起來&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;mkdocs&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打開瀏覽器，進入 &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt; 就能看到最初始的頁面&lt;/p&gt;
&lt;p&gt;&lt;img alt="initial document" src="/images/posts-image/2020-02-22-python-table-manner-series/initial document.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;修改網站名稱&lt;/h3&gt;
&lt;p&gt;初始的 &lt;code&gt;mkdocs.yml&lt;/code&gt; 預設只會有這一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;My Docs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;指的是文件的頁面名稱，先把它改成專案的名稱&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;PyCon TW post-event report generator (rg-cli)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;增加頁面&lt;/h3&gt;
&lt;p&gt;因為 GitHub 也會讀 &lt;code&gt;docs/READMD.md&lt;/code&gt; 作為進入專案時看到的文件&lt;br&gt;
為了減少維護文件的時間，可以將 &lt;code&gt;README.md&lt;/code&gt; 移動到 &lt;code&gt;docs&lt;/code&gt; ，並取代掉 &lt;code&gt;index.md&lt;/code&gt; 做為首頁&lt;/p&gt;
&lt;p&gt;因為原先在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 中的 &lt;code&gt;README.md&lt;/code&gt; 有點長&lt;br&gt;
我將 &lt;strong&gt;How to contribute&lt;/strong&gt; 的內容拆出來放到 &lt;code&gt;contributing.md&lt;/code&gt;&lt;br&gt;
將檔案命名成 &lt;code&gt;contributing.md&lt;/code&gt; 在 GitHub 開 issue 時自動出現這個頁面的連結（See more 👉 &lt;a href="https://help.github.com/en/github/building-a-strong-community/setting-guidelines-for-repository-contributors"&gt;Setting guidelines for repository contributors&lt;/a&gt;）&lt;br&gt;
至於要怎麼寫好 &lt;code&gt;contributing.md&lt;/code&gt; 則可以參考 &lt;a href="https://mozillascience.github.io/working-open-workshop/contributing/"&gt;Wrangling Web Contributions: How to Build a CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── docs
│   ├── README.md
│   └── contributing.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 &lt;code&gt;mkdocs.yml&lt;/code&gt; 加入 &lt;code&gt;nav&lt;/code&gt; 參數，指定不同頁面對應的檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;PyCon TW post-event report generator (rg-cli)&lt;/span&gt;
&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;index.md&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Contributing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;contributing.md&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;位置是透過參數 &lt;code&gt;docs_dir&lt;/code&gt; 來決定相對路徑&lt;br&gt;
如果沒有設定，預設是相對於 &lt;code&gt;docs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="separate page" src="/images/posts-image/2020-02-22-python-table-manner-series/separate page.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;內部連結&lt;/h3&gt;
&lt;p&gt;撰寫文件時，為了讓使用者更容易找到其他頁面，會使用到內部連結&lt;br&gt;
這時只要在文件中使用跟 &lt;code&gt;mkdocs.yml&lt;/code&gt; 一樣的相對路徑即可&lt;/p&gt;
&lt;p&gt;e.g., 在 &lt;code&gt;README.md&lt;/code&gt; 連結到 &lt;code&gt;contributing.md&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Please see the [&lt;span class="nt"&gt;Contributing&lt;/span&gt;](&lt;span class="na"&gt;contributing.md&lt;/span&gt;) for further details.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_7"&gt;更改主題&lt;/h3&gt;
&lt;p&gt;mkdocs 預設有 &lt;code&gt;mkdocs&lt;/code&gt;, &lt;code&gt;readthedocs&lt;/code&gt; 兩種主題&lt;br&gt;
如果想嘗試其他主題則可以在 &lt;a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes"&gt;MkDocs Themes&lt;/a&gt; 找到&lt;br&gt;
以主題 &lt;a href="https://github.com/squidfunk/mkdocs-material"&gt;mkdocs-material&lt;/a&gt; 為例&lt;/p&gt;
&lt;p&gt;首先先將主題安裝到開發環境內&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;mkdocs-material&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 &lt;code&gt;mkdocs.yml&lt;/code&gt; 加上 &lt;code&gt;theme&lt;/code&gt; 參數&lt;br&gt;
需要注意的是這裡的 &lt;code&gt;name&lt;/code&gt; 不需要加上前綴的 &lt;code&gt;mkdocs-&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rg-cli&lt;/span&gt;
&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;index.md&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Contributing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;contributing.md&lt;/span&gt;
&lt;span class="nt"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;material&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="material theme" src="/images/posts-image/2020-02-22-python-table-manner-series/material theme.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;輸出靜態網頁&lt;/h3&gt;
&lt;p&gt;為了要能部署到其他服務 (e.g., GitHub Page）上，要先在本地將 Markdown 寫成的文件輸出成網頁&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;mkdocs&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著就可以在資料夾 &lt;code&gt;site&lt;/code&gt; 找到輸出的網頁&lt;br&gt;
因為 &lt;code&gt;site&lt;/code&gt; 的內容都會跟著 &lt;code&gt;docs&lt;/code&gt; 改變，專案中只需要留有原始的 Markdown 文件就好&lt;br&gt;
可以在 &lt;code&gt;.gitignore&lt;/code&gt; 加入 &lt;code&gt;site/&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;site/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下次輸出時，在指令後面加上 &lt;code&gt;--clean&lt;/code&gt; 就可以清空上次的內容，重新輸出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;mkdocs&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--clean
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="github-page"&gt;部署至 GitHub Page&lt;/h3&gt;
&lt;p&gt;在開源專案中，將文件部署到 GitHub Page 上是相當常見的&lt;br&gt;
mkdocs 也為我們考慮到這點&lt;/p&gt;
&lt;p&gt;只要在 &lt;code&gt;mkdocs.yml&lt;/code&gt; 加入專案的 remote 相關設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;repo_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/pycontw/pycontw-postevent-report-generator&lt;/span&gt;
&lt;span class="nt"&gt;remote_branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gh-pages&lt;/span&gt;
&lt;span class="nt"&gt;remote_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;並執行 &lt;code&gt;pipenv run mkdocs gh-deploy&lt;/code&gt; 就會自動將文件部署到 GitHub Page 上&lt;/p&gt;
&lt;p&gt;如果想更近一步透過 GitHub Action 來達到 push 原始碼，就自動產生 GitHub Page&lt;br&gt;
可以參考我之前寫的 &lt;a href="https://blog.wei-lee.me/posts/tech/2020/01/automate-publish-pelican-through-github-action"&gt;透過 GitHub Action 自動發佈 Pelican 部落格文章&lt;/a&gt;&lt;br&gt;
雖然裡面使用的例子是 Pelican ，但只要把建置頁面的指令換掉就可以了&lt;/p&gt;
&lt;h3 id="mkdocsyml"&gt;其他 mkdocs.yml 常用設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;site_description, site_author, copyright&lt;/li&gt;
&lt;li&gt;google_analytics&lt;/li&gt;
&lt;li&gt;markdown_extensions&lt;ul&gt;
&lt;li&gt;mkdocs 解析 Markdown 文件時要使用 &lt;a href="https://python-markdown.github.io/"&gt;Python Markdown&lt;/a&gt; 的 &lt;a href="https://python-markdown.github.io/extensions/"&gt;extension&lt;/a&gt; 和其設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugins&lt;ul&gt;
&lt;li&gt;預設會使用 &lt;a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Plugins#search--tables-of-content"&gt;search&lt;/a&gt; 套件，如果想使用其它套件可以在 &lt;a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Plugins"&gt;MkDocs-Plugins&lt;/a&gt; 找到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bonus"&gt;Bonus: 徽章&lt;/h2&gt;
&lt;p&gt;在開源專案中，常常可以見到一些有趣的徽章&lt;br&gt;
它們很可能就是用 &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; 產生的&lt;br&gt;
除了常見的徽章外，也可以透過修改 url 製作客製化的徽章&lt;/p&gt;
&lt;p&gt;像是在 markdown 文件加入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![&lt;span class="nt"&gt;shields badge&lt;/span&gt;](&lt;span class="na"&gt;https://img.shields.io/badge/&amp;lt;LABEL&amp;gt;-&amp;lt;MESSAGE&amp;gt;-&amp;lt;COLOR&amp;gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就會出現&lt;/p&gt;
&lt;p&gt;&lt;img alt="shields badge" src="https://img.shields.io/badge/&amp;lt;LABEL&amp;gt;-&amp;lt;MESSAGE&amp;gt;-&amp;lt;COLOR&amp;gt;"&gt;&lt;/p&gt;
&lt;h3 id="_9"&gt;自製測試覆蓋率徽章&lt;/h3&gt;
&lt;p&gt;最近發現另一個有趣的小工具 - &lt;a href="https://github.com/dbrgn/coverage-badge"&gt;coverage-badge&lt;/a&gt;&lt;br&gt;
它可以不透過 &lt;a href="https://codecov.io/"&gt;codecov&lt;/a&gt; 直接去讀 &lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt; 產生的 &lt;code&gt;.coverage&lt;/code&gt;  產生測試覆蓋率徽章&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;coverage-badge&lt;span class="w"&gt; &lt;/span&gt;--dev
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;coverage-badge&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;docs/coverage.svg
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/europython-2019/2020/03/publish-a-perfetc-python-package-on-pypi/"&gt;Publish a (Perfect) Python Package on PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/squidfunk/mkdocs-material"&gt;mkdocs-material&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shields.io/"&gt;shield.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Documentation"></category></entry><entry><title>Python Table Manners - 安全性檢查</title><link href="https://blog.wei-lee.me/posts/tech/2020/03/python-table-manners-security" rel="alternate"></link><published>2020-03-22T13:10:00+08:00</published><updated>2020-10-04T16:13:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-03-22:/posts/tech/2020/03/python-table-manners-security</id><summary type="html">&lt;p&gt;果然在沒有寫作松的督促下，馬上就拖稿了 XD&lt;br&gt;
接下來要介紹在 Python 專案中做安全性檢查的工具&lt;/p&gt;
</summary><content type="html">&lt;p&gt;果然在沒有寫作松的督促下，馬上就拖稿了 XD&lt;br&gt;
接下來要介紹在 Python 專案中做安全性檢查的工具&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#safety-"&gt;Safety - 檢查相依套件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;執行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bandit-"&gt;bandit - 程式碼靜態分析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;局部跳過檢查&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="safety-"&gt;Safety - 檢查相依套件&lt;/h2&gt;
&lt;p&gt;&lt;img alt="depbot" src="/images/posts-image/2020-02-22-python-table-manner-series/depbot.jpg"&gt;&lt;/p&gt;
&lt;p&gt;不知道大家有沒有在 GitHub 上看過這樣的畫面&lt;br&gt;
這個訊息告訴我們，專案的相依套件中可能有安全漏洞&lt;/p&gt;
&lt;p&gt;透過 &lt;a href="https://github.com/pyupio/safety"&gt;Safety&lt;/a&gt; 就能在本地做相依套件安全漏洞的檢查&lt;br&gt;
它會到 &lt;a href="https://github.com/pyupio/safety-db"&gt;safety-db&lt;/a&gt; 去查找已知的安全性漏洞&lt;br&gt;
這個資料庫則是從 &lt;a href="https://cve.mitre.org/"&gt;CVE&lt;/a&gt; (Common Vulnerabilities and Exposures) 整理出來的&lt;br&gt;
如果是免費版，一個月會更新一次資料庫&lt;br&gt;
付費版則可以達到即時更新&lt;/p&gt;
&lt;h3 id="_1"&gt;安裝&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;safety&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;執行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;safety&lt;span class="w"&gt; &lt;/span&gt;check
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="safety-not-found" src="/images/posts-image/2020-02-22-python-table-manner-series/safety-not-found.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/128d271942099b94faca3693d6c146c879e3b414"&gt;pycontw-postevent-report-generator commit 128d&lt;/a&gt; ，透過 safety 不會找到任何安全漏洞&lt;/p&gt;
&lt;p&gt;如果想要測試 Safety 的功能可以安裝套件 &lt;a href="https://pypi.org/project/insecure-package/"&gt;insecure-package&lt;/a&gt; (&lt;strong&gt;這個套件是真的存在的，而且是不安全的，僅作為測試用途&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;insecure-package&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再試一次就能看到 Safety 將 insecure-package 列為不安全的套件&lt;/p&gt;
&lt;p&gt;&lt;img alt="safety-found-insecure" src="/images/posts-image/2020-02-22-python-table-manner-series/safety-found-insecure.jpg"&gt;&lt;/p&gt;
&lt;p&gt;另外需要注意的是 &lt;code&gt;safety check&lt;/code&gt; 是對當前環境做檢查&lt;br&gt;
務必確定已經有進入專案的虛擬環境，不然 Safety 只會檢查到本機使用的套件有沒有漏洞&lt;/p&gt;
&lt;p&gt;如果想要對 &lt;code&gt;requriements.txt&lt;/code&gt; 做檢查，則可以加上參數 &lt;code&gt;-r&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 因為這個 case 不是針對 pipenv ，所以前面沒有加上 pipenv run&lt;/span&gt;
safety&lt;span class="w"&gt; &lt;/span&gt;check&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;雖然 Safety 並不支援對 Pipfile 進行檢查 (Ref: &lt;a href="https://github.com/pyupio/safety/issues/47"&gt;Add Pipfile support #47&lt;/a&gt;)，但 pipenv 就內建有安全性檢查的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;check
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="bandit-"&gt;bandit - 程式碼靜態分析&lt;/h2&gt;
&lt;p&gt;除了套件安全性的分析外，接著還能透過 &lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt; 來對自己的程式碼做靜態分析找出常見的漏洞&lt;/p&gt;
&lt;h3 id="_3"&gt;安裝&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;bandit&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;bandit&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="bandit-result" src="/images/posts-image/2020-02-22-python-table-manner-series/bandit-result.jpg"&gt;&lt;/p&gt;
&lt;p&gt;執行後就會看到一個列表，整理出專案中可能有的安全性漏洞&lt;br&gt;
每一個項目中會有以下五個欄位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Issue: 問題&lt;/li&gt;
&lt;li&gt;Severity: 嚴重性&lt;/li&gt;
&lt;li&gt;Confidence: 可信度&lt;/li&gt;
&lt;li&gt;Location: 位置（在程式碼的哪一行）&lt;/li&gt;
&lt;li&gt;More Info: 詳細的原因和可能的解決方案 （也可以從 &lt;a href="https://bandit.readthedocs.io/en/latest/plugins/#complete-test-plugin-listing"&gt;Complete Test Plugin Listing&lt;/a&gt; 找到全部的列表）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加上參數 &lt;code&gt;-i&lt;/code&gt; (可信度) 和 &lt;code&gt;-l&lt;/code&gt; （嚴重性），就可以讓 bandit 只回報特定程度的漏洞&lt;br&gt;
越多的 i / l 代表程度越高&lt;br&gt;
以下指令就是讓 bandit 只回報高嚴重性 (&lt;code&gt;-lll&lt;/code&gt;)、高可信度 (&lt;code&gt;-iii&lt;/code&gt;)的漏洞&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;bandit&lt;span class="w"&gt; &lt;/span&gt;-iii&lt;span class="w"&gt; &lt;/span&gt;-lll&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;局部跳過檢查&lt;/h3&gt;
&lt;p&gt;有時候 bandit 給的警告不會在所有狀況都適用&lt;br&gt;
以 &lt;a href="https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html#module-bandit.plugins.asserts"&gt;B101: assert_used&lt;/a&gt; 為例&lt;br&gt;
警告不該使用 &lt;code&gt;assert&lt;/code&gt;&lt;br&gt;
在使用 &lt;code&gt;python -o&lt;/code&gt; 指令產生優化過的 byte code 時，會跳過 &lt;code&gt;assert&lt;/code&gt;&lt;br&gt;
如果系統使用 &lt;code&gt;assert&lt;/code&gt; 來進行登入的檢查，就會讓使用者在完全沒驗證的情況下成功登入&lt;br&gt;
但大部分的時候，我們不太會這麼實作&lt;br&gt;
而 &lt;code&gt;assert&lt;/code&gt; 也是在測試中很常使用到的語法&lt;/p&gt;
&lt;p&gt;這時候就可以在專案的最上層加入設定檔 &lt;code&gt;.bandit&lt;/code&gt;&lt;br&gt;
而它的格式會長這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[bandit]
# 要執行 bandit 檢查的檔案或資料夾（逗號分隔）
targets:
# 跳過 bandit 檢查的檔案或資料夾（逗號分隔）
exclude:
# 要跳過的檢查種類 （逗號分隔）
skips:
# 要執行的檢查種類 （逗號分隔）
tests:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行 bandit 時要加上 &lt;code&gt;--ini .bandit&lt;/code&gt; 讓 bandit 知道要找這份設定檔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bandit&lt;span class="w"&gt; &lt;/span&gt;--ini&lt;span class="w"&gt; &lt;/span&gt;.bandit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不是整個檔案或種類要跳過，則可以在程式碼後面加上 &lt;code&gt;# nosec&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool/"&gt;Python Security Tool - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits/"&gt;Watch out for Safety Bandits! - PyCon AU 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://myapollo.com.tw/zh-tw/secure-your-python-code-with-bandit/"&gt;用 Bandit 靜態掃描工具，掃描 Python 專案中的安全性問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Security"></category></entry><entry><title>Python Table Manners - Commitizen: 規格化 commit message</title><link href="https://blog.wei-lee.me/posts/tech/2020/03/python-table-manners-commitizen" rel="alternate"></link><published>2020-03-01T00:45:00+08:00</published><updated>2020-07-19T16:47:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-03-01:/posts/tech/2020/03/python-table-manners-commitizen</id><summary type="html">&lt;p&gt;接續著前一篇的 pre-commit ，繼續談 git 相關的工具&lt;br&gt;
這篇來聊聊如何透過 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 規範 commit message&lt;br&gt;
還有規範過的 commit message 能拿來做什麼&lt;/p&gt;
</summary><content type="html">&lt;p&gt;接續著前一篇的 pre-commit ，繼續談 git 相關的工具&lt;br&gt;
這篇來聊聊如何透過 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 規範 commit message&lt;br&gt;
還有規範過的 commit message 能拿來做什麼&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#commit-message"&gt;為什麼要好好寫 commit message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commitizen"&gt;Commitizen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commitizen_1"&gt;安裝與設定 Commitizen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commitizen_2"&gt;使用 Commitizen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-message_1"&gt;強制檢查 commit message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;自動提升版本號&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit"&gt;客製化 commit 規範&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;直接在設定檔設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-python"&gt;將客製化的 commit 規範寫成 Python 套件發佈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;自動產生更新日誌（Changelog）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commitizen_3"&gt;其他 commitizen 指令和常用參數&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commitizen_4"&gt;關於 commitizen 的雜談&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#java-script-commitizen"&gt;為什麼不用 Java Script 的 commitizen 就好了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;持續貢獻&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="commit-message"&gt;為什麼要好好寫 commit message&lt;/h2&gt;
&lt;p&gt;&lt;img alt="no-good-commit" src="/images/posts-image/2020-02-22-python-table-manner-series/no-good-commit.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如果不好好寫有意義的 commit message，每次都只用 "update" 當訊息&lt;br&gt;
當你下了 &lt;code&gt;git log&lt;/code&gt; 指令，就會看到一堆 "update"&lt;br&gt;
然後哪天系統出錯的時候，你也會不知道要回朔到哪一個版本&lt;/p&gt;
&lt;p&gt;&lt;img alt="bad-commit" src="/images/posts-image/2020-02-22-python-table-manner-series/bad-commit.jpg"&gt;&lt;br&gt;
(from &lt;a href="https://github.com/hackjutsu/bad-commit-example/commits/master"&gt;hackjutsu/bad-commit-example&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;撰寫好的 commit message，除了讓未來的自己知道自己在幹嘛&lt;br&gt;
也能讓團隊之間的溝通更順利&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送 Pull Request / Merge Request 時，審核者能更快速地知道增加了哪些功能&lt;/li&gt;
&lt;li&gt;新進人員可以從過往的 commit message 找到整個專案發展的脈絡，更容易上手專案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="commitizen"&gt;Commitizen&lt;/h2&gt;
&lt;p&gt;除了提供的 commit message 撰寫建議和規範 （👉 &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/writing_commits/"&gt;Writing commits&lt;/a&gt;）&lt;br&gt;
&lt;a href="https://commitizen-tools.github.io/commitizen/"&gt;commitizen&lt;/a&gt; 更進一步提供互動式介面，讓使用者可以夠輕鬆地產生符合規範的 commit message&lt;br&gt;
同時也整合了前一篇所提到的 pre-commit hook，避免使用者將不符合規範的 commit message 寫入&lt;br&gt;
除了採用來自 Angular 社群的 &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits&lt;/a&gt; (約定式提交) 外， commitizen 提供了高度的客製化，讓每個團隊或專案都可以依照自己的需求，撰寫相對應的規範&lt;br&gt;
規範了 commit message 後，除了增加可讀性增加外，也讓訊息有可以被解析做其他運用&lt;br&gt;
e.g., 提升版本號, 產生更新日誌&lt;/p&gt;
&lt;h2 id="commitizen_1"&gt;安裝與設定 Commitizen&lt;/h2&gt;
&lt;p&gt;跟 invoke 一樣，我會把 commitizen 同時安裝在系統和虛擬環境&lt;br&gt;
安裝在虛擬環境主要是為了能在 CI/CD 伺服器上自動升版&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 commitizen 到系統&lt;/span&gt;
pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;commitizen

&lt;span class="c1"&gt;# 安裝 commitizen 到虛擬環境中&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;commitizen&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在專案中第一次使用 commitizen 可以使用初始化指令來完成基本的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一開始會先問想使用哪種設定檔&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-1" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-1.png"&gt;&lt;/p&gt;
&lt;p&gt;接著要選擇一套 commit 規範，預設有三種&lt;br&gt;
如果有安裝其他的 commit 規範，它們也會出現在選項中（See more 👉 &lt;a href="https://commitizen-tools.github.io/commitizen/third-party-commitizen/"&gt;Third-Party Commitizen Templates&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-2" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-2.png"&gt;&lt;/p&gt;
&lt;p&gt;再來會問最新的 git tag 是否為最新的版本號&lt;br&gt;
如果不是，就會列出 &lt;code&gt;git tag&lt;/code&gt; 所有的結果&lt;br&gt;
如果完全沒有用過 git tag，預設會是 &lt;code&gt;0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-3" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;之後會詢問版本的格式要是如何&lt;br&gt;
常用的格式有 &lt;code&gt;$version&lt;/code&gt; (e.g., &lt;code&gt;1.0.0&lt;/code&gt;) 或 &lt;code&gt;v$version&lt;/code&gt; (e.g., &lt;code&gt;v1.0.0&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-4" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;最後會確認要不要將驗證 commit message 的 pre-commit hook 設定好&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-5.jpg" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;完成後就會看到以下畫面&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-6.jpg" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-6.jpg"&gt;&lt;/p&gt;
&lt;p&gt;相對應的設定也會加入到設定檔 &lt;code&gt;pyproject.toml&lt;/code&gt; (或 &lt;code&gt;.cz.toml&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.commitizen]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cz_conventional_commits&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0.2&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;tag_format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$version&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="commitizen_2"&gt;使用 Commitizen&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 使用 commitizen 做 commit&lt;/span&gt;
&lt;span class="c1"&gt;# (也可以用簡短版的 cz c)&lt;/span&gt;
cz&lt;span class="w"&gt; &lt;/span&gt;commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以 &lt;code&gt;cz_conventional_commits&lt;/code&gt; 這套規則為例&lt;br&gt;
會先詢問這次的 commit 做了哪一種改動&lt;/p&gt;
&lt;p&gt;&lt;img alt="commitizen-1" src="/images/posts-image/2020-02-22-python-table-manner-series/commitizen-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接著會要求輸入這次改動各項細節&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scope： 改動範圍&lt;/li&gt;
&lt;li&gt;Subject： 簡短敘述這次的改動&lt;/li&gt;
&lt;li&gt;Body： 詳細敘述這次的改動&lt;/li&gt;
&lt;li&gt;Is this a BREAKING CHANGE？： 這是否是一個重大改動&lt;/li&gt;
&lt;li&gt;Footer： 其他參考資訊，通常可以將 Issue 的編號寫在這&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="commitizen-2-w1024" src="/images/posts-image/2020-02-22-python-table-manner-series/commitizen-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;回答完，就會產生 commit message &lt;strong&gt;feat(blog-post): update python table manners series&lt;/strong&gt;&lt;br&gt;
最下方則是 pre-commit hook 的 commit message 格式檢查通過&lt;/p&gt;
&lt;h2 id="commit-message_1"&gt;強制檢查 commit message&lt;/h2&gt;
&lt;p&gt;剛開始引入 commitizen 時，可能會常常忘記要使用它來做 commit&lt;br&gt;
這時候就能使用到前一篇提到的 &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;br&gt;
雖然在 2.0.0 後可以透過 &lt;code&gt;cz init&lt;/code&gt; 初始設定好，但還是說明如果事後才想設定要怎麼做&lt;/p&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 中有加入 &lt;a href="https://github.com/commitizen-tools/commitizen/blob/master/.pre-commit-hooks.yaml"&gt;.pre-commit-hooks.yaml&lt;/a&gt;&lt;br&gt;
因此只要在專案的 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; 加入以下這段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;repos&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- repo&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/commitizen-tools/commitizen&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rev&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1.23.1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;commitizen&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;commit-msg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;並透過 pre-commit 設定 commit-msg 階段的 git hook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;commit-msg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 commit 執行完，要進訊息寫入前&lt;br&gt;
git 會執行 &lt;code&gt;cz check&lt;/code&gt; 來確認輸入的訊息是否符合規範&lt;br&gt;
如果不符合規範就會拒絕這次的 commit&lt;/p&gt;
&lt;p&gt;需要注意的是檢查會在產生 commit message 後才能執行&lt;br&gt;
因此要設定 commit-msg 階段的 git hook （i.e., &lt;code&gt;.git/hooks/commit-msg&lt;/code&gt;）&lt;br&gt;
如果只下 &lt;code&gt;pipenv run pre-commit install&lt;/code&gt; 是不會成功的&lt;/p&gt;
&lt;p&gt;接著可以開始聊勞，這些 commit message 能做什麼應用了&lt;/p&gt;
&lt;h2 id="_1"&gt;自動提升版本號&lt;/h2&gt;
&lt;p&gt;與 commit message 規範可以做客製化不同&lt;br&gt;
commitizen 目前並沒有提供不同版本表示方式的客製化&lt;br&gt;
一律都會遵守 &lt;a href="https://semver.org/"&gt;Semantic Version&lt;/a&gt; （語意化版本）&lt;br&gt;
這種版本號採用 &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; (e.g., &lt;code&gt;1.10.20&lt;/code&gt;) 的格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAJOR&lt;/code&gt;： 重大改動，不向後相容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINOR&lt;/code&gt;： 新增功能，必須向後相容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;： 修正功能，必須向後相容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以 commitizen 預設使用的 &lt;code&gt;cz_conventional_commits&lt;/code&gt; 來說，相對應的 commit 種類和應該提升的版本號如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAJOR&lt;/code&gt;: BREAKING CHANGE (每次 commit 都會問的，這次是否為重大改動)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINOR&lt;/code&gt;: feat&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;: fix, refactor, perf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;p.s. conventional commit 可以有很多種延伸，這裡指的只是 commitizen 採用的版本&lt;/p&gt;
&lt;p&gt;每次提升版本號只會提升 1 ，而且以最前面的為主&lt;br&gt;
e.g., 要 merge 回 master 的改動中出現 BREAKING CHANGE，不管其他有多少 feat 或 fix ，都只會讓 &lt;code&gt;MAJOR&lt;/code&gt; 提升 1&lt;/p&gt;
&lt;p&gt;目前只有 &lt;code&gt;cz_conventional_commits&lt;/code&gt; 有預設的版本對應&lt;br&gt;
如果為 &lt;code&gt;cz_jira&lt;/code&gt;, &lt;code&gt;cz_customize&lt;/code&gt; 或自己客製化規則加上提升版本的功能，可以參考commitizen 文件中 &lt;a href="https://commitizen-tools.github.io/commitizen/customization/"&gt;customization&lt;/a&gt; ，並加上 &lt;code&gt;bump_pattern&lt;/code&gt;（比對 commit 是哪個種類） 和 &lt;code&gt;bump_map&lt;/code&gt; （哪個種類的 commit 要提升哪個版本號）&lt;/p&gt;
&lt;p&gt;稍微解釋了一下提升版本的規則，接下來要來講該如何使用了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;bump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一次提升版本的時候，會先確認目前在設定檔 (e.g., &lt;code&gt;pyproject.toml&lt;/code&gt;）中的版本是否已經有相對應的 git tag&lt;/p&gt;
&lt;p&gt;如果沒有則會確認這是否是第一次為這個專案加上 git tag&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Tag v0.0.1 could not be found.
Possible causes:
- version in configuration is not the current version
- tag_format is missing, check them using &amp;#39;git tag --list&amp;#39;

? Is this the first tag created?  (Y/n)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果想跳過這個確認可以在後面加上參數 &lt;code&gt;--yes&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;bump&lt;span class="w"&gt; &lt;/span&gt;--yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著 commitizen 就會新增一個相對應的 git tag 和更新設定檔中的版本號&lt;br&gt;
因為要將設定檔中的改動儲存， commitizen 這時會再新增一個 commit&lt;br&gt;
(e.g., &lt;code&gt;bump: version 0.0.1 → 0.0.2&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;除了設定檔中的版本號外，有時候專案本身也有其他地方會使用到版本號&lt;br&gt;
如果每次透過 commitizen 提升版本號後，還要手動更新其他部分，就失去了自動的好處了&lt;br&gt;
所以 commitizen 另外提供了 &lt;code&gt;version_files&lt;/code&gt; 這個設定，將需要改動的檔案也寫進來&lt;br&gt;
commitizen 提升版本號時，就會一併更新檔案的內容&lt;br&gt;
（Read More 👉 &lt;a href="https://commitizen-tools.github.io/commitizen/bump/"&gt;bump&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;cz bump&lt;/code&gt; 指令雖然可以省下很多步驟&lt;br&gt;
但更好的做法是將自動升版加入到加入到持續整合（Continuous Integration）&lt;br&gt;
在 git repo 上將分支 merge 到 master 時，自動提升版本號&lt;br&gt;
因為會牽涉到各個不同平台的做法，不會敘述太多&lt;br&gt;
這裡附上 commitizen 文件中 &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/github_actions/"&gt;Github Actions&lt;/a&gt;, &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/gitlab_ci/"&gt;Gitlab CI&lt;/a&gt; 還有 &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/jenkins_pipeline/"&gt;Jenkins Pipeline&lt;/a&gt; 的做法&lt;/p&gt;
&lt;h2 id="commit"&gt;客製化 commit 規範&lt;/h2&gt;
&lt;p&gt;目前 commitizen 提供兩種方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接在設定檔設定 → 適合只需要改動問題，不需要使用到複雜的功能&lt;/li&gt;
&lt;li&gt;將 commit 規範寫成 Python 套件發佈 → 適合需要加入複雜的驗證&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_2"&gt;直接在設定檔設定&lt;/h3&gt;
&lt;p&gt;首先必須先將 name 指定到 &lt;code&gt;cz_customize&lt;/code&gt; 這套 commit 規範&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.commitizen]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cz_customize&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來要設定下面的欄位&lt;br&gt;
其中最重要的是 &lt;code&gt;message_template&lt;/code&gt;（支援&lt;a href="https://jinja.palletsprojects.com/en/2.11.x/"&gt;Jinja&lt;/a&gt;）&lt;br&gt;
以 &lt;code&gt;"{{change_type}}:{% if show_message %} {{message}}{% endif %}"&lt;/code&gt; 這個例子來說&lt;br&gt;
需要 &lt;code&gt;change_type&lt;/code&gt;, &lt;code&gt;show_message&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; 三個變數來產生 commit message&lt;/p&gt;
&lt;p&gt;（p.s. 如果想要使用驗證 commit message 的功能，則要更新 &lt;code&gt;schema_pattern&lt;/code&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.commitizen.customize]&lt;/span&gt;
&lt;span class="n"&gt;message_template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{change_type}}:{% if show_message %} {{message}}{% endif %}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;feature: this feature enable customize through config file&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;type&amp;gt;: &amp;lt;body&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;schema_pattern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(feature|bug fix):(&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;s.*)&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;bump_pattern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^(break|new|fix|hotfix)&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;bump_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;break&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAJOR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MINOR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fix&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PATCH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hotfix&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PATCH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;info_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cz_customize_info.txt&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;This is customized info&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;變數要在 &lt;code&gt;[[tool.commitizen.customize.questions]]&lt;/code&gt; 的區段作定義&lt;br&gt;
背後所使用的套件是 &lt;a href="https://github.com/tmbo/questionary"&gt;questionary&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;： 必須跟前面 &lt;code&gt;message_template&lt;/code&gt; 定義的一模一樣，而且裡面用到的變數都要有對應的問題能取得值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;： 顯示給使用者的問題&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;： &lt;a href="https://github.com/tmbo/questionary"&gt;questionary&lt;/a&gt; 中的問題型態&lt;/li&gt;
&lt;li&gt;其他欄位 (e.g., &lt;code&gt;choice&lt;/code&gt;) 則是靠 &lt;code&gt;type&lt;/code&gt; 來決定是否需要&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[tool.commitizen.customize.questions]]&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;change_type&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;feature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bug fix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Select the type of change you are committing&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[[tool.commitizen.customize.questions]]&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Body.&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[[tool.commitizen.customize.questions]]&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;confirm&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;show_message&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Do you want to add body message in commit?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定完之後，再使用 &lt;code&gt;cz commit&lt;/code&gt; 就可以看到客製化過後的問題了&lt;br&gt;
&lt;img alt="customize" src="/images/posts-image/2020-02-22-python-table-manner-series/customize.jpg"&gt;&lt;/p&gt;
&lt;h3 id="commit-python"&gt;將客製化的 commit 規範寫成 Python 套件發佈&lt;/h3&gt;
&lt;p&gt;這個做法比較複雜，也比較不常會用到，所以我只會概略地講&lt;br&gt;
（Read More 👉 &lt;a href="https://commitizen-tools.github.io/commitizen/customization/"&gt;Customization&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;我已經先將套件的架構驟寫成一個 &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.0/"&gt;cookiecutter&lt;/a&gt; 範本&lt;br&gt;
透過以下指令，可以進入 cookiecutter 的互動式介面，並初始化專案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cookiecutter&lt;span class="w"&gt; &lt;/span&gt;gh:Lee-W/commitizen_cz_template
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最主要需要實作的函式有 &lt;code&gt;questions&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;&lt;br&gt;
實作完成後，必須在要使用這個 commit 規範的環境安裝這個套件&lt;br&gt;
安裝之後會在 &lt;code&gt;cz ls&lt;/code&gt; 看到這個新的 commit 規範&lt;br&gt;
在設定檔中設定 &lt;code&gt;name&lt;/code&gt; 或在指令列加上參數 &lt;code&gt;-n name&lt;/code&gt; (e.g., &lt;code&gt;cz -n cz_test commit&lt;/code&gt;) 就可以開始使用&lt;/p&gt;
&lt;h2 id="changelog"&gt;自動產生更新日誌（Changelog）&lt;/h2&gt;
&lt;p&gt;commitizen 可以透過過往的 commit message 產生 &lt;a href="https://keepachangelog.com/en/1.1.0/"&gt;keep a changelog&lt;/a&gt; 格式的更新日誌&lt;/p&gt;
&lt;p&gt;透過以下指令，就能從最舊到最新的 commit message 產生更新日誌（預設是 &lt;code&gt;CHANGELOG.md&lt;/code&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cz&lt;span class="w"&gt; &lt;/span&gt;changelog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果已經有現成的 &lt;code&gt;CHANGELOG.md&lt;/code&gt;， 則可以使用 &lt;code&gt;cz changelog --incremental&lt;/code&gt; 指令&lt;/p&gt;
&lt;p&gt;commitizen 會試著找出文件中最新釋出版本 (e.g., &lt;code&gt;1.0.5&lt;/code&gt;) 的位置，將最新釋出版本以後的 commit 加入到更新日誌的最頂端&lt;/p&gt;
&lt;p&gt;例如目前有一個專案，最新的版本是 1.0.5，之後有 2 個 commit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feat: cool new features&lt;/li&gt;
&lt;li&gt;ci: update jenkins file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本的更新日誌&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;## 1.0.5&lt;/span&gt;
&lt;span class="gu"&gt;### Feat&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;old features
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;則 commitizen 在釋出 1.1.0 時，就會產生如下的更新日誌&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;## 1.1.0 (2020-07-19)&lt;/span&gt;

&lt;span class="gu"&gt;### Feat&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;new cool new features

&lt;span class="gu"&gt;## 1.0.5&lt;/span&gt;
&lt;span class="gu"&gt;### Feat&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;some old features
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為產生更新日誌，通常適合在升版後執行&lt;br&gt;
在 &lt;code&gt;cz bump&lt;/code&gt; 加上 &lt;code&gt;--changelog&lt;/code&gt; 參數就可以提升版本的同時，產生更新日誌&lt;/p&gt;
&lt;h2 id="commitizen_3"&gt;其他 commitizen 指令和常用參數&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cz bump&lt;/code&gt;： 提升版本號&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt;： 將提升版本號的訊息輸出到終端機，不會實際產生 tag 和改變檔案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--increment {MAJOR,MINOR,PATCH}&lt;/code&gt;： 提升特定版本號&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cz changelog&lt;/code&gt;: 產生更新日誌&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt;: 將產生的更新日誌書處到終端機，不產生或更新 &lt;code&gt;CHANGELOG.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cz -n NAME [command]&lt;/code&gt;： 使用不同的 commit 規則 （e.g., &lt;code&gt;cz -n cz_jira commit&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cz version&lt;/code&gt;： 顯示版本&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;（&lt;code&gt;--project&lt;/code&gt;）： 顯示專案版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;（&lt;code&gt;--commitizen&lt;/code&gt;）： 顯示 commitizen 版本（預設）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="commitizen_4"&gt;關於 commitizen 的雜談&lt;/h2&gt;
&lt;p&gt;我在 Taipei.py 第一次試講 Python Table Manners 時&lt;br&gt;
有一頁就提到了，雖然 Python 也有 commitizen 這個工具，但還不太成熟&lt;/p&gt;
&lt;p&gt;&lt;img alt="commitizen is not mature" src="/images/posts-image/2020-02-22-python-table-manner-series/not-mature-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;沒想到在 PyCon CA 的前一個禮拜我認真測試時&lt;br&gt;
才發現其實 commitizen 已經很夠用了，該有的功能都有&lt;br&gt;
只是我剛好都用一些奇怪的測試方式，測到一些 edge case&lt;br&gt;
這時就覺得信奉 Python （？？？）的我，好像應該好好的介紹 Python 的工具&lt;br&gt;
而不是 JavaScript 的 &lt;a href="https://github.com/commitizen"&gt;commitizen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="i am the one who's not mature" src="/images/posts-image/2020-02-22-python-table-manner-series/not-mature-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;於是我就在 PyCon CA 前一個禮拜，開始貢獻起 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt;&lt;br&gt;
把我遇到的 issues 都修了，就順便把投影片中相關的內容一起翻新了&lt;/p&gt;
&lt;p&gt;貢獻的過程中也發現了很多還能再增加的新功能，於是就在 PyCon CA 2019 帶了這個專案去 Develop Sprint&lt;br&gt;
第一次當 Sprint Leader 還蠻好玩的，也蠻有成就感的&lt;br&gt;
（Read More 👉 &lt;a href="https://blog.wei-lee.me/posts/tech/2019/12/pycon-ca-2019"&gt;PyCon CA 2019&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id="java-script-commitizen"&gt;為什麼不用 Java Script 的 commitizen 就好了&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;因為我是 Python 的開發者啊！！！&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;起初我也是從 JavaScript 的版本開始使用 （畢竟兩個專案 star 的數量差了一百倍）&lt;br&gt;
原本我就有寫好 commit message 的習慣&lt;br&gt;
能有工具幫助我把這件事做得更好，當然就再好不過了&lt;/p&gt;
&lt;p&gt;用了一段時間後，我開始覺得我明明都已經認真寫好 commit message 了&lt;br&gt;
為什麼每次 Pull Request / Merge Request 還是花那麼多時間寫&lt;br&gt;
是不是有什麼工具可以自動透過寫好的 commit 產生一些訊息？&lt;br&gt;
再來就找到了 &lt;a href="https://github.com/commitizen/cz-conventional-changelog"&gt;cz-conventional-changelog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但 &lt;a href="https://github.com/commitizen/cz-conventional-changelog"&gt;cz-conventional-changelog&lt;/a&gt; 不能跟 &lt;a href="https://github.com/leonardoanalista/cz-customizable"&gt;cz-customizable&lt;/a&gt; 同時使用&lt;br&gt;
（Read More 👉 &lt;a href="https://github.com/commitizen/cz-cli/issues/434"&gt;Possible to use multiple adapters? #434&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;而且這些擴充常常要用到 &lt;code&gt;package.json&lt;/code&gt; 來做設定&lt;br&gt;
可是我就不是 Java Script 的專案，就不想加入這個檔案來設定啊 🤷‍♂️&lt;br&gt;
所以才開始來找是不是有 Python 版本的替代方案&lt;br&gt;
（Python 的 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 支援的 toml （&lt;code&gt;.cz.toml&lt;/code&gt;）是通用的格式，裡面 Python 相關的內容，適用於各語言）&lt;/p&gt;
&lt;h3 id="_3"&gt;持續貢獻&lt;/h3&gt;
&lt;p&gt;整體來說， commitizen 是一個讓我貢獻得很有成就感的專案&lt;br&gt;
最主要的原因之一就是這是我想用的工具&lt;/p&gt;
&lt;p&gt;貢獻的過程，也會很快就收到作者 &lt;a href="https://github.com/Woile"&gt;Woile&lt;/a&gt; 的回饋&lt;br&gt;
它也會用很友善的文字，讓我覺得貢獻 commitizen 所花的時間，是有受到重視的&lt;/p&gt;
&lt;p&gt;&lt;img alt="friendly-response-1" src="/images/posts-image/2020-02-22-python-table-manner-series/friendly-response-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="friendly-response-2" src="/images/posts-image/2020-02-22-python-table-manner-series/friendly-response-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;除此之外， commitizen 測試覆蓋率很高，比較不需要怕改錯了會不會弄壞舊有的功能&lt;br&gt;
程式碼風格上，透過 black 跟 flake8 來規範，讓程式碼閱讀起來輕鬆很多&lt;br&gt;
在貢獻的過程中，也學到了不少很實用的工具（e.g., pre-commit, cookiecutter）&lt;/p&gt;
&lt;p&gt;所以&lt;strong&gt;一起來貢獻 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 吧 💪&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@klauskpm/how-to-create-good-commit-messages-67943d30cced"&gt;how to create a good commit message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/writing-good-commit-messages-a-practical-guide/"&gt;How to Write Good Commit Messages: A Practical Git Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;Semantic Version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Git"></category></entry><entry><title>Python Table Manners - pre-commit: git commit 前做完檢查</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-pre-commit" rel="alternate"></link><published>2020-02-28T23:10:00+08:00</published><updated>2020-10-04T16:10:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-28:/posts/tech/2020/02/python-table-manners-pre-commit</id><summary type="html">&lt;p&gt;前一篇提到了透過 &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; 簡化繁瑣的指令&lt;br&gt;
但人類除了是懶惰的，還是健忘的&lt;br&gt;
即使已經更簡便了，沒被督促常常還是會忘了執 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;前一篇提到了透過 &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; 簡化繁瑣的指令&lt;br&gt;
但人類除了是懶惰的，還是健忘的&lt;br&gt;
即使已經更簡便了，沒被督促常常還是會忘了執行&lt;br&gt;
就像這次的系列文，如果沒被寫作松督促，不知道什麼時候才會出現（笑&lt;br&gt;
這篇來聊聊如何透過 &lt;a href="https://pre-commit.com"&gt;pre-commit&lt;/a&gt; 強制做檢查&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pre-commit"&gt;pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pre-commit_1"&gt;使用 pre-commit 進行檢查&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pre-commit-hook"&gt;設定 pre-commit hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pre-commit_2"&gt;安裝 pre-commit 到專案中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pre-commit-hook_1"&gt;使用自定義的 pre-commit hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pre-commit-hook_2"&gt;為自己的工具加上 pre-commit hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bouns-commit"&gt;Bouns: 可以只跳警告不擋下 commit 嗎？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="pre-commit"&gt;pre-commit&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; 讓我們能方便的加入 &lt;a href="https://git-scm.com/book/zh-tw/v2/Customizing-Git-Git-Hooks"&gt;Git Hook&lt;/a&gt;，並在各種 git 的相關操作前進行檢查&lt;/p&gt;
&lt;p&gt;正如它的命名，它可以在進行 &lt;code&gt;git commit&lt;/code&gt; 前執行一些操作&lt;br&gt;
不過並不僅限於 commit 前，也可以在其它 git 的階段進行&lt;br&gt;
之所以要這麼做就是為了讓不符合要求的程式碼，從最一開始就不會進入到版本庫 （pre commit）或 git 伺服器 （pre push）&lt;/p&gt;
&lt;h2 id="pre-commit_1"&gt;使用 pre-commit 進行檢查&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 pre-commit&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pre-commit-hook"&gt;設定 pre-commit hook&lt;/h3&gt;
&lt;p&gt;先透過設定檔 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;，告訴 pre-commit 要做哪些檢查&lt;br&gt;
需要注意的是，專案必須要是一個 git 專案&lt;br&gt;
這些 git hook 都會被寫入 &lt;code&gt;.git/hooks/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/pre-commit/pre-commit-hooks&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;end-of-file-fixer&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;trailing-whitespace&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;--markdown-linebreak-ext=md&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上面的例子來說&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repos&lt;/code&gt; 告訴 pre-commit 要去哪邊找到這些 hook&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: 去找專案 &lt;a href="https://github.com/pre-commit/pre-commit-hooks"&gt;pre-commit-hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rev&lt;/code&gt;: 在專案 pre-commit-hooks 找到 rev &lt;a href="https://github.com/pre-commit/pre-commit-hooks/tree/v2.3.0"&gt;v2.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hooks&lt;/code&gt;: 在 pre-commit-hooks rev v2.3.0 的 &lt;a href="https://github.com/pre-commit/pre-commit-hooks/blob/v2.3.0/.pre-commit-hooks.yaml"&gt;.pre-commit-hooks.yaml&lt;/a&gt; 中尋找指定的 hook&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: hook id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt;: 執行這個 hook 的額外參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pre-commit 整理了較為通用的 hook 在 &lt;a href="https://github.com/pre-commit/pre-commit-hooks"&gt;pre-commit-hooks&lt;/a&gt;&lt;br&gt;
除此之外，如 &lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; 和 &lt;a href="https://gitlab.com/pycqa/flake8"&gt;flake8&lt;/a&gt; 等工具也都有提供 pre-commit hook&lt;/p&gt;
&lt;p&gt;另外，&lt;strong&gt;建議 rev 不要使用 master，而應該使用版本號等明確的 rev&lt;/strong&gt;&lt;br&gt;
原因是預設 pre-commit 會在執行時將 hook 專案 clone 下來&lt;br&gt;
如果沒有特別設定， pre-commit 不會把最新版 pull 下來&lt;br&gt;
指到的 master 就會是第一次 pre-commit 抓到時的 master，不是最新版的 master&lt;/p&gt;
&lt;p&gt;寫完設定檔後，接著就是把 pre-commit hook 安裝到 git 專案中&lt;/p&gt;
&lt;h2 id="pre-commit_2"&gt;安裝 pre-commit 到專案中&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 將 pre-commit hook 安裝到 git 專案&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是每次重新 clone 之後，都必須要執行一次&lt;br&gt;
雖然可以將 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; 加入版本控制&lt;br&gt;
但 &lt;code&gt;.git/hook/&lt;/code&gt; 是不能被加入版本控制的&lt;/p&gt;
&lt;p&gt;執行完會出現以下訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;installed&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;.git/hooks/pre-commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一次進行 git commit 時，會將 &lt;a href="https://github.com/pre-commit/pre-commit-hooks"&gt;pre-commit-hooks&lt;/a&gt; clone 到 pre-commit 統一管理的地方&lt;br&gt;
之後就會進行 &lt;code&gt;Fix End of Files&lt;/code&gt; 跟 &lt;code&gt;Trim Trailing Whitespace&lt;/code&gt; 的檢查&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Initializing&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;https://github.com/pre-commit/pre-commit-hooks.
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Installing&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;https://github.com/pre-commit/pre-commit-hooks.
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Once&lt;span class="w"&gt; &lt;/span&gt;installed&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;reused.
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;take&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;few&lt;span class="w"&gt; &lt;/span&gt;minutes...
Fix&lt;span class="w"&gt; &lt;/span&gt;End&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;Files.........................................................Passed
Trim&lt;span class="w"&gt; &lt;/span&gt;Trailing&lt;span class="w"&gt; &lt;/span&gt;Whitespace.................................................Passed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果沒有通過， git 會阻止你進行 commit&lt;/p&gt;
&lt;p&gt;pre-commit 每次都只會針對要 commit 的檔案做檢查&lt;br&gt;
所以建議第一次將 pre-commit 引入專案時，可以先檢查所有的檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--all-files
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="pre-commit-hook_1"&gt;使用自定義的 pre-commit hook&lt;/h2&gt;
&lt;p&gt;下面的例子是在 commit 前，要進行 pytest 的檢查&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;commit&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;system&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pytest&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;pass_filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repo: local&lt;/code&gt;: 直接在本地資料夾執行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hooks&lt;/code&gt;: 有哪些 hook 要執行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;: hook 的 id / name 是 &lt;code&gt;pytest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stages&lt;/code&gt;: 在 &lt;code&gt;commit&lt;/code&gt; 前執行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;language&lt;/code&gt;: 直接使用系統執行 &lt;code&gt;entry&lt;/code&gt; 內的指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;entry&lt;/code&gt;: 這個 hook 要執行的指令是 &lt;code&gt;pipenv run pytest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;types&lt;/code&gt;: 只有在 python 這種檔案類型才進行檢查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pass_filenames&lt;/code&gt;: 是否要將 commit 的檔案名稱作為 &lt;code&gt;entry&lt;/code&gt; 中指令的參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 &lt;code&gt;stages&lt;/code&gt; 總共有六種&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;li&gt;merge-commit&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;prepare-commit-msg&lt;/li&gt;
&lt;li&gt;commit-msg&lt;/li&gt;
&lt;li&gt;manual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是當執行 &lt;code&gt;pipenv run pre-commit commit&lt;/code&gt; 時&lt;br&gt;
預設只會寫入 &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;&lt;br&gt;
如果要加入其他階段，則必須要在後面加入參數 &lt;code&gt;-t [hook-type]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;pre-push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;支援 6 種 hook-type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pre-commit&lt;/li&gt;
&lt;li&gt;pre-merge-commit&lt;/li&gt;
&lt;li&gt;pre-push&lt;/li&gt;
&lt;li&gt;prepare-commit-msg&lt;/li&gt;
&lt;li&gt;commit-msg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像是 pytest 這種需要執行比較久的任務&lt;br&gt;
我就不見得會在 commit 這個 stage 做檢查&lt;br&gt;
而是會把 &lt;code&gt;stages&lt;/code&gt; 改成 &lt;code&gt;push&lt;/code&gt;&lt;br&gt;
並安裝 pre-push 的 hook (i.e., &lt;code&gt;pipenv run pre-commit install -t pre-push&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;如果不想要每個 hook 都各自做設定，可以在 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; 加上 &lt;code&gt;default_stages&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;default_stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;表示如果沒有特定指定 &lt;code&gt;stages&lt;/code&gt; 的 hook 都只在 &lt;code&gt;push&lt;/code&gt; 的階段做檢查&lt;/p&gt;
&lt;h2 id="pre-commit-hook_2"&gt;為自己的工具加上 pre-commit hook&lt;/h2&gt;
&lt;p&gt;為你寫的工具加上 pre-commit hook 可以讓人更方便使用你的工具&lt;br&gt;
在工具專案中加入 &lt;code&gt;.pre-commit-hooks.yaml&lt;/code&gt; 讓 pre-commit 知道其他人引入你的工具時要做什麼處理&lt;br&gt;
撰寫的方式跟 local 的 repo 的寫法相似&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="bouns-commit"&gt;Bouns: 可以只跳警告不擋下 commit 嗎？&lt;/h2&gt;
&lt;p&gt;根據 &lt;a href="https://github.com/pre-commit/pre-commit/issues/923"&gt;Can I show warning message without blocking the commit? #923&lt;/a&gt; 提到的， pre-commit 認為這不是好的作法&lt;br&gt;
但仍然可以透過對 &lt;code&gt;entry&lt;/code&gt; 內指令的操作達到類似的效果&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mropengate.blogspot.com/2019/08/pre-commit-git-hooks_4.html"&gt;提升程式碼品質：使用 Pre-Commit (Git Hooks)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Git"></category><category term="Code Quality"></category></entry><entry><title>Python Table Manners - 管理繁瑣任務</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-manage-trivial-tasks" rel="alternate"></link><published>2020-02-27T20:04:00+08:00</published><updated>2022-02-03T16:12:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-27:/posts/tech/2020/02/python-table-manners-manage-trivial-tasks</id><summary type="html">&lt;p&gt;前面幾篇從套件管理、虛擬環境、測試、風格檢查到自動排版，提到了很多的工具&lt;br&gt;
每一個工具又有各自的參數和設定&lt;br&gt;
這麼多指令怎麼可能記得起來 😱&lt;/p&gt;
&lt;p&gt;&lt;img alt="too-many-commands" src="/images/posts-image/2020-02-22-python-table-manner-series/too-many-commands.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前面幾篇從套件管理、虛擬環境、測試、風格檢查到自動排版，提到了很多的工具&lt;br&gt;
每一個工具又有各自的參數和設定&lt;br&gt;
這麼多指令怎麼可能記得起來 😱&lt;/p&gt;
&lt;p&gt;&lt;img alt="too-many-commands" src="/images/posts-image/2020-02-22-python-table-manner-series/too-many-commands.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;所以在這篇要介紹如何用 &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; 管理這些指令&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#invoke"&gt;invoke 是什麼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#invoke_1"&gt;安裝 invoke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#invoke_2"&gt;如何使用 invoke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#invoke_3"&gt;實作 invoke 任務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;任務相依&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;任務模組化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#auto-completion"&gt;自動補完 （Auto-completion）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile"&gt;為什麼不用 Makefile 就好？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;其他進階應用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="invoke"&gt;invoke 是什麼&lt;/h2&gt;
&lt;p&gt;invoke 是一套任務執行工具 (task execution tool)，主要用來是統一管理各種指令&lt;br&gt;
有點像是 Python 的 &lt;code&gt;Makefile&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="invoke_1"&gt;安裝 invoke&lt;/h2&gt;
&lt;p&gt;不同於 pytest, flake8 等套件，我會同時將 invoke 安裝在系統和虛擬環境中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 invoke 到系統&lt;/span&gt;
pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;invoke

&lt;span class="c1"&gt;# 安裝 invoke 到虛擬環境中&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;裝在系統的原因是想把它當成類似 &lt;code&gt;make&lt;/code&gt; 的指令來使用&lt;/p&gt;
&lt;p&gt;在虛擬環境還需要裝的原因是，部署時系統通常不會預裝 invoke&lt;br&gt;
如果想在部署時也能使用 invoke 的功能，最方便的方法透過 pipenv 安裝&lt;/p&gt;
&lt;h2 id="invoke_2"&gt;如何使用 invoke&lt;/h2&gt;
&lt;p&gt;再回到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 的例子&lt;br&gt;
checkout 到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/83e48c6443303045ed1de2f020297c3110bb1300"&gt;commit 83e4&lt;/a&gt;，回到使用 invoke 管理指令前&lt;br&gt;
從當時的文件可以看到，還需要使用相對冗長的指令&lt;/p&gt;
&lt;p&gt;&lt;img alt="before-invoke" src="/images/posts-image/2020-02-22-python-table-manner-series/before-invoke.jpg"&gt;&lt;/p&gt;
&lt;p&gt;到了 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/72ad956fd200867dc292a156c97a99a09ebe0104"&gt;commit 72ad&lt;/a&gt; (實作已經在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/bc98eec28037a9bed5063fef0f0f564893fce3ac"&gt;commit bc98&lt;/a&gt; 完成，只是在 commit 72ad 才更新文件)，已經可以使用較短且較為統一的指令 (以 &lt;code&gt;inv&lt;/code&gt; 作為開頭)&lt;/p&gt;
&lt;p&gt;&lt;img alt="after-invoke" src="/images/posts-image/2020-02-22-python-table-manner-series/after-invoke.jpg"&gt;&lt;/p&gt;
&lt;p&gt;除此之外，引入 invoke 後，也不用每次都去翻文件&lt;br&gt;
&lt;code&gt;invoke --list&lt;/code&gt; 可以列出所有可用的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 列出可用的 invoke 指令&lt;/span&gt;
&lt;span class="c1"&gt;# p.s. invoke 指令可以縮寫為 inv&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;--list

Available&lt;span class="w"&gt; &lt;/span&gt;tasks:

&lt;span class="w"&gt;  &lt;/span&gt;clean&lt;span class="w"&gt;      &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;tmp&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.gitignore
&lt;span class="w"&gt;  &lt;/span&gt;develop&lt;span class="w"&gt;    &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;script&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;development&lt;span class="w"&gt; &lt;/span&gt;mode
&lt;span class="w"&gt;  &lt;/span&gt;init-dev&lt;span class="w"&gt;   &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;development&lt;span class="w"&gt; &lt;/span&gt;dependencies
&lt;span class="w"&gt;  &lt;/span&gt;install&lt;span class="w"&gt;    &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;script&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;environment
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;testcase
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行的方式則是在 invoke 後面直接加上任務名稱&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;clean
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="invoke_3"&gt;實作 invoke 任務&lt;/h2&gt;
&lt;p&gt;我們先試著將前面的 &lt;code&gt;python setup.py develop&lt;/code&gt; 改成 invoke 的任務&lt;/p&gt;
&lt;p&gt;預設 invoke 會去找目錄下的 &lt;code&gt;tasks.py&lt;/code&gt;&lt;br&gt;
所以第一步要先在專案最上層建立 &lt;code&gt;tasks.py&lt;/code&gt;&lt;br&gt;
接著撰寫一個函式叫 &lt;code&gt;develop&lt;/code&gt; ，這就會是之後的任務名稱 (i.e., 透過 &lt;code&gt;inv develop&lt;/code&gt; 執行)&lt;br&gt;
在函式前加上裝飾器 (decorator) &lt;code&gt;@task&lt;/code&gt;&lt;br&gt;
invoke 會傳入一個 context 做為第一個參數 (Read More 👉 &lt;a href="http://docs.pyinvoke.org/en/stable/getting-started.html#aside-what-exactly-is-this-context-arg-anyway"&gt;what exactly is this ‘context’ arg anyway?&lt;/a&gt;)&lt;br&gt;
(p.s. 原本的程式碼中是使用 &lt;code&gt;cmd&lt;/code&gt; ，那是錯誤的用法)&lt;br&gt;
最後就可以用這個 context （參數 &lt;code&gt;ctx&lt;/code&gt;） 執行指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;develop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python setup.py develop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如同先前所提到的，操作都應該在虛擬環境內被完成&lt;br&gt;
所以我將 &lt;code&gt;pipenv run&lt;/code&gt; 的前綴提出來&lt;br&gt;
這樣就能確保之後的操作一定都會在虛擬環境內執行&lt;br&gt;
如果之後更換了管理虛擬環境的工具（e.g. &lt;code&gt;poetry run&lt;/code&gt;），也可以更輕易的改動 &lt;code&gt;tasks.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="n"&gt;PIPENV_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pipenv run&amp;quot;&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;develop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PIPENV_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; python setup.py develop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;任務相依&lt;/h2&gt;
&lt;p&gt;如果任務之間有相依性，可以在 &lt;code&gt;@task&lt;/code&gt; 後加入 &lt;code&gt;pre&lt;/code&gt; 或 &lt;code&gt;post&lt;/code&gt;&lt;br&gt;
表示任務執行前或後還要執行其他任務&lt;/p&gt;
&lt;p&gt;e.g., 在初始環境 (&lt;code&gt;init&lt;/code&gt;) 前，常會先清除不必要的檔案 (&lt;code&gt;clean&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clean up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;initial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;任務模組化&lt;/h2&gt;
&lt;p&gt;當任務便多時，為了方便維護，就會傾向將相似的任務模組化&lt;br&gt;
這時候就可以使用到 &lt;code&gt;namespace&lt;/code&gt; 的概念&lt;br&gt;
(Read More 👉 &lt;a href="http://docs.pyinvoke.org/en/stable/concepts/namespaces.html"&gt;Constructing namespaces&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;不過我不會在這篇文章深入探討要怎麼說&lt;br&gt;
一般來說，除非任務真的非常多，這是不太必要的&lt;/p&gt;
&lt;p&gt;如果有興趣看我怎麼把 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 的任務模組化&lt;br&gt;
可以參考 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/f1050eabf44a8b8e662370bd97b2a79ad57723c2"&gt;commit f105&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後修改後 &lt;code&gt;tasks&lt;/code&gt; 套件中有這些模組&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── tasks
│   ├── __init__.py
│   ├── build.py
│   ├── common.py
│   ├── env.py
│   ├── style.py
│   └── test.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和各個模組下的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;--list

Available&lt;span class="w"&gt; &lt;/span&gt;tasks:

&lt;span class="w"&gt;  &lt;/span&gt;secure&lt;span class="w"&gt;              &lt;/span&gt;Check&lt;span class="w"&gt; &lt;/span&gt;package&lt;span class="w"&gt; &lt;/span&gt;security
&lt;span class="w"&gt;  &lt;/span&gt;build.clean&lt;span class="w"&gt;         &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;tmp&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.gitignore
&lt;span class="w"&gt;  &lt;/span&gt;build.develop&lt;span class="w"&gt;       &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;script&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;development&lt;span class="w"&gt; &lt;/span&gt;mode
&lt;span class="w"&gt;  &lt;/span&gt;build.install&lt;span class="w"&gt;       &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;script&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;environment
&lt;span class="w"&gt;  &lt;/span&gt;build.test-cli&lt;span class="w"&gt;      &lt;/span&gt;Test&lt;span class="w"&gt; &lt;/span&gt;whether&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;cli&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;runnable
&lt;span class="w"&gt;  &lt;/span&gt;env.clean&lt;span class="w"&gt;           &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment
&lt;span class="w"&gt;  &lt;/span&gt;env.init&lt;span class="w"&gt;            &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;production&lt;span class="w"&gt; &lt;/span&gt;dependencies
&lt;span class="w"&gt;  &lt;/span&gt;env.init-dev&lt;span class="w"&gt;        &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;development&lt;span class="w"&gt; &lt;/span&gt;dependencies
&lt;span class="w"&gt;  &lt;/span&gt;style.flake8&lt;span class="w"&gt;        &lt;/span&gt;Check&lt;span class="w"&gt; &lt;/span&gt;style&lt;span class="w"&gt; &lt;/span&gt;through&lt;span class="w"&gt; &lt;/span&gt;flake8
&lt;span class="w"&gt;  &lt;/span&gt;style.mypy&lt;span class="w"&gt;          &lt;/span&gt;Check&lt;span class="w"&gt; &lt;/span&gt;style&lt;span class="w"&gt; &lt;/span&gt;through&lt;span class="w"&gt; &lt;/span&gt;mypy
&lt;span class="w"&gt;  &lt;/span&gt;style.pylint&lt;span class="w"&gt;        &lt;/span&gt;Check&lt;span class="w"&gt; &lt;/span&gt;style&lt;span class="w"&gt; &lt;/span&gt;through&lt;span class="w"&gt; &lt;/span&gt;pylint
&lt;span class="w"&gt;  &lt;/span&gt;style.reformat&lt;span class="w"&gt;      &lt;/span&gt;Reformat&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;through&lt;span class="w"&gt; &lt;/span&gt;black
&lt;span class="w"&gt;  &lt;/span&gt;style.run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;style&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;Check&lt;span class="w"&gt; &lt;/span&gt;style&lt;span class="w"&gt; &lt;/span&gt;through&lt;span class="w"&gt; &lt;/span&gt;linter&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Note&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;included&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;test.cov&lt;span class="w"&gt;            &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;coverage&lt;span class="w"&gt; &lt;/span&gt;check
&lt;span class="w"&gt;  &lt;/span&gt;test.run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cases
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="auto-completion"&gt;自動補完 （Auto-completion）&lt;/h2&gt;
&lt;p&gt;工程師是很懶惰的&lt;br&gt;
這種指令列工具沒有自動補完怎麼行&lt;br&gt;
invoke 當然也想到了&lt;br&gt;
透過參數 &lt;code&gt;--print-completion-script=[shell]&lt;/code&gt; 就能取得 invoke 預先寫好的自動補完腳步&lt;br&gt;
目前支援 bash, zsh, fish 三種 shell&lt;/p&gt;
&lt;p&gt;e.g., 將 invoke 產生的 zsh 自動補完腳本寫入 &lt;code&gt;~/.zsh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;--print-completion-script&lt;span class="o"&gt;=&lt;/span&gt;zsh&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="makefile"&gt;為什麼不用 Makefile 就好？&lt;/h2&gt;
&lt;p&gt;因為有些 shell script 並不見得那麼好寫&lt;br&gt;
（也可能只是我不熟...）&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="n"&gt;PIPENV_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pipenv run&amp;quot;&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Remove all the tmp files in .gitignore&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;files_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.gitignore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;files_to_remove&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rm -rf &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files_to_remove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（雖然後來發現上面的一串，可以用 &lt;code&gt;git clean -Xdf&lt;/code&gt; 取代...）&lt;/p&gt;
&lt;p&gt;除此之外，invoke 也可以讓 shell script 的結果，直接跟 Python 互動&lt;br&gt;
更容易實作出想要的功能&lt;/p&gt;
&lt;p&gt;另外，推薦閱讀 &lt;a href="https://interrupt.memfault.com/blog/building-a-cli-for-firmware-projects"&gt;Building a CLI for Firmware Projects using Invoke&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;其他進階應用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如何在任務加上參數？&lt;ul&gt;
&lt;li&gt;任務的函式後面加上除了 context 意外的參數&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="http://docs.pyinvoke.org/en/stable/getting-started.html#task-parameters"&gt;Task parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼用 invoke 的結果跟指令列上的執行結果不完全相同？&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;run&lt;/code&gt; 函式中加上 &lt;code&gt;pty=True&lt;/code&gt; 參數通常能解決，但建議可以看看 invoke 為什麼不將這設定為預設行為&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="http://www.pyinvoke.org/faq.html#why-is-my-command-behaving-differently-under-invoke-versus-being-run-by-hand"&gt;Why is my command behaving differently under Invoke versus being run by hand?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何在任務執行失敗時，只做警告，不要跳錯&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;run&lt;/code&gt; 函式加上 &lt;code&gt;warn=True&lt;/code&gt; (預設是 &lt;code&gt;False&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="http://docs.pyinvoke.org/en/1.2/api/runners.html#invoke.runners.Runner.run"&gt;invoke.runners.Runner.run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks/"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Task"></category></entry><entry><title>Python Table Manners - 程式碼風格</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-coding-style" rel="alternate"></link><published>2020-02-26T18:39:00+08:00</published><updated>2020-10-04T15:57:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-26:/posts/tech/2020/02/python-table-manners-coding-style</id><summary type="html">&lt;p&gt;接下來要介紹的是 linters&lt;br&gt;
它們是用來檢查程式是否符合特定程式碼風格的一類工具&lt;br&gt;
以 Python 來說，則可能是判斷有沒有遵守 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;&lt;br&gt;
linter 除了能檢查是否不符風格，通常也能用來檢查語法錯誤&lt;/p&gt;
</summary><content type="html">&lt;p&gt;接下來要介紹的是 linters&lt;br&gt;
它們是用來檢查程式是否符合特定程式碼風格的一類工具&lt;br&gt;
以 Python 來說，則可能是判斷有沒有遵守 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;&lt;br&gt;
linter 除了能檢查是否不符風格，通常也能用來檢查語法錯誤&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-flake8"&gt;風格檢查 - flake8&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;局部跳過檢查&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#-pylint"&gt;風格檢查 - pylint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;局部跳過檢查&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#flake8-vs-pylint"&gt;flake8 v.s. pylint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-mypy"&gt;型別檢查 - mypy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#-black"&gt;自動排版 - black&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_9"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#-isort"&gt;排序函式庫 - isort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_11"&gt;執行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;其他工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bouns"&gt;Bouns: 設定檔的選用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="-flake8"&gt;風格檢查 - flake8&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt; 是 Python 最常被使用的 linter 之一&lt;br&gt;
幾乎是所有 Python 開源專案的標準配備&lt;/p&gt;
&lt;h3 id="_1"&gt;使用&lt;/h3&gt;
&lt;p&gt;以下面這段程式碼為例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# bad_code.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;My Operating system&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這段程式碼出現了兩個問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把模組 &lt;code&gt;os&lt;/code&gt; 指派成一個字串，會導致無法使用 &lt;code&gt;os&lt;/code&gt; 模組內的函式（因為 &lt;code&gt;os&lt;/code&gt; 已經變成一個字串）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os&lt;/code&gt; 的 &lt;code&gt;=&lt;/code&gt; 後面加上兩個空白是不必要的，不符合 PEP 8 的規範&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 flake8&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;flake8&lt;span class="w"&gt; &lt;/span&gt;--dev

&lt;span class="c1"&gt;# 執行 flake8&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;flake8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;flake8 預設對當前目錄下所有 Python 的檔案做檢查&lt;/p&gt;
&lt;p&gt;執行後，&lt;code&gt;flake8&lt;/code&gt; 會將這些錯誤找出來&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./bad_code.py:4:1: F811 redefinition of unused &amp;#39;os&amp;#39; from line 1
./bad_code.py:4:5: E222 multiple spaces after operator
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過錯誤碼（e.g., &lt;code&gt;F811&lt;/code&gt;）可以在 &lt;a href="https://www.flake8rules.com/"&gt;flake8 rules&lt;/a&gt; 找到為什麼這是個錯誤和怎麼修正比較好&lt;/p&gt;
&lt;h3 id="_2"&gt;設定&lt;/h3&gt;
&lt;p&gt;某些狀況下，我們會不完全依照 flake8 的風格&lt;br&gt;
例如 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; 的每行只能有 79 個字元，已經越來越不被使用&lt;/p&gt;
&lt;p&gt;除了可以直接在 &lt;code&gt;flake8&lt;/code&gt; 指令後面加上參數&lt;br&gt;
也可以直接寫入設定檔 &lt;code&gt;setup.cfg&lt;/code&gt; (或 &lt;code&gt;.flake8&lt;/code&gt;, &lt;code&gt;tox.ini&lt;/code&gt;）&lt;br&gt;
以下是我所使用的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[flake8]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# F632: use ==/!= to compare str, bytes, and int literals&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;F632,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# W503: Line break occurred before a binary operator&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;W503,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# E501: Line too long&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;E501,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# E203: Whitespace before &amp;#39;:&amp;#39; (for black)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;E203&lt;/span&gt;
&lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;.git,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;__pycache__,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;build,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;dist&lt;/span&gt;

&lt;span class="na"&gt;max-line-length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;88&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ignore&lt;/code&gt;: 指定要忽略的錯誤類型（可以從 &lt;a href="https://www.flake8rules.com/"&gt;flake8 rules&lt;/a&gt; 找到這些錯誤碼）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude&lt;/code&gt;: 不用被檢查的檔案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-line-length&lt;/code&gt;: 每行最長長度（這裡設定的 88，是後面會介紹到的 &lt;a href="https://black.readthedocs.io/en/stable/"&gt;black&lt;/a&gt; 的預設值）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read More 👉 &lt;a href="https://flake8.pycqa.org/en/latest/user/configuration.html"&gt;Configuring Flake8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;局部跳過檢查&lt;/h3&gt;
&lt;p&gt;另一種狀況是，我們只想在讓一兩行程式碼跳過 flake8 的檢查&lt;br&gt;
但這份檔案的其他地方還是希望能被檢查&lt;br&gt;
這時候可以在那行程式碼加上 &lt;code&gt;# noqa: [error]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# noqa: E731&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="-pylint"&gt;風格檢查 - pylint&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.pylint.org/"&gt;pylint&lt;/a&gt; 同樣是相當常見的 Python linter&lt;br&gt;
一般來說，比 &lt;code&gt;flake8&lt;/code&gt; 檢查的更加嚴格&lt;/p&gt;
&lt;h3 id="_4"&gt;使用&lt;/h3&gt;
&lt;p&gt;與 flake8 不同， &lt;code&gt;pylint&lt;/code&gt; 指令需要指定模組或套件名稱才能進行檢查&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 pylint&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;--dev

&lt;span class="c1"&gt;# 執行 pylint&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;......
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;設定&lt;/h3&gt;
&lt;p&gt;原本我建議使用 &lt;code&gt;pipenv run pylint --generate-rcfile &amp;gt;&amp;gt; .pylintrc&lt;/code&gt; 來產生設定檔&lt;br&gt;
但現在我更傾向在 pyproject.toml 中只寫入想要客製化的設定&lt;br&gt;
原先的做法會在設定檔 .pylintrc 中有著大量的預設值，不容易找到哪些是修改過的設定，造成維護上的困難&lt;br&gt;
不過需要注意的是在某些版本的 pylint 這個設定方式會出錯，所以建議安裝版本 2.6.0 以上的 pylint&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.pylint]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;[tool.pylint.messages_control]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bad-continuation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;missing-function-docstring&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;missing-module-docstring&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;invalid-name&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;[tool.pylint.format]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;max-line-length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 disable 的錯誤可以在 &lt;a href="http://pylint-messages.wikidot.com/all-codes"&gt;pylint-messages&lt;/a&gt; 找到&lt;/p&gt;
&lt;h3 id="_6"&gt;局部跳過檢查&lt;/h3&gt;
&lt;p&gt;只要在要忽略的程式碼前面一行加上 &lt;code&gt;# pylint: disable=[error]&lt;/code&gt;&lt;br&gt;
但需要注意的是，這行以後全部的檢查都會被關閉&lt;br&gt;
所以要記得在需要開啟檢查的地方再加上 &lt;code&gt;# pylint: enable=[error]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pylint: disable=line-too-long&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Imagine this is a really long line!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# pylint: enable=line-too-long&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="flake8-vs-pylint"&gt;flake8 v.s. pylint&lt;/h2&gt;
&lt;p&gt;除了相關的檢查外， pylint 會比 flake8 做更嚴格的檢查&lt;br&gt;
也可以做更多的設定，但在執行上也會比較慢&lt;/p&gt;
&lt;p&gt;在 PyCon US 2018 的 &lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality/"&gt;Automating Code Quality&lt;/a&gt;，Kyle Knapp 很詳細的比較了這兩個工具&lt;/p&gt;
&lt;p&gt;我的使用上會把 flake8 作為強制檢查程式碼風格的一環&lt;br&gt;
只要沒有通過 flake8 的檢查，就應該做修正&lt;br&gt;
而 pylint 的警告則是只作為參考&lt;/p&gt;
&lt;p&gt;flake8 在大多數狀況已經足夠&lt;br&gt;
花時間去修改成符合某些 pylint 過於嚴格的檢查，或設定 &lt;code&gt;.pylint&lt;/code&gt;，對我來說並不值得&lt;br&gt;
而且 Guido 也是這麼說的 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="because-guido-say-so" src="/images/posts-image/2020-02-22-python-table-manner-series/because-guido-say-so.png"&gt;&lt;/p&gt;
&lt;h2 id="-mypy"&gt;型別檢查 - mypy&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt; 是 Python 做靜態型別檢查的工具&lt;br&gt;
Python 是一個動態型別的語言，所以可以隨意地不同型別的值指派給同一個變數&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a string&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;str_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但這麼做有時候會造成邏輯上的錯誤&lt;br&gt;
例如 &lt;code&gt;import csv&lt;/code&gt; 時，如果使用了 &lt;code&gt;csv&lt;/code&gt; 作為其他的變數名稱&lt;br&gt;
就會將變數的值取代掉原本引入的模組&lt;/p&gt;
&lt;p&gt;除此之外，型別標記的程式碼也會增加可讀性&lt;br&gt;
因此近幾年越來越多人注意 Python 的型別標記&lt;/p&gt;
&lt;p&gt;PyCon US 2017 中 Lisa Guo 和 Hui Ding 的 Keynote Session &lt;a href="https://blog.wei-lee.me/posts/tech/2017/06/Python-at-IG"&gt;Python@Instagram&lt;/a&gt; 講了 Instagram 是為什麼要和如何將龐大的程式庫加上型別標示&lt;br&gt;
&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python/"&gt;Static Typing in Python&lt;/a&gt; 則是 PyCon US 2020 年 Dustin 對型別標示和檢查的詳細介紹&lt;br&gt;
而 Vita Smid 在 EuroPython 2019 的 &lt;a href="https://wei-lee.me/pycon-note/posts/europython-2019/2020/03/static-typing-beyond-the-basics-of-def-foo-x-int-str/"&gt;Static typing: beyond the basics of def foo(x: int) -str:&lt;/a&gt; 則講到了型別檢查更進階一點的應用&lt;br&gt;
這幾場演講都非常推薦可以觀看！&lt;/p&gt;
&lt;h3 id="_7"&gt;使用&lt;/h3&gt;
&lt;p&gt;以下列的程式碼為例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# wrong_type_hint.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;func&lt;/code&gt; 的參數 &lt;code&gt;val&lt;/code&gt; 標記為 &lt;code&gt;List[str]&lt;/code&gt;&lt;br&gt;
但在呼叫的時候卻傳入整數陣列&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 mypy&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--dev

&lt;span class="c1"&gt;# 執行 mypy&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;mypy&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;files&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--ignore-missing-imports
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行 &lt;code&gt;mypy&lt;/code&gt; 後，它就會告訴跳出型別錯誤的警告&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wrong_type_hint.py:8:&lt;span class="w"&gt; &lt;/span&gt;error:&lt;span class="w"&gt; &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;item&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;incompatible&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;expected&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;str&amp;quot;&lt;/span&gt;

wrong_type_hint.py:8:&lt;span class="w"&gt; &lt;/span&gt;error:&lt;span class="w"&gt; &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;item&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;incompatible&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;expected&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;str&amp;quot;&lt;/span&gt;

wrong_type_hint.py:8:&lt;span class="w"&gt; &lt;/span&gt;error:&lt;span class="w"&gt; &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;item&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;incompatible&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;expected&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;str&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mypy 預設會去找所有引入的函式庫是否也有做好型別標記&lt;br&gt;
所以一般使用上都會加上參數 &lt;code&gt;--ignore-missing-imports&lt;/code&gt;&lt;br&gt;
只要確保我們撰寫的部分都是正確的&lt;/p&gt;
&lt;h3 id="_8"&gt;設定&lt;/h3&gt;
&lt;p&gt;以下是我用來設定 mypy 的 &lt;code&gt;setup.cfg&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[mypy]&lt;/span&gt;
&lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;[your files]&lt;/span&gt;
&lt;span class="na"&gt;ignore_missing_imports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="-black"&gt;自動排版 - black&lt;/h2&gt;
&lt;p&gt;比起 flake8, pylint 只做風格檢查&lt;br&gt;
&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; 會更進一步的直接修正不符合風格的程式碼&lt;br&gt;
原本我不太喜歡使用這種的工具&lt;br&gt;
原因是每次執行的結果不一定相同，修正的結果不見得符合我的需求，這時就要再去做設定&lt;/p&gt;
&lt;p&gt;black 某種程度上的解決了這些問題&lt;br&gt;
black 每次執行的結果都會是相同的，而且大致上修正結果我還算滿意&lt;br&gt;
它最特別的地方是，不太能做客製化設定，也不能只做局部程式碼修正&lt;/p&gt;
&lt;p&gt;引述自 black 的文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Black code style&lt;/p&gt;
&lt;p&gt;Black reformats entire files in place. It is not configurable. It doesn't take previous formatting into account. It doesn't reformat blocks that start with # fmt: off and end with # fmt: on. # fmt: on/off have to be on the same level of indentation. It also recognizes YAPF's block comments to the same effect, as a courtesy for straddling code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;為什麼這可能是件好事？&lt;br&gt;
因為這能讓大家更專注於程式碼的功能本身&lt;br&gt;
而不是這裡要不要加逗號？要不要斷行？如何去調教設定檔？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There should be one-- and preferably only one --obvious way to do it.”&lt;br&gt;
–The Zen of Python, by Tim Peters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_9"&gt;使用&lt;/h3&gt;
&lt;p&gt;因為 black 還是 beta 版&lt;br&gt;
透過 pipenv 安裝時還要加上 &lt;code&gt;--pre&lt;/code&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 black&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;--dev&lt;span class="w"&gt; &lt;/span&gt;--pre

&lt;span class="c1"&gt;# 執行 black 修正程式碼風格&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為 black 是直接重新排版程式碼&lt;br&gt;
我節錄了部分我在 pycontw-postevent-report-generator &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/e64a1202c2af08fe9ca5a44b1e52fdafeac2098d"&gt;commit e64a&lt;/a&gt; 修正風格的結果&lt;br&gt;
上面紅色的部分是原本的程式碼，下面綠色是修正過的結果&lt;br&gt;
(p.s. 當時設定的長度是 119)&lt;/p&gt;
&lt;p&gt;&lt;img alt="black-fix-1" src="/images/posts-image/2020-02-22-python-table-manner-series/black-fix-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="black-fix-2" src="/images/posts-image/2020-02-22-python-table-manner-series/black-fix-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="black-fix-3" src="/images/posts-image/2020-02-22-python-table-manner-series/black-fix-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如果只想要檢查程式碼是否符合 black 的風格&lt;br&gt;
而不要直接做修正，可以在指令後面加入 &lt;code&gt;--check&lt;/code&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;--check
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_10"&gt;設定&lt;/h3&gt;
&lt;p&gt;雖然說 black 不能對風格做太多的設定&lt;br&gt;
我們還是能先指定哪些檔案是要修正，哪些是不用的&lt;br&gt;
以下是我放在 &lt;code&gt;pyproject.toml&lt;/code&gt; 的設定&lt;br&gt;
（p.s. &lt;code&gt;line-length = 88&lt;/code&gt; 是 black 的預設值）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.black]&lt;/span&gt;
&lt;span class="n"&gt;line-length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;
&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\.pyi?$&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;/(&lt;/span&gt;
&lt;span class="s1"&gt;    \.eggs&lt;/span&gt;
&lt;span class="s1"&gt;  | \.git&lt;/span&gt;
&lt;span class="s1"&gt;  | \.hg&lt;/span&gt;
&lt;span class="s1"&gt;  | \.mypy_cache&lt;/span&gt;
&lt;span class="s1"&gt;  | \.tox&lt;/span&gt;
&lt;span class="s1"&gt;  | \.venv&lt;/span&gt;
&lt;span class="s1"&gt;  | _build&lt;/span&gt;
&lt;span class="s1"&gt;  | buck-out&lt;/span&gt;
&lt;span class="s1"&gt;  | build&lt;/span&gt;
&lt;span class="s1"&gt;  | dist&lt;/span&gt;
&lt;span class="s1"&gt;)/&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="-isort"&gt;排序函式庫 - isort&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt; 是自動排列函式庫引入順序的的工具&lt;br&gt;
PEP 8 建議將引入的函式庫分為三類做排序&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;標準函式庫&lt;/li&gt;
&lt;li&gt;第三方函式庫&lt;/li&gt;
&lt;li&gt;本地的函式庫&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;並在每一個種類間空一行&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 isort 的原因跟 black 差不多&lt;br&gt;
就是讓程式來決定比較枝微末節的事，專注在開發本身上面&lt;/p&gt;
&lt;h3 id="_11"&gt;執行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 isort&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;isort&lt;span class="w"&gt; &lt;/span&gt;--dev

&lt;span class="c1"&gt;# 執行 isort 修正函式庫排序&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;isort&lt;span class="w"&gt; &lt;/span&gt;--atomic&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--atomic&lt;/code&gt;: 只有重新排序後的結果沒有語法錯誤，才會儲存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;設定&lt;/h3&gt;
&lt;p&gt;自從 5.0.0 後， isort 直接把常見的設定寫成 &lt;a href="https://pycqa.github.io/isort/docs/configuration/profiles/"&gt;profile&lt;/a&gt;&lt;br&gt;
只要指定 profile 就能直接套用相容的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.isort]&lt;/span&gt;
&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過有一個相關的 bug 到 5.0.5 後才修正 (Ref: &lt;a href="https://github.com/PyCQA/isort/issues/1295"&gt;Black profile not compatible with Black (ensure_newline_before_comments not working) #1295&lt;/a&gt;)&lt;br&gt;
所以還是建議安裝最新的版本&lt;/p&gt;
&lt;h2 id="_13"&gt;其他工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mgedmin/check-manifest"&gt;check-manifest&lt;/a&gt;: 檢查有沒有少放入 &lt;code&gt;MAINIFEST.in&lt;/code&gt; 的檔案&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asottile/seed-isort-config"&gt;seed-isort-config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bouns"&gt;Bouns: 設定檔的選用&lt;/h2&gt;
&lt;p&gt;從前面的測試篇到現在有提到很多設定檔的格式&lt;br&gt;
通常每個工具都會有自己的設定檔 (e.g., &lt;code&gt;.coveragerc&lt;/code&gt;, &lt;code&gt;.flake8&lt;/code&gt;) 或者用 Python 比較通用的格式 (e.g., &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;)&lt;br&gt;
其中 &lt;code&gt;pyproject.toml&lt;/code&gt; 是在 &lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP 518&lt;/a&gt; 提出的設定檔格式&lt;br&gt;
不過還沒有被所有的工具支援&lt;br&gt;
&lt;a href="https://github.com/carlosperate/awesome-pyproject"&gt;awesome-pyproject&lt;/a&gt; 整理了目前已經支援或討論是否要支援 &lt;code&gt;proproject.toml&lt;/code&gt; 的工具&lt;/p&gt;
&lt;p&gt;比起讓多個工具的設定散落在各個設定檔&lt;br&gt;
我傾向統一管理在 &lt;code&gt;pyproject.toml&lt;/code&gt; 或 &lt;code&gt;setup.cfg&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;black&lt;/li&gt;
&lt;li&gt;isort&lt;/li&gt;
&lt;li&gt;pylint&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;pytest&lt;/li&gt;
&lt;li&gt;commitizen (之後才會介紹到)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;setup.cfg&lt;ul&gt;
&lt;li&gt;flake8&lt;/li&gt;
&lt;li&gt;mypy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality/"&gt;Automating Code Quality - PyCon US 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting/"&gt;Life Is Better Painted Black, or: How to Stop Worrying and Embrace Auto-Formatting - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wf-BqAjZb8M&amp;amp;feature=youtu.be"&gt;Beyond PEP 8 -- Best practices for beautiful intelligible code - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Code Quality"></category></entry><entry><title>Python Table Manners - 測試 (二)</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-test-2" rel="alternate"></link><published>2020-02-25T18:05:00+08:00</published><updated>2020-10-04T15:46:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-25:/posts/tech/2020/02/python-table-manners-test-2</id><summary type="html">&lt;p&gt;接續前一篇提到的 &lt;a href="https://docs.pytest.org/en/6.1.1/"&gt;pytest&lt;/a&gt;，繼續看它的其他功能吧&lt;/p&gt;
</summary><content type="html">&lt;p&gt;接續前一篇提到的 &lt;a href="https://docs.pytest.org/en/6.1.1/"&gt;pytest&lt;/a&gt;，繼續看它的其他功能吧&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fixture"&gt;fixture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;準備 / 清除資源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scope"&gt;scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conftestpy"&gt;conftest.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixture_1"&gt;常用的內建 fixture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#parameterize"&gt;參數化 (parameterize)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#marker"&gt;marker&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#marker_1"&gt;內建 marker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#marker_2"&gt;自定義 marker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;測試例外事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pytest"&gt;pytest 常用命令列參數&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pytest-cov"&gt;pytest-cov 測試覆蓋率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;其他常用 plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;其他測試工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="fixture"&gt;fixture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/fixture.html"&gt;fixture&lt;/a&gt; 幾乎可以說是 pytest 最重要的功能&lt;br&gt;
前一篇的例子中只有用到準備資源的部分&lt;br&gt;
這裡再舉一些例子來說明它的其他應用&lt;/p&gt;
&lt;h3 id="_1"&gt;準備 / 清除資源&lt;/h3&gt;
&lt;p&gt;假設我們已經有了虛構的 &lt;code&gt;db&lt;/code&gt; 函式庫，它可以處理各種資料庫相關的功能&lt;/p&gt;
&lt;p&gt;現在寫一個測試案例來驗證 &lt;code&gt;is_connected&lt;/code&gt; 函式是否能正確的判斷資料庫有連線&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 初始化 DB 的 instance&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# 連接到資料庫&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;

    &lt;span class="c1"&gt;# 斷開資料庫連線&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_db_is_connected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fixture &lt;code&gt;db&lt;/code&gt; 中不使用 &lt;code&gt;return&lt;/code&gt; 而是使用 &lt;code&gt;yield&lt;/code&gt;&lt;br&gt;
連線資料庫後，就先將 &lt;code&gt;_db&lt;/code&gt; instance 回傳&lt;br&gt;
在 &lt;code&gt;test_db_is_connected&lt;/code&gt; 引入 fixture &lt;code&gt;db&lt;/code&gt; 時，資料庫會處於連線的狀態&lt;br&gt;
結束後，則會執行 &lt;code&gt;_db.close()&lt;/code&gt; 斷開資料庫的連線&lt;br&gt;
（什麼時候才算結束則是看 &lt;code&gt;fixture&lt;/code&gt; 的參數 &lt;code&gt;scope&lt;/code&gt;，這會在後面說明）&lt;/p&gt;
&lt;p&gt;接下來我還想要說明兩個概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fixture&lt;/code&gt; 中使用 &lt;code&gt;fixture&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;fixture&lt;/code&gt; 準備跟清除資源，但不直接呼叫到資源 (&lt;code&gt;pytest.mark.usefixtures&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現在假設已經實作了 &lt;code&gt;model&lt;/code&gt;，裡面有 &lt;code&gt;User&lt;/code&gt; 的定義&lt;br&gt;
我們想要驗證新增了一筆 admin 的使用者後，是否能成功查詢到這筆資料&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt;

    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="err"&gt;＠&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert_admin_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 初始化 user&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 將 user 新增到資料庫&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="c1"&gt;# 將 user 從資料庫移除&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usefixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;insert_admin_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_admin_user_exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 從資料庫中找出第一筆 name 是 admin 的 user&lt;/span&gt;
    &lt;span class="n"&gt;admin_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;admin_user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新增資料前，必須先跟資料庫建立連線&lt;br&gt;
因此準備資料的 fixture &lt;code&gt;insert_admin_user&lt;/code&gt; 會使用到 &lt;code&gt;db&lt;/code&gt; fixture&lt;/p&gt;
&lt;p&gt;而測試函式 &lt;code&gt;test_admin_user_exists&lt;/code&gt; ，需要已經有 admin 使用者的資料庫，來測試 &lt;code&gt;User.query.filter(name="admin").first()&lt;/code&gt; 是否能成功取得資料&lt;br&gt;
但它不需要用到 &lt;code&gt;insert_admin_user&lt;/code&gt; 這個變數，因此就能改成使用 &lt;code&gt;pytest.mark.usefixtures&lt;/code&gt;&lt;br&gt;
這樣就能在不引入參數的情況下，使用 fixture 設定好的環境&lt;/p&gt;
&lt;h3 id="scope"&gt;scope&lt;/h3&gt;
&lt;p&gt;fixture 的 &lt;a href="https://docs.pytest.org/en/6.1.1/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session"&gt;scope&lt;/a&gt; 共分為五種 （function, class, module, package, session）&lt;br&gt;
表示 fixture 會在哪個階段前準備資源，並在哪個階段後清除&lt;br&gt;
如果設定成 function，就會在每一個測試函式執行前和後做資源的處理&lt;/p&gt;
&lt;h3 id="conftestpy"&gt;conftest.py&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/2.7.3/plugins.html?#conftest-py-local-per-directory-plugins"&gt;conftest.py&lt;/a&gt; 是 pytest 中的一個特殊檔案&lt;br&gt;
如果是整個套件（同一個資料夾）都會用到的 fixture 就能放在這， pytest 執行時會自動載入&lt;/p&gt;
&lt;p&gt;以下面的結構為例， &lt;code&gt;test_sponsor.py&lt;/code&gt; 就會自動載入上層的 &lt;code&gt;conftest.py&lt;/code&gt; 中的 fixture&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;└── tests
    ├── __init__.py
    ├── conftest.py
    ├── test_sponsor.py
    └── page
        ├── __init__.py
        ├── conftest.py
        └── test_title.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="fixture_1"&gt;常用的內建 fixture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/reference.html#std:fixture-caplog"&gt;caplog&lt;/a&gt;: 抓 log 訊息&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/reference.html#std:fixture-capsys"&gt;capsys&lt;/a&gt;: 抓 std out, std err&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/reference.html#std:fixture-tmpdir"&gt;tmpdir&lt;/a&gt;: 暫時資料夾，通常用來測檔案相關的測試&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="parameterize"&gt;參數化 (parameterize)&lt;/h2&gt;
&lt;p&gt;在測試資料比較簡單的時候，可以使用 &lt;a href="https://docs.pytest.org/en/6.1.1/parametrize.html"&gt;parameterize&lt;/a&gt; 來減少撰寫重複的程式碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@pytest.mark.parametrize(args1, arg2)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;第一個參數: 指定測試函式要使用的參數名稱&lt;/li&gt;
&lt;li&gt;第二個參數: 測試資料的陣列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;x, y, expected_sum&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_sum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected_sum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="marker"&gt;marker&lt;/h2&gt;
&lt;p&gt;前面已經介紹過 &lt;code&gt;parameterize&lt;/code&gt; 和 &lt;code&gt;usefixtures&lt;/code&gt;&lt;br&gt;
這裡會介紹 &lt;a href="http://doc.pytest.org/en/6.1.1/example/markers.html"&gt;markers&lt;/a&gt; 還可以做什麼&lt;/p&gt;
&lt;h3 id="marker_1"&gt;內建 marker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/6.1.1/skipping.html#skip"&gt;skip&lt;/a&gt;: 跳過這個測試案例&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/6.1.1/skipping.html#skipif"&gt;skipif&lt;/a&gt;: 如果符合某個條件，則跳過這個測試案例&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/6.1.1/skipping.html#xfail"&gt;xfail&lt;/a&gt;: 預期會失敗 （其實前一篇想跳過會失敗的案例應該要用 &lt;code&gt;xfail&lt;/code&gt;，而不是 &lt;code&gt;skip&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="marker_2"&gt;自定義 marker&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@pytest.mark.[any custom marker]&lt;/code&gt; 的用途是標記測試案例&lt;br&gt;
像是如果有些測試會特別慢，就可以透過標記 &lt;code&gt;@pytest.mark.slow&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_super_slow_test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99999999999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行時加上參數 &lt;code&gt;-m&lt;/code&gt; 就能跳過（或只執行）這些案例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pytest -m &amp;quot;not slow&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的做法，如果有測試案例不小心打成 &lt;code&gt;@pytest.mark.slwo&lt;/code&gt;，會不太容易被發現&lt;br&gt;
但 pytest 還是會正常執行&lt;br&gt;
這時候可以在專案加入設定檔 &lt;code&gt;pyproject.toml&lt;/code&gt; (pytest 6.0.0 之後才支援這種設定檔格式) 定義 marker&lt;br&gt;
p.s. 不建議使用 &lt;code&gt;setup.cfg&lt;/code&gt; 做為 pytest 的設定檔 (Read More 👉 &lt;a href="https://github.com/pytest-dev/pytest/issues/3523"&gt;deprecate setup.cfg support #3523&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.pytest.ini_options]&lt;/span&gt;
&lt;span class="n"&gt;minversion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6.0&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;markers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slow&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;並在執行時加上 &lt;code&gt;--strict-markers&lt;/code&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--strict-markers&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;not slow&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pytest 就會告訴我們 &lt;code&gt;slwo&lt;/code&gt; 並不是被定義過的 maker&lt;/p&gt;
&lt;p&gt;更進一步可以把 &lt;code&gt;--strict-markers&lt;/code&gt; 直接寫入 &lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.pytest.ini_options]&lt;/span&gt;
&lt;span class="n"&gt;minversion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6.0&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;addopts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--strict-markers&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;markers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slow&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;測試例外事件&lt;/h2&gt;
&lt;p&gt;透過 &lt;code&gt;pytest.raise&lt;/code&gt; 確認測試案例是否有符合預期的丟出例外事件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_index_error&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;some_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="pytest"&gt;pytest 常用命令列參數&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; (&lt;code&gt;-vv&lt;/code&gt;, &lt;code&gt;-vvv&lt;/code&gt;): 顯示更多資訊 （越多 v 就會顯示越多資訊）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--durations=N&lt;/code&gt;: 只列出最慢的 &lt;em&gt;N&lt;/em&gt; 個測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt; (&lt;code&gt;--exitfirst&lt;/code&gt;): 遇到第一個失敗就終止測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--maxfail=num&lt;/code&gt;: 失敗次數達到 &lt;em&gt;num&lt;/em&gt; 次，直接終止測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--lf&lt;/code&gt; (&lt;code&gt;--last-failed&lt;/code&gt;): 只測試上次失敗的案例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ff&lt;/code&gt; (&lt;code&gt;--failed-first&lt;/code&gt;): 從上次失敗的案例開始測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--nf&lt;/code&gt; &lt;code&gt;--new-first&lt;/code&gt;: 從新的案例開始測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-k EXPRESSION&lt;/code&gt;: 只測試名稱符合 "EXPRESSION" 的案例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m MARKEXPR&lt;/code&gt;: 只測試有 "MARKEXPR" maker 的案例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fixtures&lt;/code&gt;: 列出所有 &lt;code&gt;fixtures&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pytest-cov"&gt;pytest-cov 測試覆蓋率&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt; 可以用來產生測試覆蓋率的報告，讓我們知道程式碼還有哪些沒被測試到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝 pytest-cov&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pytest-cov&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 計算 myproj 的覆蓋率&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--cov&lt;span class="o"&gt;=&lt;/span&gt;myproj&lt;span class="w"&gt; &lt;/span&gt;tests/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比較重要的參數有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--cov=[SOURCE]&lt;/code&gt;: 測試包含的程式碼範圍&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cov-report=TYPE&lt;/code&gt;: 測試覆蓋率報告的種類 (term, term-missing, annotate, html, xml)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cov-fail-under=MIN&lt;/code&gt;: 如果覆蓋率小於 &lt;em&gt;MIN&lt;/em&gt; 則跳出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 &lt;code&gt;--cov&lt;/code&gt;, &lt;code&gt;--cov-report&lt;/code&gt; 都可以加入多個參數&lt;/p&gt;
&lt;p&gt;回到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 的例子&lt;br&gt;
先 checkout 回 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/1.0.2"&gt;1.0.2&lt;/a&gt;，來測試 1.0.2 上的測試覆蓋率&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--cov&lt;span class="o"&gt;=&lt;/span&gt;report_generator&lt;span class="w"&gt; &lt;/span&gt;--cov-report&lt;span class="o"&gt;=&lt;/span&gt;term-missing&lt;span class="w"&gt; &lt;/span&gt;test/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;從下面的結果可以看到哪些檔案的哪些部分沒有被測試到&lt;/p&gt;
&lt;p&gt;&lt;img alt="test-coverage" src="/images/posts-image/2020-02-22-python-table-manner-series/test-coverage.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如果想看精美的網頁版報告，可以試試看以下的指令&lt;br&gt;
報告會產生在專案資料夾下的 &lt;code&gt;htmlcov&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--cov&lt;span class="o"&gt;=&lt;/span&gt;report_generator&lt;span class="w"&gt; &lt;/span&gt;--cov-report&lt;span class="o"&gt;=&lt;/span&gt;term-missing&lt;span class="w"&gt; &lt;/span&gt;--cov-report&lt;span class="o"&gt;=&lt;/span&gt;html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一些更進階的設定，可以寫入設定檔 &lt;code&gt;pyproject.toml&lt;/code&gt; (或 &lt;code&gt;.coveragerc&lt;/code&gt;，但語法會不太一樣)&lt;br&gt;
以下是我自己使用的 &lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.coverage]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;[tool.coverage.report]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;show_missing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exclude_lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Have to re-enable the standard pragma&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pragma: no cover&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Don&amp;#39;t complain about missing debug-only code:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def __repr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if self\.debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Don&amp;#39;t complain if tests don&amp;#39;t hit defensive assertion code:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raise AssertionError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raise NotImplementedError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Don&amp;#39;t complain if non-runnable code isn&amp;#39;t run:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if 0:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if __name__ == .__main__.:&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read More 👉 &lt;a href="https://coverage.readthedocs.io/en/coverage-5.0.3/config.html"&gt;Configuration reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="plugins"&gt;其他常用 plugins&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-xdist/"&gt;pytest-xdist&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;用平行化加速測試的執行 (&lt;code&gt;pipenv run pytest -n NUM&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-mock"&gt;pytest-mock&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;使用 mocking 的技巧將部分不好測試的物件替換成假的物件&lt;/li&gt;
&lt;li&gt;推薦參考 &lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python/"&gt;Demystifying the Patch Function - PyCon US 2018&lt;/a&gt; （不過她不是用 pytest）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ESSS/pytest-regressions"&gt;pytest-regressions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;將冗長的測試結果寫成檔案，每次測試都去比對跟上次產生的結果是否相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尋找其他 plugins&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/plugins.html"&gt;pytest - Installing and Using plugins¶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev"&gt;pytest-dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;其他測試工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在各種不同版本的 Python 中做測試，幾乎是開源 Python 專案的標準工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;基本上跟 tox 的功能相似，不過組態設定是使用 Python&lt;/li&gt;
&lt;li&gt;tox 跟 nox 推薦參考 &lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks/"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/HypothesisWorks/hypothesis"&gt;hypothesis&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;採用 Property-based testing，跟以往要自己產生測試資料不同，我們只需要給予資料的定義（e.g., 0 ~ 10000 之間的整數）， hypothsis 會根據定義來產生隨機的資料，也因此更容易包含到極端案例&lt;/li&gt;
&lt;li&gt;推薦參考 &lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis/"&gt;Escape from auto-manual testing with Hypothesis!&lt;/a&gt; （PyCon US 2019， Zac 投了 talk, sprint, tutorial, poster，很用心在推廣這套工具）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?time_continue=201&amp;amp;v=pX1_I_sEi8k"&gt;快快樂樂成為 Coding Ninja (by pytest) - PyCon APAC 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing/"&gt;Pytest: Rapid Simple Testing -  Swiss Python Summit 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python/"&gt;Demystifying the Patch Function - PyCon US 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis/"&gt;Escape from auto-manual testing with Hypothesis!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks/"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Test"></category></entry><entry><title>Python Table Manners - 測試 (一)</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-test-1" rel="alternate"></link><published>2020-02-24T23:33:00+08:00</published><updated>2020-10-04T15:33:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-24:/posts/tech/2020/02/python-table-manners-test-1</id><summary type="html">&lt;p&gt;設定完環境後，接著開始要開發程式的各項功能&lt;br&gt;
要驗證程式正確性時，我們就會撰寫測試案例&lt;/p&gt;
</summary><content type="html">&lt;p&gt;設定完環境後，接著開始要開發程式的各項功能&lt;br&gt;
要驗證程式正確性時，我們就會撰寫測試案例&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;為什麼要寫自動化測試&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unittest"&gt;unittest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pytest"&gt;pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unittest-pytest"&gt;從 Unittest 到 Pytest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#test-discovery"&gt;測試探索 (test discovery)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-0"&gt;Step 0: 追朔程式碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-fixture-setup-teardown"&gt;Step 1: 使用 fixture 取代 setUp / tearDown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-markskip"&gt;Step 2: 使用 mark.skip 跳過部分測試&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-class"&gt;Step 3: 扁平化 - 移除不必要的 class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;為什麼要寫自動化測試&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果沒有自動化測試&lt;ul&gt;
&lt;li&gt;必須手動去驗證程式的正確性，而且不能確定每次的測試方式都是相同的&lt;br&gt;
 （如果因為很麻煩懶得測試，變成讓客戶去測試，就會造成更多的麻煩了 😱）&lt;/li&gt;
&lt;li&gt;增加重構 (refactoring）的風險，因為很難驗證程式的功能有沒有在重構的過程中被改動&lt;/li&gt;
&lt;li&gt;加入新的功能不知道會不會動到原本沒問題的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後就會像是這樣&lt;/p&gt;
&lt;p&gt;&lt;img alt="new-feature-without-test" src="/images/posts-image/2020-02-22-python-table-manner-series/new-feature.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;總之，要寫測試！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="unittest"&gt;unittest&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; 是 Python 標準函式庫的測試框架&lt;br&gt;
起源於 jUnit 的做法，所以在函式的命名上和設計上比較不符合 Python 風格&lt;br&gt;
雖然它不會是今天的主角，我也不太建議使用它&lt;br&gt;
不過我們還是可以稍微看一下它的用法&lt;/p&gt;
&lt;p&gt;以下取自 &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; 文件中的其中一個範例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WidgetTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The widget&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_default_widget_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="s1"&gt;&amp;#39;incorrect default size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_widget_resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="s1"&gt;&amp;#39;wrong size after resize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到幾個特點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;測試案例必須要繼承 &lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;setUp&lt;/code&gt; 函式來初始化 &lt;code&gt;widget&lt;/code&gt; （如果有需要清除資源則會使用 &lt;code&gt;tearDown&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;assertEqual&lt;/code&gt; 來做正確性的驗證&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pytest"&gt;pytest&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/"&gt;pytest&lt;/a&gt; 是現在 Python 專案建議使用的測試框架，也會是這篇文章的主角&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為什麼要用 pytest&lt;ul&gt;
&lt;li&gt;更符合 Python 程式碼風格 (Pythonic)&lt;/li&gt;
&lt;li&gt;pytest 支援舊有的 unittest 風格&lt;/li&gt;
&lt;li&gt;扁平化（不用繼承）&lt;/li&gt;
&lt;li&gt;只需要使用 &lt;code&gt;assert&lt;/code&gt;，不需要去記 &lt;code&gt;assert.+&lt;/code&gt; (e.g., &lt;code&gt;assertEqual&lt;/code&gt;) 等 API&lt;/li&gt;
&lt;li&gt;更好的&lt;a href="https://docs.pytest.org/en/6.1.1/goodpractices.html#test-discovery"&gt;測試探索 (test discovery)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更多的進階功能 (e.g., fixture, mark, parameterize and etc.)&lt;/li&gt;
&lt;li&gt;強大的套件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是取自 &lt;a href="https://docs.pytest.org/en/6.1.1/getting-started.html#create-your-first-test"&gt;pytest - Create your first test&lt;/a&gt; 的範例&lt;br&gt;
相比於 unittest 寫法相對簡潔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# content of test_sample.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_answer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="unittest-pytest"&gt;從 Unittest 到 Pytest&lt;/h2&gt;
&lt;p&gt;前面的比較其實不太公平，unittest 的範例要測的內容本身就比 pytest 的複雜&lt;/p&gt;
&lt;p&gt;所以接下來會用 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 為例子&lt;br&gt;
討論如何從 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/v1.0"&gt;v1.0&lt;/a&gt; 的 unittest 風格改成在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/83e48c6443303045ed1de2f020297c3110bb1300"&gt;commit 83e4&lt;/a&gt; 的 pytest 風格&lt;/p&gt;
&lt;p&gt;如果想跟著程式碼跑，可以把專案 clone 下來&lt;br&gt;
（當然能貢獻專案就更棒了 XD）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# clone 專案到本地&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/pycontw/pycontw-postevent-report-generator

&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pycontw-postevent-report-generator

&lt;span class="c1"&gt;# 切換到 commit 83e4 的前一個 commit (因為commit 83e4 已經完成修正)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;83e4~1

&lt;span class="c1"&gt;# 設定環境&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="test-discovery"&gt;測試探索 (test discovery)&lt;/h3&gt;
&lt;p&gt;原本在 &lt;code&gt;REAMDE.md&lt;/code&gt; 中要跑測試的指令相當的冗長&lt;br&gt;
而且還必須要切換到 test 資料夾 (i.e., &lt;code&gt;cd test&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;unittest&lt;span class="w"&gt; &lt;/span&gt;discover&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;./&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_*.py&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這其實是一開始的設計有誤&lt;br&gt;
以下是 test 資料夾的內容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;└── test
    …
    ├── test_sponsor.py
    └── test_title.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;test (或 tests) 本身也必須是一個套件&lt;br&gt;
所以必須先在 test 內加入 &lt;code&gt;__init__.py&lt;/code&gt;&lt;br&gt;
（這是我在寫程式初期想開始寫測試遇到一個很大的坎 😢）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;└── test
    ├── __init__.py
    ...
    ├── test_sponsor.py
    └── test_title.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;做了改變後，就能改用更簡潔的指令跑測試了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為 pytest 也支援 unittest 風格&lt;br&gt;
所以也可以直接使用 &lt;code&gt;pytest&lt;/code&gt; 指令跑測試&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過在前一篇有提到使用虛擬環境的概念了&lt;br&gt;
所以應該要確保每個專案的指令，都只在虛擬環境中跑&lt;br&gt;
（因為前一篇建議使用 pipenv，之後的範例都會用 pipenv）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 將 pytest 安裝到開發環境&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--dev

&lt;span class="c1"&gt;# 執行 pytest&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pytest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時候的測試其實會有許多錯誤&lt;br&gt;
但執行後應該要能看到類似的畫面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;===================== test session starts ======================
platform darwin -- Python 3.7.3, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /....../pycontw-postevent-report-generator
plugins: mock-2.0.0, cov-2.8.1
collected 9 items

test/test_sponsor.py FFFFFFFF                            [ 88%]
test/test_title.py F                                     [100%]

=========================== FAILURES ===========================
......
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;F&lt;/code&gt; 表示測試沒有通過，如果出現 &lt;code&gt;.&lt;/code&gt; 則表示成功&lt;/p&gt;
&lt;h3 id="step-0"&gt;Step 0: 追朔程式碼&lt;/h3&gt;
&lt;p&gt;以 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/blob/v1.0/test/test_sponsor.py#L6"&gt;test/test_sponsor.py::TestSponsor::test_sponsor_number&lt;/a&gt; 為例&lt;br&gt;
（在套件以及模組的層級後， pytest 會使用 &lt;code&gt;::&lt;/code&gt; 來區別不同的層級，試試 &lt;code&gt;pipenv run pytest -v&lt;/code&gt; 指令）&lt;/p&gt;
&lt;p&gt;原本 unittest 風格的程式碼中，做了三件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用了 &lt;code&gt;setUp&lt;/code&gt; 做 &lt;code&gt;self.sponsors&lt;/code&gt; 的初始化&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;test_sonpsor_number&lt;/code&gt; 取用 &lt;code&gt;setUp&lt;/code&gt; 中初始過的 &lt;code&gt;self.sponsors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;self.assertEqual&lt;/code&gt; 來看 &lt;code&gt;self.sponsors&lt;/code&gt; 的長度是否等於 1&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;atta.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSponsor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sponsors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./data/packages.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                            &lt;span class="s1"&gt;&amp;#39;./data/sponsors.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsors&lt;/span&gt;

        &lt;span class="o"&gt;......&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;.......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="step-1-fixture-setup-teardown"&gt;Step 1: 使用 fixture 取代 setUp / tearDown&lt;/h3&gt;
&lt;p&gt;將 &lt;code&gt;unittest.TestCase&lt;/code&gt; 移除，改用 pytest 的 &lt;a href="https://docs.pytest.org/en/6.1.1/fixture.html"&gt;fixture&lt;/a&gt; 取代 &lt;code&gt;setUp&lt;/code&gt;&lt;br&gt;
fixture 跟 &lt;code&gt;setUp / tearDown&lt;/code&gt; 的概念上相近，都是用來 準備 / 清除 資源&lt;br&gt;
但 fixture 更加的輕量且更有彈性&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;test_sponsor_number&lt;/code&gt; 中加入參數 &lt;code&gt;sponsors&lt;/code&gt;&lt;br&gt;
pytest 會去找 fixtures 中是否有 &lt;code&gt;sponsors&lt;/code&gt; 並將之代入&lt;/p&gt;
&lt;p&gt;接著將較為冗長的 &lt;code&gt;assertEqual&lt;/code&gt;，改為 &lt;code&gt;assert&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;report_generator.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSponsor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test/data/packages.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&lt;/span&gt;

        &lt;span class="o"&gt;......&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(p.s. 在這裡 &lt;code&gt;atta&lt;/code&gt; 已經重新命名為 &lt;code&gt;report_generator&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id="step-2-markskip"&gt;Step 2: 使用 mark.skip 跳過部分測試&lt;/h3&gt;
&lt;p&gt;原本的測試中有些邏輯錯誤&lt;br&gt;
但我只想先完成風格的轉換，還不打算修正&lt;br&gt;
因此先使用了 &lt;a href="http://doc.pytest.org/en/6.1.1/example/markers.html"&gt;markers&lt;/a&gt;&lt;br&gt;
在想跳過的測試案例前面加上 &lt;code&gt;@pytest.mark.skip&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;report_generator.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSponsor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No bronze sponsor in test case&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_promotion_web_click_rank_bronze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NA_CONTENT_MESSAGE&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bronze_sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web_click_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行 &lt;code&gt;pipenv run pytest&lt;/code&gt; 後，就會發現有部分的測試案例變成了 &lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;========== test session starts ==========
platform darwin -- Python 3.7.3, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /....../pycontw-postevent-report-generator
plugins: mock-2.0.0, cov-2.8.1
collected 9 items

test/test_sponsor.py ....ssss     [ 88%]
test/test_title.py .              [100%]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="step-3-class"&gt;Step 3: 扁平化 - 移除不必要的 class&lt;/h3&gt;
&lt;p&gt;從上面的範例可以看到， &lt;code&gt;self&lt;/code&gt; 其實並不必要&lt;br&gt;
這些測試案例不需要是一個類別&lt;br&gt;
因此可以更近一步，把 &lt;code&gt;TestSponsor&lt;/code&gt; 類別移除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;report_generator.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test/data/packages.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="s2"&gt;&amp;quot;test/data/sponsors.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這並不代表用類別就是錯的&lt;br&gt;
一般我會在模組內測試案例比較多的時候，使用類別來將相似的測試案例歸在同一類&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;因為篇幅的關係，我決定把測試分成兩篇文章&lt;br&gt;
&lt;del&gt;絕對不是因為我寫不完了&lt;/del&gt;&lt;br&gt;
盡請期待明天更深入的 pytest 應用 😄&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;非常推薦用這本書上手 &lt;code&gt;pytest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?time_continue=201&amp;amp;v=pX1_I_sEi8k"&gt;快快樂樂成為 Coding Ninja (by pytest) - PyCon APAC 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing/"&gt;Pytest: Rapid Simple Testing -  Swiss Python Summit 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Test"></category></entry><entry><title>Python Table Manners - 虛擬環境和套件管理</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-dependency-mangement" rel="alternate"></link><published>2020-02-23T12:24:00+08:00</published><updated>2020-10-04T15:22:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-23:/posts/tech/2020/02/python-table-manners-dependency-mangement</id><summary type="html">&lt;p&gt;開始 Python 專案時，第一步都是建立一個專屬於專案的虛擬環境&lt;br&gt;
會需要這麼做是為了避免不同的 Python 專案需要使用到不同版本的套件&lt;br&gt;
假設專案 A 需要 &lt;code&gt;lib==2.3.5&lt;/code&gt; 而專案 B 需要 &lt;code&gt;lib==1.0.0&lt;/code&gt;&lt;br&gt;
如果 &lt;code&gt;lib&lt;/code&gt; 都被安裝在本機中，就會有其中一個專案跑不起來&lt;br&gt;
所以只要兩個專案都有建立虛擬環境，它們就都能在自己的虛擬環境中安裝所需的 &lt;code&gt;lib&lt;/code&gt; 版本&lt;br&gt;
理想上，本機的環境是不需要安裝套件的&lt;br&gt;
因為每一個專案都會在個字的虛擬環境內執行，並安裝各自的套件&lt;/p&gt;
</summary><content type="html">&lt;p&gt;開始 Python 專案時，第一步都是建立一個專屬於專案的虛擬環境&lt;br&gt;
會需要這麼做是為了避免不同的 Python 專案需要使用到不同版本的套件&lt;br&gt;
假設專案 A 需要 &lt;code&gt;lib==2.3.5&lt;/code&gt; 而專案 B 需要 &lt;code&gt;lib==1.0.0&lt;/code&gt;&lt;br&gt;
如果 &lt;code&gt;lib&lt;/code&gt; 都被安裝在本機中，就會有其中一個專案跑不起來&lt;br&gt;
所以只要兩個專案都有建立虛擬環境，它們就都能在自己的虛擬環境中安裝所需的 &lt;code&gt;lib&lt;/code&gt; 版本&lt;br&gt;
理想上，本機的環境是不需要安裝套件的&lt;br&gt;
因為每一個專案都會在個字的虛擬環境內執行，並安裝各自的套件&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#venv"&gt;venv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipenv"&gt;pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pipenv_1"&gt;安裝 pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;初始化環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;安裝套件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;安裝開發環境套件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;在虛擬環境中執行指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;其他功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#poetry"&gt;Poetry&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;基本使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;其他工具&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pip-tools"&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dephell"&gt;dephell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;自動偵測套件版本並適當升級的服務&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bouns-pipx-python"&gt;Bouns: pipx - 在系統安裝 Python 工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="venv"&gt;venv&lt;/h2&gt;
&lt;p&gt;建立虛擬環境，最基本作法是使用 &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt;&lt;br&gt;
透過以下幾個指令建立，並把需要的套件寫入 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 建立 Python 虛擬環境到 ./venv&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;./venv

&lt;span class="c1"&gt;# 啟動 Python 虛擬環境 (for Unix like)&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;venv/bin/activate

&lt;span class="c1"&gt;# 將虛擬環境用到的套件寫入 requirements.txt&lt;/span&gt;
pip&lt;span class="w"&gt; &lt;/span&gt;freeze&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;p.s. 基本上這個系列文會以 Unix 系統（macOS, Linux）為主&lt;/p&gt;
&lt;p&gt;但這個做法會遇到幾個問題&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忘記開啟/關閉虛擬環境&lt;/li&gt;
&lt;li&gt;忘記把新安裝的套件寫入 requirements.txt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip freeze&lt;/code&gt; 安裝一些不必要的套件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一開始我會使用 &lt;a href="https://github.com/bndr/pipreqs"&gt;pipreqs&lt;/a&gt; 來解決 &lt;code&gt;pip freeze&lt;/code&gt; 所造成的雜亂&lt;br&gt;
但是忘記更新 requirements.txt 跟開關虛擬環境的問題還是存在&lt;br&gt;
常常我在本地測試成功，push 到遠端的時候又告訴我少了套件&lt;br&gt;
只好再送一個 Pull Request 修正......&lt;/p&gt;
&lt;h2 id="pipenv"&gt;pipenv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;pipenv&lt;/a&gt; 可以用來同時管理虛擬環境跟套件&lt;br&gt;
pipenv 不使用 &lt;code&gt;requriements.txt&lt;/code&gt;，而是使用自定義的 &lt;code&gt;Pipfile&lt;/code&gt; 跟 &lt;code&gt;Pipfile.lock&lt;/code&gt; 管理套件&lt;br&gt;
它的好處是能透過單一指令將套件安裝到虛擬環境中，並且更新到 &lt;code&gt;Pipfile&lt;/code&gt; 以及 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="pipenv_1"&gt;安裝 pipenv&lt;/h3&gt;
&lt;p&gt;根據不同的系統，可以在 &lt;a href="https://pipenv.readthedocs.io/en/latest/install/#installing-pipenv"&gt;Installing Pipenv&lt;/a&gt; 找到安裝 pipenv 的方式&lt;/p&gt;
&lt;p&gt;不過最簡單的做法還是透過 &lt;code&gt;pip&lt;/code&gt; 安裝&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="w"&gt; &lt;/span&gt;pipenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;初始化環境&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 初始化虛擬環境&lt;/span&gt;
&lt;span class="c1"&gt;# 如果 Pipfile 跟 Pipfile.lock 還不存在，則會產生&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install

&lt;span class="c1"&gt;# 指定用特定版本的 Python 來產生虛擬環境&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.4

&lt;span class="c1"&gt;# 移除虛擬環境&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;--rm

&lt;span class="c1"&gt;# 列出虛擬環境的所在位置&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;--where
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化虛擬環境後，會產生 &lt;code&gt;Pipfile&lt;/code&gt; 跟 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pipfile&lt;/code&gt; 是 &lt;a href="https://github.com/toml-lang/toml"&gt;toml&lt;/a&gt; 格式的檔案&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt;: 指定要去找套件的倉儲，預設是 &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; ，也可以再加上私有的 PyPI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dev-package&lt;/strong&gt;: 開發環境所需套件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;packages&lt;/strong&gt;: 預設安裝套件（通常是 Production 用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[source]]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pypi&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://pypi.org/simple&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;verify_ssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[dev-packages]&lt;/span&gt;

&lt;span class="k"&gt;[packages]&lt;/span&gt;

&lt;span class="k"&gt;[requires]&lt;/span&gt;
&lt;span class="n"&gt;python_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pipfile.lock&lt;/code&gt; 是 JSON 格式的檔案&lt;ul&gt;
&lt;li&gt;同樣是記錄安裝的套件，但會同時記錄下套件相依的其他套件（假設安裝了 &lt;code&gt;requests&lt;/code&gt; 套件，而 &lt;code&gt;requests&lt;/code&gt; 相依於 &lt;code&gt;urllib3&lt;/code&gt; ，則 &lt;code&gt;requests&lt;/code&gt; 跟 &lt;code&gt;urllibs&lt;/code&gt; 都會列在這）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;sha256&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;pipfile-spec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;requires&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;python_version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;sources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pypi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://pypi.org/simple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;verify_ssl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;develop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通常沒有什麼特別的理由，可以不用動到 &lt;code&gt;Pipfile&lt;/code&gt; 跟 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;br&gt;
交給 &lt;code&gt;pipenv&lt;/code&gt; 管理就好&lt;/p&gt;
&lt;h3 id="_2"&gt;安裝套件&lt;/h3&gt;
&lt;p&gt;pipenv 的另一個好處是，它的 API 基本上跟 &lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; 是一樣的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝套件&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;lt;version&amp;gt;

&lt;span class="c1"&gt;# 解除安裝套件&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;uninstall&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;

&lt;span class="c1"&gt;# 更新套件&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以安裝 &lt;a href="https://requests.readthedocs.io/en/master/"&gt;requests&lt;/a&gt; 為例&lt;br&gt;
會更新在 Pipfile 的 &lt;strong&gt;packages&lt;/strong&gt; 區段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[packages]&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pipfile.lock 中除了 &lt;code&gt;requests&lt;/code&gt; 外，還會列出 &lt;code&gt;requests&lt;/code&gt; 的相依套件 &lt;code&gt;urllib3&lt;/code&gt; (Ref: &lt;a href="https://github.com/psf/requests/blob/v2.22.0/setup.py#L47"&gt;setup.py#L47&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;......&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;......&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;requests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;hashes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha256:11e007a8a2aa0323f5a921e9e6a2d7e4e67d9877e85773fba9ba6419025cbeb4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha256:9cf5292fcd0f598c671cfc1e0d7d1a7f13bb8085e9a590f48c010551dc6c4b31&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pypi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;==2.22.0&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;urllib3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;hashes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha256:3de946ffbed6e6746608990594d08faac602528ac7015ac28d33cee6a45b7398&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha256:9a107b99a5393caf59c7aa3c1249c16e6879447533d0887f4336dde834c7be86&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;==1.25.6&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;......&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以注意到每個安裝的套件會有三個欄位 &lt;strong&gt;index&lt;/strong&gt;, &lt;strong&gt;version&lt;/strong&gt; 和 &lt;strong&gt;hashes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: 套件從哪裡裝的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt;: 安裝的版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hashes&lt;/strong&gt;: 下載這個套件時產生的雜湊值 (hashing)&lt;br&gt;
  只要套件內容有改變，就會產生不同的雜湊值&lt;br&gt;
  可以用於驗證下次安裝時，這個套件的內容是否跟這次相同&lt;br&gt;
  有些套件雖然改了內容，但沒有更新版本號&lt;br&gt;
  雜湊值可以用來避免使用者在沒注意到的情況下安裝了不同的套件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面兩個指令就會運用到 &lt;strong&gt;hashes&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝時同時確認 Pipfile.lock ，如果 lock 檔跟實際安裝的有衝突，則會取消安裝&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--deploy

&lt;span class="c1"&gt;# 直接使用 Pipfile.lock 安裝套件&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--ignore-pipfile
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;安裝開發環境套件&lt;/h3&gt;
&lt;p&gt;有些套件（e.g., 測試工具）不需要在 Production 的環境上安裝&lt;br&gt;
以往會將不同的套件用不同的 &lt;code&gt;requirements.txt&lt;/code&gt; 來管理 (e.g.,  &lt;code&gt;requirments/dev.txt&lt;/code&gt;, &lt;code&gt;requirements/prod.txt&lt;/code&gt;)&lt;br&gt;
pipenv 則是將開發環境才需要的套件寫在 Pipfile 的 &lt;strong&gt;dev-packages&lt;/strong&gt; 內&lt;br&gt;
只要在安裝時後面加上選項 &lt;code&gt;--dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安裝開發環境套件&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;lt;version&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;--dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;在虛擬環境中執行指令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 在虛擬環境中執行 [command]&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;command&amp;gt;

&lt;span class="c1"&gt;# e.g.,&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;your_program.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;雖然可以透過 &lt;code&gt;pipenv shell&lt;/code&gt; 進入到虛擬環境，但我不太建議使用&lt;br&gt;
原因是我常常會進入虛擬環境後，亂下 &lt;code&gt;pip install &amp;lt;package&amp;gt;&lt;/code&gt; 的指令&lt;br&gt;
然後就沒被 Pipfile 給記錄到...&lt;/p&gt;
&lt;h3 id="_5"&gt;其他功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;: 檢查安裝的套件是否有已知的安全性問題&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv graph&lt;/code&gt;: 檢視整個相依套件的相依圖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv open &amp;lt;package&amp;gt;&lt;/code&gt;: 開啟安裝的套件（不知道什麼時候養成了「懶得看文件，直接 trace code」的習慣...）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="poetry"&gt;Poetry&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt; 是目前很多人說可以取代 pipenv 的工具&lt;br&gt;
除了 pipenv 包含的功能外，它還能用來初始化專案、上傳套件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pipenv 被抱怨的原因&lt;ul&gt;
&lt;li&gt;之前有相隔快兩年沒有新的版本釋出（2020 年倒是更新了幾次）&lt;/li&gt;
&lt;li&gt;lock 太慢&lt;/li&gt;
&lt;li&gt;不會自動跟 setup.py 中的 &lt;code&gt;install_rquires&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;poetry 使用下來體驗還算不錯&lt;br&gt;
而且它採用 pyproject.toml 來做配置設定，這點我就蠻喜歡的&lt;/p&gt;
&lt;p&gt;我會建議如果要寫 Python 函式庫的話，可以使用 poetry&lt;br&gt;
至於 Python 應用，使用 pipenv 還是 poetry 就看個人的喜好了&lt;/p&gt;
&lt;h3 id="_6"&gt;基本使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 初始化 poetry 專案&lt;/span&gt;
poetry&lt;span class="w"&gt; &lt;/span&gt;init

&lt;span class="c1"&gt;# 安裝套件&lt;/span&gt;
poetry&lt;span class="w"&gt; &lt;/span&gt;install

&lt;span class="c1"&gt;# 加入新的套件&lt;/span&gt;
poetry&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;

&lt;span class="c1"&gt;# 移除套件&lt;/span&gt;
poetry&lt;span class="w"&gt; &lt;/span&gt;remove&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;package&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_7"&gt;其他工具&lt;/h2&gt;
&lt;h3 id="pip-tools"&gt;pip-tools&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; 主要的功能是產生 hashes ，並不能用來管理虛擬環境&lt;br&gt;
這套工具比較適合習慣使用 pip 跟 virtualenv ，但又想要有 Pipfile.lock 的功能的情況&lt;/p&gt;
&lt;h3 id="dephell"&gt;dephell&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dephell/dephell"&gt;dephell&lt;/a&gt; 是個 all-in-one 的工具&lt;br&gt;
當初看到覺得很有趣，但還沒有時間好好研究&lt;br&gt;
目前使用到對我最有幫助的功能是它能在轉換不同的格式 (e.g., Pipfile → pyproject.toml)&lt;/p&gt;
&lt;h3 id="_8"&gt;自動偵測套件版本並適當升級的服務&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyup.io"&gt;pyup.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bouns-pipx-python"&gt;Bouns: pipx - 在系統安裝 Python 工具&lt;/h2&gt;
&lt;p&gt;雖然建議 Python 的套件都裝在虛擬環境，但如果平時要使用的工具 (e.g., &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt;, &lt;a href="https://pypi.org/project/awscli/"&gt;awscli&lt;/a&gt;) 都裝在虛擬環境&lt;br&gt;
每次使用這些工具都得進入虛擬環境就太麻煩了&lt;br&gt;
&lt;a href="https://pipxproject.github.io/pipx/"&gt;pipx&lt;/a&gt; 會為每個工具創建一個專屬的虛擬環境，並且設定好 PATH&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 pipx，並設定 PATH&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="w"&gt; &lt;/span&gt;pipx
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;ensurepath
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;安裝工具&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;package&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright/"&gt;這樣的開發環境沒問題嗎？ - PyCon TW 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management/"&gt;Pipenv: The Future of Python Dependency Management - PyCon US 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-de-2018/2019/12/python-dependency-management/"&gt;Python Dependency Management - PyCon DE 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Dependency"></category></entry><entry><title>Python Table Manners 系列</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-series" rel="alternate"></link><published>2020-02-22T19:32:00+08:00</published><updated>2020-03-18T10:20:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-22:/posts/tech/2020/02/python-table-manners-series</id><summary type="html">&lt;!--more--&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/leew/python-table-manners-a-clean-style-at-pycon-ca-2019"&gt;Python Table Manners - A Clean Style&lt;/a&gt; 是我在 &lt;a href="https://blog.wei-lee.me/posts/tech/2019/12/pycon-ca-2019"&gt;PyCon CA 2019&lt;/a&gt; 給的一個分享&lt;br&gt;
內容是介紹在開發 Python 專案時能用的工具們，並且把它們串成一個工作流&lt;br&gt;
希望 …&lt;/p&gt;</summary><content type="html">&lt;!--more--&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/leew/python-table-manners-a-clean-style-at-pycon-ca-2019"&gt;Python Table Manners - A Clean Style&lt;/a&gt; 是我在 &lt;a href="https://blog.wei-lee.me/posts/tech/2019/12/pycon-ca-2019"&gt;PyCon CA 2019&lt;/a&gt; 給的一個分享&lt;br&gt;
內容是介紹在開發 Python 專案時能用的工具們，並且把它們串成一個工作流&lt;br&gt;
希望能讓剛接觸 Python 的朋友們，能在早期就碰到這些好用的工具，少踩一些雷&lt;/p&gt;
&lt;p&gt;原本打算找個時間把這些內容整理成文章&lt;br&gt;
但在沒人督促的情況下，當然就忘了 XD&lt;br&gt;
剛好看到 &lt;a href="https://www.accupass.com/event/2001190943344186137000"&gt;連續七天寫作挑戰，解放你的技術創作力&lt;/a&gt;&lt;br&gt;
就給個理由來督促一下自己&lt;/p&gt;
&lt;p&gt;除了在 PyCon CA 分享中提到的內容外，還會多整理一些在貢獻 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 學到的工具&lt;/p&gt;
&lt;p&gt;目前預計會包含以下的內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-dependency-mangement"&gt;虛擬環境和套件管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-test-1"&gt;測試（ㄧ）&lt;/a&gt; / &lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-test-2"&gt;測試（二）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-coding-style"&gt;程式碼風格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-manage-trivial-tasks"&gt;管理繁瑣任務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-pre-commit"&gt;pre-commit: git commit 前做完檢查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/03/python-table-manners-commitizen"&gt;Commitizen: 規格化 commit message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/03/python-table-manners-security"&gt;安全性檢查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/04/python-table-manners-documentation"&gt;文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2020/12/python-table-manner-continuous-integration"&gt;持續整合/部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wei-lee.me/posts/tech/2021/01/python-table-manners-cookiecutter"&gt;Cookiecutter 程式專案模板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當初整理 PyCon CA 2019 投影片的時候，大多是把這些工具應用到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt;&lt;br&gt;
這是 PyCon TW 用來自動產生會後分析報表的工具，歡迎一起來貢獻～&lt;br&gt;
當然能一起來當志工就更棒了 🎉&lt;br&gt;
👉 &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSe6whkZAEZD10LlPQuSWRYsshySoNR_pux8grGZ0OgmOIkQ3g/viewform"&gt;PyCon Taiwan 志工招募&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;參考資料&lt;/h2&gt;
&lt;p&gt;有些文章會同時涵括多過我想提的主題，我會把那些參考資料放在這&lt;br&gt;
如果是我聽過的 PyCon 演講，我會連結到我自己的 &lt;a href="https://wei-lee.me/pycon-note/"&gt;PyCon Note&lt;/a&gt;，裡面會有該場演講的相關資訊和我的筆記&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jonas.r.kemper/understanding-best-practice-python-tooling-by-comparing-popular-project-templates-6eba49229106"&gt;Understanding best-practice Python tooling by comparing popular project templates&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這篇文章整理和比較了 18 個比較有名的 Python 專案模板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourcery.ai/blog/python-best-practices/"&gt;How to set up a perfect Python project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這篇文章整理上面那篇文章很推薦其中一個模板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jacobian.org/2019/nov/11/python-environment-2020/"&gt;My Python Development Environment, 2020 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas/"&gt;Modern development environments for Pythonistas - PyCon JP 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category></entry><entry><title>pipenv 和 poerty 如何處理在不同作業系統下相依套件不同</title><link href="https://blog.wei-lee.me/posts/tech/2020/02/how-pipenv-and-poetry-stores-if-dependencies-platform-dependent" rel="alternate"></link><published>2020-02-12T11:45:00+08:00</published><updated>2020-02-12T11:45:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-02-12:/posts/tech/2020/02/how-pipenv-and-poetry-stores-if-dependencies-platform-dependent</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;遇到的問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;問題的根源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipenv"&gt;pipenv 怎麼處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#poetry"&gt;Poetry 怎麼處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;總結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;遇到的問題&lt;/h2&gt;
&lt;p&gt;用 &lt;a href="https://twine.readthedocs.io/en/latest/"&gt;twine&lt;/a&gt; 上傳 Python 套件&lt;br&gt;
在 mac 的本地端測試有成功，但丟上 CI 跑 …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;遇到的問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;問題的根源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipenv"&gt;pipenv 怎麼處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#poetry"&gt;Poetry 怎麼處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;總結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;遇到的問題&lt;/h2&gt;
&lt;p&gt;用 &lt;a href="https://twine.readthedocs.io/en/latest/"&gt;twine&lt;/a&gt; 上傳 Python 套件&lt;br&gt;
在 mac 的本地端測試有成功，但丟上 CI 跑在 Ubuntu 的 image 內會缺少 &lt;code&gt;jeepney&lt;/code&gt; 套件&lt;/p&gt;
&lt;h2 id="_2"&gt;問題的根源&lt;/h2&gt;
&lt;p&gt;目前最新版 (3.1.1) 的 twine 相依於套件 &lt;a href="https://github.com/jaraco/keyring"&gt;keyring&lt;/a&gt; (&lt;a href="https://github.com/pypa/twine/blob/3.1.1/setup.cfg#L44"&gt;setup.cfg#L44&lt;/a&gt;)&lt;br&gt;
而 keyring 在不同的作業系統中，相依的套件是不同的 (&lt;a href="https://github.com/jaraco/keyring/blob/master/setup.cfg#L30"&gt;setup.cfg#L30&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;pywin&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="n"&gt;-ctypes&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="err"&gt;,!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sys_platform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;win32&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SecretStorage&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sys_platform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;linux&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;jeepney&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sys_platform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;linux&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;importlib_metadata&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3.8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我缺少的的確就是那幾個 &lt;code&gt;sys_platform=="linux"&lt;/code&gt; 的套件&lt;/p&gt;
&lt;h2 id="pipenv"&gt;pipenv 怎麼處理&lt;/h2&gt;
&lt;p&gt;基本上 &lt;code&gt;pipenv&lt;/code&gt; 不算有解決這個問題， &lt;code&gt;pipenv&lt;/code&gt; 只會將目前系統的所需套件寫進 &lt;strong&gt;Pipfile.lock&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以 twine 為例，在 macOS 透過 &lt;code&gt;pipenv&lt;/code&gt; 安裝 ，跑 &lt;code&gt;pipenv graph&lt;/code&gt;指令&lt;br&gt;
就會發現 keyring 只會直接相依於 importlib-metadata&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  - keyring [required: &amp;gt;=15.1, installed: 21.1.0]
    - importlib-metadata [required: Any, installed: 1.5.0]
      - zipp [required: &amp;gt;=0.5, installed: 2.2.0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但換到 Ubuntu 上跑，就會多了 SecretStorage 跟 jeepney&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  - keyring [required: &amp;gt;=15.1, installed: 21.1.0]
    - importlib-metadata [required: Any, installed: 1.5.0]
      - zipp [required: &amp;gt;=0.5, installed: 2.2.0]
    - jeepney [required: &amp;gt;=0.4.2, installed: 0.4.2]
    - SecretStorage [required: &amp;gt;=3, installed: 3.1.2]
      - cryptography [required: Any, installed: 2.8]
        - cffi [required: &amp;gt;=1.8,!=1.11.3, installed: 1.14.0]
          - pycparser [required: Any, installed: 2.19]
        - six [required: &amp;gt;=1.4.1, installed: 1.14.0]
      - jeepney [required: &amp;gt;=0.4.2, installed: 0.4.2]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這個問題也有其他人提過 (&lt;a href="https://github.com/pypa/pipenv/issues/3902"&gt;Cross-platform Pipenv.lock? #3902&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; 貢獻者給的建議是使用 &lt;code&gt;pipenv install --keep-outdated&lt;/code&gt;&lt;br&gt;
但這個指令的說明是 &lt;strong&gt;Keep out-dated dependencies from being updated in Pipfile.lock.&lt;/strong&gt;&lt;br&gt;
總覺得好像不是在這個 use case 下使用的&lt;/p&gt;
&lt;p&gt;最後我的解決方案是是把那幾個平台相依的套件安裝進去&lt;br&gt;
原因是在 production 的環境就是需要這幾個多安裝的套件，我在 local 多裝幾個套件好像也沒什麼差&lt;br&gt;
但如果今天是相反的狀況，我可能就會傾向 local 跑在 docker 裡&lt;/p&gt;
&lt;h2 id="poetry"&gt;Poetry 怎麼處理&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;poerty&lt;/a&gt; 對這個問題則是有比較好的解法&lt;/p&gt;
&lt;p&gt;透過 poetry 安裝 twine 後&lt;br&gt;
產生的 &lt;strong&gt;poetry.lock&lt;/strong&gt; 會把 &lt;code&gt;marker = "sys_platform == \"linux\""&lt;/code&gt; 記錄下來&lt;br&gt;
實際 &lt;code&gt;poetry shell&lt;/code&gt; 進去看，的確也沒多安裝這些套件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[package]]&lt;/span&gt;
&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Store and access your passwords safely.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;keyring&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;python-versions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;=3.6&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;21.1.0&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[package.dependencies]&lt;/span&gt;
&lt;span class="n"&gt;SecretStorage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;=3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;jeepney&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;=0.4.2&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pywin32-ctypes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;0.1.0 || &amp;gt;0.1.0,&amp;lt;0.1.1 || &amp;gt;0.1.1&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;......&lt;/span&gt;

&lt;span class="k"&gt;[[package]]&lt;/span&gt;
&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python bindings to FreeDesktop.org Secret Service API&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sys_platform == &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;linux&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;secretstorage&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;python-versions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;=3.5&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3.1.2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;總結&lt;/h2&gt;
&lt;p&gt;poetry 在處理不同平台相依套件不同的狀況，處理得比較好&lt;br&gt;
它會把所有需要的資訊記錄下來，在不同的平台進行不同的安裝&lt;/p&gt;
&lt;p&gt;如果要用 pipenv 則可以使用 &lt;code&gt;pipenv install --keep-outdated&lt;/code&gt;&lt;br&gt;
或者就直接多安裝這幾個不是每個平台都需要的套件&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Dependency"></category></entry><entry><title>透過 GitHub Action 自動發佈 Pelican 部落格文章</title><link href="https://blog.wei-lee.me/posts/tech/2020/01/automate-publish-pelican-through-github-action" rel="alternate"></link><published>2020-01-16T15:35:00+08:00</published><updated>2020-01-16T15:35:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-01-16:/posts/tech/2020/01/automate-publish-pelican-through-github-action</id><summary type="html">&lt;p&gt;最近因為在貢獻 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt;，開始碰到 &lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt;&lt;br&gt;
（ Python 也有自己的 commitizen 了！！！）&lt;br&gt;
記錄一下怎麼應用到發布部落格文章&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近因為在貢獻 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt;，開始碰到 &lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt;&lt;br&gt;
（ Python 也有自己的 commitizen 了！！！）&lt;br&gt;
記錄一下怎麼應用到發布部落格文章&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#before-github-action"&gt;Before GitHub Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#working-on-github-action"&gt;Working on GitHub Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#after-github-action"&gt;After GitHub Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="before-github-action"&gt;Before GitHub Action&lt;/h2&gt;
&lt;p&gt;要發佈一個新文章，我會做兩件事&lt;br&gt;
1. 將原始碼推到 GitHub 上&lt;br&gt;
2. 透過原始碼產生靜態頁面，並且推到 gh-pages 這個分支上&lt;/p&gt;
&lt;p&gt;只有第二步是必要的，但也沒不把原始碼推上去的理由&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 初始化部落格時會產生 &lt;code&gt;Makefile&lt;/code&gt; 和給 &lt;a href="https://github.com/pyinvoke/invoke"&gt;invoke&lt;/a&gt; 用的 &lt;code&gt;tasks.py&lt;/code&gt;&lt;br&gt;
裡面會包好如 build, publish 等常見指令&lt;br&gt;
預設會透過 &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; 推到 GitHub Page&lt;/p&gt;
&lt;h2 id="working-on-github-action"&gt;Working on GitHub Action&lt;/h2&gt;
&lt;p&gt;將我原本做的事整理成 GitHub Action 該做的事，就會變成這樣&lt;br&gt;
1. &lt;strong&gt;Check out&lt;/strong&gt;: Check Out 到這個分支&lt;br&gt;
2. &lt;strong&gt;Set up Python&lt;/strong&gt;: 設定 Python 環境&lt;br&gt;
3. &lt;strong&gt;Install dependencies&lt;/strong&gt;: 安裝 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 和相關套件&lt;br&gt;
4. &lt;strong&gt;Build and Deploy&lt;/strong&gt;: 產生原始碼推上去&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;publish post&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;content&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check out&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set up Python&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.7&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;python -m pip install pipenv&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;pipenv --version&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;pipenv install&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build and Deploy&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;pipenv run inv github&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這份設定檔要放在專案目錄的 &lt;code&gt;.github/workflows/&lt;/code&gt; 下&lt;br&gt;
至於要命名成什麼都可以&lt;br&gt;
另外建議使用 yamllint 來檢查 yaml 語法&lt;br&gt;
我遇過太多次縮排造成的錯誤了&lt;/p&gt;
&lt;p&gt;這份設定檔大致上算直觀&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;name: 這個 workflow 的名稱&lt;/li&gt;
&lt;li&gt;on: 在什麼情況下才要執行這個 workflow&lt;/li&gt;
&lt;li&gt;jobs: 要執行哪些任務，目前我只執行 publish 這件事，下面的 step 則是描述我前面說要做的事&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這麼做之後，我遇到了兩個問題: &lt;strong&gt;submodule&lt;/strong&gt; 跟 &lt;strong&gt;ghp-import&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的部落格把主題跟套件都分出去各自成一個專案&lt;br&gt;
所以要建立部落格必須要把每一個 submodule 都一併 clone 下來&lt;br&gt;
所幸原本 GitHub Action 就有提供 (Ref: &lt;a href="https://github.com/actions/checkout#Checkout-submodules"&gt;Check-out-submodule&lt;/a&gt;)&lt;br&gt;
加上下面這段就解決了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout submodules&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;auth_header=&amp;quot;$(git config --local --get http.https://github.com/.extraheader)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git submodule sync --recursive&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git -c &amp;quot;http.extraheader=$auth_header&amp;quot; -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ghp-import 的問題則是，我沒有在上面的環境設定我的 git 資訊&lt;br&gt;
他沒有權限推到 gh-pages&lt;br&gt;
也可以透過把 URL 改成 &lt;code&gt;https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${repo_name}&lt;/code&gt; 來解決&lt;br&gt;
但我實在不太想再多去設定一些 credential&lt;br&gt;
最後找到了 &lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;actions-gh-page&lt;/a&gt;&lt;br&gt;
只要把靜態網頁在 GitHub 上 build 出來，再把結果透過這個 action 推到 gh-pages 即可&lt;br&gt;
這樣我就只需要設定 &lt;code&gt;{{ secrets.PERSONAL_ACCESS_TOKEN}}&lt;/code&gt; 這個我在其他 GitHub Action 也都用得到的 token&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;PERSONAL_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PERSONAL_ACCESS_TOKEN }}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="token" src="/images/posts-image/2020-01-16-automate-publish-pelican-through-github-action/token.png"&gt;&lt;/p&gt;
&lt;p&gt;另外，最近 GitHub 終於提供可以 rerun 的選項了&lt;br&gt;
原本失敗的時候還必須要 git reset 來強制 GitHub 重新執行 Action&lt;/p&gt;
&lt;p&gt;&lt;img alt="rebuild" src="/images/posts-image/2020-01-16-automate-publish-pelican-through-github-action/rebuild.png"&gt;&lt;/p&gt;
&lt;h2 id="after-github-action"&gt;After GitHub Action&lt;/h2&gt;
&lt;p&gt;下面就是我最後的 &lt;code&gt;.github/workflows/publish.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;publish post&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;content&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check out&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout submodules&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;auth_header=&amp;quot;$(git config --local --get http.https://github.com/.extraheader)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git submodule sync --recursive&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git -c &amp;quot;http.extraheader=$auth_header&amp;quot; -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set up Python&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.7&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;python -m pip install pipenv&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;pipenv --version&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;pipenv install&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;pipenv run inv publish&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;PERSONAL_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PERSONAL_ACCESS_TOKEN }}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="Python"></category><category term="GitHub Action"></category><category term="Blog"></category><category term="CI/CD"></category></entry><entry><title>EDBT-ICDT 2018</title><link href="https://blog.wei-lee.me/posts/tech/2020/01/edbt-icdt-2018" rel="alternate"></link><published>2020-01-03T15:30:00+08:00</published><updated>2020-01-03T15:30:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2020-01-03:/posts/tech/2020/01/edbt-icdt-2018</id><summary type="html">&lt;p&gt;整理筆記時，翻到兩年前去研討會的筆記&lt;br&gt;
想說放著也不會增值，就整理出來了&lt;br&gt;
雖然大部分的內容的印象都已經有點模糊了&lt;br&gt;
不過就加減把當初的筆記湊起來&lt;/p&gt;
</summary><content type="html">&lt;p&gt;整理筆記時，翻到兩年前去研討會的筆記&lt;br&gt;
想說放著也不會增值，就整理出來了&lt;br&gt;
雖然大部分的內容的印象都已經有點模糊了&lt;br&gt;
不過就加減把當初的筆記湊起來&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;當時我覺得最有趣的論文是 &lt;a href="http://www.vldb.org/pvldb/vol9/p1465-milo.pdf"&gt;Interactive Rule Refinement for Fraud Detection.&lt;/a&gt;&lt;br&gt;
不過竟然沒有做到太多筆記&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#day-1-keynote"&gt;Day 1 - Keynote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#large-scale-machine-learning-where-do-relational-systems-fit-in-by-chris-jermaine"&gt;Large Scale Machine Learning: Where Do Relational Systems Fit In? (by Chris Jermaine)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ml-vs-ai"&gt;ML vs AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intro-to-ml"&gt;Intro to ML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#take-home-point"&gt;Take-Home Point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#detecting-database-file-tampering-through-page-carving"&gt;Detecting Database File Tampering through Page Carving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extracting-statistical-graph-features-for-accurate-and-efficient-time-series-classification"&gt;Extracting Statistical Graph Features for Accurate and Efficient Time Series Classification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="day-1-keynote"&gt;Day 1 - Keynote&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In theoretical CS&lt;ul&gt;
&lt;li&gt;Polynomial time → easy/fast&lt;ul&gt;
&lt;li&gt;However, that's not always the case&lt;/li&gt;
&lt;li&gt;e.g., &lt;span class="math"&gt;\(O(n^{100})\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;n&lt;/code&gt; grows, even &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt; is not efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We're stuck on many problems even just in &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;No &lt;span class="math"&gt;\(N^{2-\epsilon}\)&lt;/span&gt; time algorithms known for&lt;ul&gt;
&lt;li&gt;String matching&lt;/li&gt;
&lt;li&gt;computational geometry&lt;/li&gt;
&lt;li&gt;graph problem in sparse graphs&lt;/li&gt;
&lt;li&gt;many problems from database&lt;/li&gt;
&lt;li&gt;many other problems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why are we stuck?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The traditional hardness in complexity tells us little about runtime&lt;/li&gt;
&lt;li&gt;fine-grained hardness idea&lt;ol&gt;
&lt;li&gt;identify key hard problem&lt;/li&gt;
&lt;li&gt;......&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="large-scale-machine-learning-where-do-relational-systems-fit-in-by-chris-jermaine"&gt;Large Scale Machine Learning: Where Do Relational Systems Fit In? (by Chris Jermaine)&lt;/h2&gt;
&lt;p&gt;Currently, ML community cares about new models instead of theory and fundamental ML design&lt;/p&gt;
&lt;h3 id="ml-vs-ai"&gt;ML vs AI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ML is one approach to AI&lt;/li&gt;
&lt;li&gt;Classic AI: a programmer/expert imparting knowledge to a system&lt;/li&gt;
&lt;li&gt;ML is fundamentally statistical&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="intro-to-ml"&gt;Intro to ML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Distributed ML&lt;ul&gt;
&lt;li&gt;Most ML systems use a "parameter server" model&lt;ul&gt;
&lt;li&gt;Essentially a distributed key-value pair&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Negatives&lt;ul&gt;
&lt;li&gt;Parameter server compute model very limiting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Parallel ML&lt;ul&gt;
&lt;li&gt;Each compute server runs same computation on different data&lt;/li&gt;
&lt;li&gt;Global state updated via aggregation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Want to scale out to speed up learning?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;scale out ineffective in data parallel param server&lt;ul&gt;
&lt;li&gt;no easy way to add machines and have a graph execute faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Only easy way to scale out is to add compute servers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="take-home-point"&gt;Take-Home Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Current ML systems are &lt;strong&gt;easily&lt;/strong&gt; applicable only to&lt;ul&gt;
&lt;li&gt;Relatively small model problems&lt;/li&gt;
&lt;li&gt;That is run on a single machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="detecting-database-file-tampering-through-page-carving"&gt;Detecting Database File Tampering through Page Carving&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Attack Vector: File Tampering&lt;ul&gt;
&lt;li&gt;Occurs at the OS level → outside DBMS control&lt;ul&gt;
&lt;li&gt;Bypass DBMS control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page Deconstruction&lt;ul&gt;
&lt;li&gt;Page Header&lt;ul&gt;
&lt;li&gt;Checksum&lt;/li&gt;
&lt;li&gt;PageID&lt;/li&gt;
&lt;li&gt;Row Count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DBStorageAuditor&lt;ul&gt;
&lt;li&gt;Goal: find inconsistency in storage&lt;ul&gt;
&lt;li&gt;which is created by direct file manipulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="extracting-statistical-graph-features-for-accurate-and-efficient-time-series-classification"&gt;Extracting Statistical Graph Features for Accurate and Efficient Time Series Classification&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time series: Any data that is ordered&lt;/li&gt;
&lt;li&gt;Time Series Classification&lt;ul&gt;
&lt;li&gt;similarity-based kNN (e.g., kNN-ED, kNN-DTW)&lt;ul&gt;
&lt;li&gt;similarity can be unreliable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shaplets&lt;ul&gt;
&lt;li&gt;high computation complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why multiscale&lt;ul&gt;
&lt;li&gt;sometimes global features are more important while sometimes local features are more important&lt;/li&gt;
&lt;li&gt;in this research, both global and local are considered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visibility Graphs&lt;/li&gt;
&lt;li&gt;Multiscale Visibility Graphs&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Tech"></category><category term="Conference"></category></entry><entry><title>PyCon CA 2019</title><link href="https://blog.wei-lee.me/posts/tech/2019/12/pycon-ca-2019" rel="alternate"></link><published>2019-12-23T17:51:00+08:00</published><updated>2019-12-23T17:51:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2019-12-23:/posts/tech/2019/12/pycon-ca-2019</id><summary type="html">&lt;p&gt;隔了一個多月，終於有時間可以來補 PyCon CA 2019 的心得&lt;br&gt;
這是我今年參加的第四場 PyCon&lt;br&gt;
終於是因為當 Regular Talk 的講者參加&lt;/p&gt;
</summary><content type="html">&lt;p&gt;隔了一個多月，終於有時間可以來補 PyCon CA 2019 的心得&lt;br&gt;
這是我今年參加的第四場 PyCon&lt;br&gt;
終於是因為當 Regular Talk 的講者參加&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;當初會想投稿的原因，就單純的是被 PyCon CA 的 Organizer 在 PyCon US 的閃電秀燒到&lt;br&gt;
「秋天剛好是來加拿大看楓葉的好時間」&lt;br&gt;
好像還沒來過加拿大就來投稿看看吧 XD&lt;br&gt;
雖然這麼說，這個想法也是擱置了好一段時間&lt;br&gt;
之後開始比較認真在構思，則是因為有其他想去北美一趟的理由&lt;/p&gt;
&lt;p&gt;想想之後也會協助 PyCon TW 2020 議程組&lt;br&gt;
來當講者看看，好像也會知道大家都在幹嘛（？？？&lt;/p&gt;
&lt;h2 id="_1"&gt;講者宣傳&lt;/h2&gt;
&lt;p&gt;PyCon CA 每一位講者的議程都會發篇推特宣傳&lt;br&gt;
而且會積極地邀請你一起來宣傳自己的分享&lt;br&gt;
這點還蠻有趣的&lt;br&gt;
&lt;img alt="-w375" src="/images/posts-image/2019-12-23-pycon-ca-2019/15720217074612.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;會場&lt;/h2&gt;
&lt;p&gt;PyCon CA 辦在一個市中心的宴會廳&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hall way" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893363222.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Keynote Speaker 的演講廳完全是大家可以邊吃飯邊聽議程的 XD&lt;br&gt;
&lt;img alt="Keynote" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893540925.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;議程&lt;/h2&gt;
&lt;p&gt;提醒議程的方式很好玩&lt;br&gt;
走廊會閃燈，提醒大家議程即將開始&lt;br&gt;
原本以為是劇場的三明三暗，但好像都會閃超過三次&lt;br&gt;
但還是蠻有趣的&lt;/p&gt;
&lt;p&gt;第一場我去聽 &lt;strong&gt;Understanding autistic children using BioSensors and Python!&lt;/strong&gt;&lt;br&gt;
稍微詳細一點的筆記我都丟在 &lt;a href="https://wei-lee.me/pycon-note/posts/pycon-ca-2019/2019/12/understanding-autistic-children-using-bioSensors-and-python/"&gt;note&lt;/a&gt;&lt;br&gt;
這場主要在講她們如何透過 sensor 來偵測自閉症&lt;/p&gt;
&lt;p&gt;再來我去聽 &lt;strong&gt;My Favourite Errors - Tales From The Ops Side&lt;/strong&gt; (&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-ca-2019/2019/12/my-favourite-errors/"&gt;note&lt;/a&gt;)&lt;br&gt;
主要是講各種可能遇到的 HTTP 錯誤&lt;br&gt;
除了前一場本來就是我非常有興趣的議題外，這場是我覺得 PyCon CA 數一數二精彩的議程&lt;br&gt;
雖然跟 Python 完全沒有直接關係 XD&lt;br&gt;
後來發現講者前一段時間才在 devops day 講過同樣的講題&lt;/p&gt;
&lt;p&gt;接下來連三場，我跑去主持人，就沒特別花時間做筆記&lt;br&gt;
畢竟用非母語主持其實還是有些吃力&lt;br&gt;
主持完真的太累，就一口氣休息了幾場&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modelling user journeys with Keras and neural networks&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;第一場主持的太緊張了，沒有什麼聽到 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anomaly detection in the wild&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;主要講如何偵測異常值，舉的例子都還蠻有趣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A Pythonista’s intro to Kafka: no, it’s not like Celery&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;如果對 Kafka 有興趣，這場很值得聽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二天早上是閃電秀&lt;br&gt;
登記閃電秀和其他活動的方式是上去改 PyCon CA 的 &lt;a href="https://github.com/pyconca/2019-wiki"&gt;wiki&lt;/a&gt;&lt;br&gt;
我也投了一個小小的閃電秀來宣傳一下明年的 PyCon TW (&lt;a href="https://speakerdeck.com/leew/pycon-tw-2020-at-pycon-ca-2019"&gt;slide&lt;/a&gt;)&lt;br&gt;
迴響還蠻不錯的，尤其是講到台南美食的時候 XD&lt;br&gt;
倒是這天因為太冷了，我有點睡過頭，差點就趕不上閃電秀...&lt;/p&gt;
&lt;p&gt;因為我是這天的下午分享，聽的議程就比較少&lt;br&gt;
印象最深刻的是 &lt;strong&gt;Fun with compilers: exploring languages one Python at a time&lt;/strong&gt;&lt;br&gt;
&lt;a href="[Fun with compilers: exploring languages one Python at a time](https://github.com/pdmccormick/pyconca2019-fun-with-compilers)"&gt;GitHub&lt;/a&gt;&lt;br&gt;
之前有人問我 Python 到底是編譯還是直譯&lt;br&gt;
這位講者給的答案是 Python 就只是個語言，要看用哪個 implementation 來跑&lt;br&gt;
&lt;img alt="is-python-compiled-or-interpreted" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893777395.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PySpark: avoiding common pitfalls and keeping your sanity&lt;/strong&gt; (&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-ca-2019/2019/12/pyspark-avoiding-common-pitfalls-and-keeping-your-sanity/"&gt;note&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;PySpark 跟 Python 語法上一些不同需要注意的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to Level Up&lt;/strong&gt; (&lt;a href="https://wei-lee.me/pycon-note/posts/pycon-ca-2019/2019/12/how-to-level-up/"&gt;note&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;用什麼心態面對學習，才能讓自己的技術更上一層樓&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當天因為體力跟時間的關係，還有不少議程沒聽到&lt;br&gt;
這些是之後影片出來我會想要補的議程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My Favourite Errors&lt;/li&gt;
&lt;li&gt;Fantastic anti-patterns and where to find them: pinpointing performance bottlenecks&lt;/li&gt;
&lt;li&gt;Rust accelerated Pythons&lt;/li&gt;
&lt;li&gt;How to build bulletproof integrations&lt;/li&gt;
&lt;li&gt;Forecasting and observing airfare trends using Python and neural networks&lt;/li&gt;
&lt;li&gt;Operator overloading: you're doing it wrong&lt;/li&gt;
&lt;li&gt;Put Your Data in a Box&lt;/li&gt;
&lt;li&gt;Python is a weirdo&lt;/li&gt;
&lt;li&gt;The blameless post mortem: how embracing failure makes us better&lt;/li&gt;
&lt;li&gt;Pull requests: merging good practices into your project&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-table-manners-a-clean-style"&gt;Python Table Manners - A Clean Style&lt;/h2&gt;
&lt;p&gt;我的分享主要是整理了一大堆工具，他們可能能在開發的各個不同環節用上&lt;br&gt;
我把這次的分享定位在「讓你知道有這個工具，我怎麼用它，你如果會用到，可以自己研究細節」&lt;br&gt;
因為介紹了很多工具，所以沒有辦法深入討論&lt;br&gt;
當初也有點擔心這樣的內容會不會太淺&lt;br&gt;
出發 PyCon CA 前，有先到 Taipei.py 分享一下&lt;br&gt;
得到的迴響比我預想的還好些&lt;br&gt;
PyCon CA 當天來聽的人也算不少，我想應該還算成功吧&lt;/p&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/leew/python-table-manners-a-clean-style-at-pycon-ca-2019"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="myself" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893864623.jpg"&gt;&lt;/p&gt;
&lt;p&gt;一個有趣的小插曲是&lt;br&gt;
我原本介紹了一套 Java Script 的工具 &lt;a href="https://github.com/commitizen"&gt;commitizen&lt;/a&gt;&lt;br&gt;
雖然 Python 也有 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt;&lt;br&gt;
但一開始用的時候，遇到了很多的 bug&lt;br&gt;
PyCon CA 前一個禮拜，覺得還是想介紹個 Python 的套件&lt;br&gt;
就想說去貢獻看看，能不能把這些 Bug 修完&lt;br&gt;
認真使用才發現功能大部分都沒問題，只是我剛好亂玩遇到 Bug......&lt;br&gt;
幸運的是 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt; 作者回覆超快&lt;br&gt;
PyCon CA 前，我就把遇到的 Bug 都修完了&lt;br&gt;
既然都修完了，就順便把這段的投影片也更新一下&lt;br&gt;
後來還拿著這個專案去主持一個 Sprint&lt;/p&gt;
&lt;h2 id="development-sprint"&gt;Development Sprint&lt;/h2&gt;
&lt;p&gt;參與的專案還蠻多的&lt;br&gt;
在 PyCon CA 前，幾乎沒有人想填 &lt;a href="https://github.com/pyconca/2019-wiki"&gt;wiki&lt;/a&gt;&lt;br&gt;
都是到 PyCon CA 開始後，甚至是 Sprint 開始後才慢慢有專案出現 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="Broad" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770894153368.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sprint" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770894201423.jpg"&gt;&lt;/p&gt;
&lt;p&gt;原則上不供餐，鼓勵你和你的夥伴一起出去吃飯&lt;br&gt;
其實我覺得挺好的&lt;br&gt;
雖然第二天還是訂了 Pizza XD&lt;/p&gt;
&lt;h2 id="_4"&gt;雜談&lt;/h2&gt;
&lt;p&gt;雖然今年參與的 PyCon 都有讓我覺得比起之前跟參與者的交流更多&lt;br&gt;
PyCon CA 給我的感覺是所有參與者之間最沒有隔閡的&lt;br&gt;
大家就是一群來這裡的 Pythonists&lt;br&gt;
不會因為你有不同的身份，而有不同&lt;br&gt;
但也可能是我當了志工才有這樣的感覺&lt;/p&gt;
&lt;p&gt;紀念品也還蠻有趣的，是當地很需要的毛帽&lt;br&gt;
有一度想要買，因為真的很冷...&lt;br&gt;
我在加拿大期間最冷的期間就是會期這兩天&lt;br&gt;
-8 度真的很瘋狂，但又不能不出門......&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category><category term="Conference"></category></entry><entry><title>PyCon TW 2019 - Do you know PyCon JP</title><link href="https://blog.wei-lee.me/posts/tech/2019/10/pycon-tw-2019-do-you-know-pycon-jp" rel="alternate"></link><published>2019-10-28T12:35:00+08:00</published><updated>2019-10-28T12:35:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2019-10-28:/posts/tech/2019/10/pycon-tw-2019-do-you-know-pycon-jp</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#being-a-volunteer"&gt;Being a volunteer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#during-the-conference"&gt;During the conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#talks"&gt;Talks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pep-572-the-walrus-operator"&gt;PEP 572: The Walrus Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keynote-programming-language-tourism-leave-python-and-see-the-world"&gt;Keynote: Programming Language Tourism: Leave Python and see the world!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wait-ipython-can-do-that"&gt;Wait, IPython Can Do That?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keynote-the-different-paths-we-take-as-programmers"&gt;Keynote: The Different Paths We Take As Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#do-you-know-pycon-jp"&gt;Do you know PyCon JP?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;每年的 PyCon TW 都是我在台 …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#being-a-volunteer"&gt;Being a volunteer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#during-the-conference"&gt;During the conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#talks"&gt;Talks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pep-572-the-walrus-operator"&gt;PEP 572: The Walrus Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keynote-programming-language-tourism-leave-python-and-see-the-world"&gt;Keynote: Programming Language Tourism: Leave Python and see the world!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wait-ipython-can-do-that"&gt;Wait, IPython Can Do That?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keynote-the-different-paths-we-take-as-programmers"&gt;Keynote: The Different Paths We Take As Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#do-you-know-pycon-jp"&gt;Do you know PyCon JP?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;每年的 PyCon TW 都是我在台灣蠻期待的研討會&lt;br&gt;
雖然第一年來的時候，幾乎什麼都聽不懂&lt;br&gt;
但還是被各種大家正在做正在研究的事有些震撼到&lt;br&gt;
而今年跟往年不同的是，我誤打誤撞的成為了 PyCon TW 志工&lt;/p&gt;
&lt;p&gt;多誤打誤撞呢&lt;br&gt;
大概就是我在報名了 PyCon JP 參訪團後不久突然收到了這個訊息&lt;/p&gt;
&lt;p&gt;&lt;img alt="recruit" src="/images/posts-image/2019-10-29-pycon-tw-2019/15720876979484.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我是到最近才確認了當初敲我的是誰，雖然一直有在猜 XD&lt;/p&gt;
&lt;h2 id="being-a-volunteer"&gt;Being a volunteer&lt;/h2&gt;
&lt;p&gt;我大概到七月才加入，往年這都是辦完 PyCon TW 的時間了&lt;br&gt;
所以我真的完全是菜鳥一枚&lt;br&gt;
一進入議程組，就接了聯絡 Keynote Speakers 的工作&lt;br&gt;
一開始就丟這種應該挺重要的工作給菜鳥真的是可以的嗎 XD&lt;/p&gt;
&lt;p&gt;今年我主要工作是負責各式的英文書信&lt;br&gt;
包含後來跟財務補助申請人的書信往來，我都有碰到&lt;br&gt;
英文書信還真的不是一件簡單的事啊.....&lt;br&gt;
每一封信常常還是要花我不少時間才能擬好&lt;br&gt;
不過是真的蠻有趣的，會有更多跟來自各個國家的人相處的機會&lt;br&gt;
每個 Keynote 都是很有個性的人 XD&lt;/p&gt;
&lt;p&gt;會議期間，我大概有一半的時間都在當主持人&lt;br&gt;
而且我大多都主持英文場&lt;br&gt;
英文主持沒準備好，就真的很容易會卡 QQ&lt;br&gt;
但當主持人真的是一個跟能跟講者多交流的機會，還蠻有趣的&lt;/p&gt;
&lt;p&gt;話說這是我第一次站上了 R0 的舞台了呢（笑&lt;br&gt;
&lt;img alt="Session Chair" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878688895.jpg"&gt;&lt;/p&gt;
&lt;p&gt;所以就不要猶豫了，明年來加入議程組吧！&lt;br&gt;
或者加入各個你有興趣的組都好&lt;br&gt;
總之先填單吧 XD&lt;br&gt;
&lt;strong&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSe6whkZAEZD10LlPQuSWRYsshySoNR_pux8grGZ0OgmOIkQ3g/viewform?fbclid=IwAR3N-eLvw5iyKJX14sO2LuOUYuOrnar8m-lhK5NOvI2L25y4rGNKIBk788g"&gt;PyCon TW 2020 志工報名&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;img alt="program team" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879831813.jpg"&gt;&lt;/p&gt;
&lt;h2 id="during-the-conference"&gt;During the conference&lt;/h2&gt;
&lt;p&gt;不知道是不是因為我今年當了志工才有這樣的感覺&lt;br&gt;
總覺得今年在於讓會眾交流這點，有做得比往年更好一些&lt;br&gt;
至少我很努力的帶我拉來的人去認識各路的大大&lt;/p&gt;
&lt;p&gt;&lt;img alt="make new friends" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878520540.jpg"&gt;&lt;/p&gt;
&lt;p&gt;雖然原本也在懷疑多擺個高腳桌到底是不是真的會促進會眾交流&lt;br&gt;
但就結果來看，應該是真的蠻有幫助的（？&lt;/p&gt;
&lt;p&gt;&lt;img alt="high-table" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878386503.jpg"&gt;&lt;/p&gt;
&lt;p&gt;今年的 PyNight 依然是少不了各式的音樂表演&lt;br&gt;
&lt;del&gt;我來 PyCon TW 聽音樂會&lt;/del&gt;&lt;br&gt;
還有一位用機器學習做音樂伴奏的講者&lt;br&gt;
直接在 PyNight demo 他的作品，真得挺有趣的&lt;/p&gt;
&lt;p&gt;&lt;img alt="pynight" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879523324.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在走廊那邊，大家也玩白板玩得很開心&lt;br&gt;
日本、波蘭、馬來西亞來的朋友，都在這個白板畫上了自己的 PyCon&lt;br&gt;
&lt;img alt="map" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879605000.jpg"&gt;&lt;/p&gt;
&lt;p&gt;甚至在 PyNight 後&lt;br&gt;
除了帶各國 PyCon 來的朋友一起吃熱炒，還邀請了一些會眾一同參與&lt;br&gt;
倒是有一個有趣（？）的小插曲是，我沒注意到波蘭的朋友帶來的酒其實很烈&lt;br&gt;
我倒酒倒到一半的時候，當突然現場一片歡呼&lt;br&gt;
我才知道我倒太多了...&lt;/p&gt;
&lt;p&gt;&lt;img alt="after-py-night" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879668571.jpg"&gt;&lt;/p&gt;
&lt;p&gt;今年特別擴大舉辦的 Open Space&lt;br&gt;
在那個時段完全沒有其他的議程&lt;br&gt;
算是想故意促成大家多交流，也是推廣 Open Space 這個概念&lt;br&gt;
原本還在怕會不會沒有人想來主持，結果好像一開放沒多久就爆滿了 XD&lt;/p&gt;
&lt;p&gt;這是我第一次主持 Open Space&lt;br&gt;
雖然人不是特別多，而且大都是自己人 QQ&lt;br&gt;
但聊聊各地的 PyCon 還是挺有趣的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyCon [A-Z]+
or just traveling experiences
~~Help me decide where to go~~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="open-space-host" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878736938.jpg"&gt;&lt;/p&gt;
&lt;p&gt;今年好像是第一年讓 Speaker Tour 成真（？&lt;br&gt;
原本抱著大概只會去一些台北觀光客景點的心態來參加&lt;br&gt;
沒想到這個導覽真的超出我的預期&lt;br&gt;
即使這些地方我都去過不知道幾次了，我還是覺得這趟挺有趣的&lt;/p&gt;
&lt;p&gt;&lt;img alt="taipei" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880418930.jpg"&gt;&lt;/p&gt;
&lt;p&gt;這還是我第一次從這個角度看台北呢&lt;/p&gt;
&lt;p&gt;&lt;img alt="boat" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880369566.jpg"&gt;&lt;/p&gt;
&lt;h2 id="talks"&gt;Talks&lt;/h2&gt;
&lt;p&gt;既然是技術研討會，總覺得還是要分享一下有趣的 talk&lt;br&gt;
但我好像常常到處跑，沒有認真聽完太多的 talk XD&lt;br&gt;
最近我們開始在上傳影片了，可以到 &lt;a href="https://www.youtube.com/playlist?list=PLqtzN042QpffQ1j_gK9KGMAqlbRTwXF5c"&gt;PyCon TW 的 Youtube 頻道&lt;/a&gt; 看這次的錄影&lt;/p&gt;
&lt;h3 id="pep-572-the-walrus-operator"&gt;PEP 572: The Walrus Operator&lt;/h3&gt;
&lt;p&gt;在 PyCon JP 的時候，就有跟講者 Dustin 聊過&lt;br&gt;
他說這場是他自己覺得最喜歡的 talk&lt;br&gt;
我也是因為這樣才來的&lt;br&gt;
不然單就標題，我可能不會特別感興趣&lt;br&gt;
就結果來說這場非常的精彩&lt;br&gt;
主要在講 PEP 572 造成整個 Python 管理階層重組的事件&lt;/p&gt;
&lt;p&gt;&lt;img alt=":=" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878608003.jpg"&gt;&lt;/p&gt;
&lt;h3 id="keynote-programming-language-tourism-leave-python-and-see-the-world"&gt;Keynote: Programming Language Tourism: Leave Python and see the world!&lt;/h3&gt;
&lt;p&gt;這場主要在談 Python 以外的程式語言的各種特性&lt;br&gt;
透過看其他語言的設計和想法，來重新看看 Python 的設計和未來 Python 能怎麼再改善&lt;br&gt;
不過講者 Paul 提到的語言，我好像真的只有聽過 Golang 而已......&lt;/p&gt;
&lt;p&gt;想再多提一下 Paul，他是個相當有趣相當熱情的人&lt;br&gt;
整個會議他都很積極跟我們交流，並參與我們的各種活動&lt;/p&gt;
&lt;h3 id="wait-ipython-can-do-that"&gt;Wait, IPython Can Do That?&lt;/h3&gt;
&lt;p&gt;這場主要在講各種 IPython 的神秘用法&lt;br&gt;
btw 我也很喜歡講者 Sebastian 在第三天結束給的 Lightning Talk&lt;/p&gt;
&lt;h3 id="keynote-the-different-paths-we-take-as-programmers"&gt;Keynote: The Different Paths We Take As Programmers&lt;/h3&gt;
&lt;p&gt;這場主要在從不同的角度看待 Programmers&lt;br&gt;
其實還有很多人透過程式和不同的背景知識在解決不同的問題&lt;br&gt;
而他們不見得是傳統認為程式很強的人&lt;br&gt;
我們可以試著更接納來自不同領域的人，而不是把他們拒於門外&lt;br&gt;
這才有助於讓這個社群更多樣、更好&lt;/p&gt;
&lt;p&gt;In conclusion, there is no true programmer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tracy" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879760129.jpg"&gt;&lt;/p&gt;
&lt;p&gt;出去外面才知道台灣的好啊 XD&lt;br&gt;
中研院這個場地真的是有夠高級&lt;br&gt;
&lt;img alt="-w375" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880099317.jpg"&gt;&lt;/p&gt;
&lt;p&gt;阿對了，還是要炫耀一下&lt;br&gt;
我有搶到 Tracy 親簽的書&lt;br&gt;
&lt;img alt="book" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880028577.jpg"&gt;&lt;/p&gt;
&lt;h2 id="do-you-know-pycon-jp"&gt;Do you know PyCon JP?&lt;/h2&gt;
&lt;p&gt;最後回來聊聊，副標 Do you know PyCon JP 是怎麼回事&lt;br&gt;
這是起源於第一天的 Lightning Talk&lt;br&gt;
第一天的五場 Lightning Talk 中，有四場都是來自 PyCon JP 的朋友&lt;br&gt;
而且每一位都有一頁會提到 Do you know PyCon JP&lt;br&gt;
第五位講者雖然不是來自日本，但也跟進了這個梗&lt;br&gt;
連第二天的 Keynote Paul 都玩這個梗玩得很開心呢&lt;/p&gt;
&lt;p&gt;So...&lt;br&gt;
Do you know PyCon JP?&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon JP 2019</title><link href="https://blog.wei-lee.me/posts/tech/2019/10/pycon-jp-2019" rel="alternate"></link><published>2019-10-12T22:30:00+08:00</published><updated>2019-10-12T22:30:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2019-10-12:/posts/tech/2019/10/pycon-jp-2019</id><summary type="html">&lt;p&gt;當初在 PyCon US 看到 PyCon JP 上去介紹他們自己&lt;br&gt;
不知道哪根筋不對，就覺得不然就來投稿一下吧&lt;br&gt;
雖然後來投稿並沒有上，但突然 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;當初在 PyCon US 看到 PyCon JP 上去介紹他們自己&lt;br&gt;
不知道哪根筋不對，就覺得不然就來投稿一下吧&lt;br&gt;
雖然後來投稿並沒有上，但突然發現 PyCon TW 想揪團一起去&lt;/p&gt;
&lt;p&gt;&lt;img alt="visiting-group-post" src="/images/posts-image/2019-10-12-pycon-jp-2019/visiting-group-post.png"&gt;&lt;/p&gt;
&lt;p&gt;想說這次不去，說不定就不會再有這樣的揪團了&lt;br&gt;
就衝動的報名下去了 XD&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#development-sprint"&gt;Development Sprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#welcome-party"&gt;Welcome Party&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pycon-jp-day-1"&gt;PyCon JP - Day 1&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#peer-reviewed-lightning-talk"&gt;Peer Reviewed Lightning Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pycon-jp-day-2"&gt;PyCon JP - Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#speaker-tour"&gt;Speaker Tour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-words"&gt;Final Words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="development-sprint"&gt;Development Sprint&lt;/h2&gt;
&lt;p&gt;sprint 的報名有分 Leader 跟 Attendee&lt;br&gt;
現場到的人大概 100 人&lt;br&gt;
雖然不用錢，但就是要統計一下人數&lt;br&gt;
而且他們還有不斷寄信提醒「如果無法出席，請釋出位置給想參加的人」&lt;br&gt;
感覺人好像蠻多的&lt;br&gt;
雖然他們的 sprint 辦在假日，這樣比好像不太公平&lt;br&gt;
但感覺上比之前在台灣參加的 sprint 熱絡了不少&lt;/p&gt;
&lt;p&gt;一開始會公佈有哪些專案可以參與&lt;br&gt;
到結束前，大家各自分組討論和開發&lt;br&gt;
最後來個 demo，分享大家一天的成果&lt;/p&gt;
&lt;p&gt;總共十來個專案中，只有三個是英文的&lt;br&gt;
有兩個就是台灣人 Host 的&lt;br&gt;
所以就來試試看剩下的 &lt;a href="https://github.com/dimaqq/awaitwhat"&gt;awaitwhat&lt;/a&gt; XD&lt;/p&gt;
&lt;p&gt;awaitwhat 的目標是想挖到 async 更深的 traceback，讓 async 的除錯更方便&lt;br&gt;
但我實在還沒有對 async 太熟&lt;br&gt;
最後就是花了點時間對專案做了一些 refactor&lt;br&gt;
雖然看起來改動很大，但其實貢獻真的很還好（笑&lt;/p&gt;
&lt;p&gt;&lt;img alt="sprint-demo" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700839086070.jpg"&gt;&lt;/p&gt;
&lt;p&gt;晚餐倒是很有趣，他們好像想把餐點排成一隻蛇 xD&lt;/p&gt;
&lt;p&gt;&lt;img alt="sprint-dinner-snake" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700839118735.jpg"&gt;&lt;/p&gt;
&lt;h2 id="welcome-party"&gt;Welcome Party&lt;/h2&gt;
&lt;p&gt;只有上台 5 分鐘的 Lightning Talk 講者也能來參加講者晚宴（笑&lt;/p&gt;
&lt;p&gt;場地沒有座位，只有圓桌&lt;br&gt;
這樣的安排應該是方便大家隨意移動，就能促進更多人的交流&lt;br&gt;
認真想想這樣的設計還蠻不錯的&lt;/p&gt;
&lt;p&gt;然後每一個圓桌上都有啤酒 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="welcome-beer" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700839787175.jpg"&gt;&lt;/p&gt;
&lt;h2 id="pycon-jp-day-1"&gt;PyCon JP - Day 1&lt;/h2&gt;
&lt;p&gt;如果想看每場 talk 的細節的話，筆記都整理 PyCon TW Visiting Group 的&lt;a href="https://hackmd.io/pYYzA4hLROGFKbXR0QMTMA?view"&gt;共筆&lt;/a&gt;上了&lt;br&gt;
我就不聊每一場的細節了&lt;/p&gt;
&lt;p&gt;一開始有點不習慣他們的場地&lt;br&gt;
Keynote 演講的空間後面馬上就是海報，在更後面就是贊助商&lt;br&gt;
有時候聲音就會蠻發散的&lt;br&gt;
不過後來聽前輩們說好像大部分的場地都是這樣&lt;br&gt;
中研院真的是場地太好&lt;br&gt;
倒是 Keynote 會有英日互轉的即時口譯，覺得還挺不錯的&lt;/p&gt;
&lt;p&gt;海報的部分則是要感謝 Ohmura-san 幫 PyCon TW 做了精美海報 🙏&lt;br&gt;
&lt;img alt="poster" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840034582.jpg"&gt;&lt;/p&gt;
&lt;p&gt;整天下來我最喜歡的 talk 是 Takanori-san 的 &lt;a href="https://www.youtube.com/watch?v=rbNI2LzwaqE"&gt;Automate the Boring Stuff with Slackbot&lt;/a&gt;&lt;br&gt;
雖然只是被一些有趣的點打到了（笑&lt;br&gt;
今年他總共參加了 8 場 PyCon&lt;br&gt;
而且大多都是講者，就算不是講者也有帶海報過去&lt;br&gt;
雖然 Noah 好像今年參加了 11 場？&lt;br&gt;
後來跟一些外國講者聊到 Noah，他們說不管到哪場 PyCon 都會遇到他 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon-tour" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840070533.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="programmer-is-lazy" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840091662.jpg"&gt;&lt;/p&gt;
&lt;p&gt;因為明年是 Python 2 的 End of Life&lt;br&gt;
&lt;img alt="python 2 rip" src="/images/posts-image/2019-10-12-pycon-jp-2019/python 2 rip.png" style="height:150px;width:150px"&gt;&lt;br&gt;
&lt;small&gt;Designed by &lt;a href="https://twitter.com/lisroach"&gt;Lisa Roach&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;有好幾場 Talk 都跟 Python 2 to 3 相關，像是 &lt;a href="https://www.youtube.com/watch?v=8a_TEjCl8NQ"&gt;"It’s 2019 and I’m still using Python 2. Should I be worried?"&lt;/a&gt; 跟 Kir 大大的 &lt;a href="https://www.youtube.com/watch?v=BS-HyV3V7GI"&gt;"SupportingPython3 in Large Scale Project"&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;對於議程安排覺得還蠻不錯的一點是「同一個時段至少會有一場英文的 talk」&lt;br&gt;
外國來的會眾不會在任何一個時段因為聽不懂日文就完全沒有能聽的 talk&lt;br&gt;
後來跟他們聊到，這好像也是他們近期在努力的目標之一&lt;/p&gt;
&lt;h3 id="peer-reviewed-lightning-talk"&gt;Peer Reviewed Lightning Talk&lt;/h3&gt;
&lt;p&gt;最後想提到我的 Lightning Talk&lt;/p&gt;
&lt;p&gt;&lt;img alt="lightning" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840162587.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/presentation/d/1buthYkXvgjbrvb3CT9eXUKklRZOTPc4aN3RgH1PZayk/edit#slide=id.g5cf8cd871b_0_9"&gt;slide&lt;/a&gt; 跟 &lt;a href="https://www.youtube.com/watch?v=7U2D5tcMZb4&amp;amp;t=1110s"&gt;video&lt;/a&gt; 都已經釋出了&lt;/p&gt;
&lt;p&gt;PyCon JP 的 Lightning Talk 還蠻特別的&lt;br&gt;
分為 &lt;strong&gt;Peer Reviewed&lt;/strong&gt; 跟 &lt;strong&gt;Same Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Peer Reviewed&lt;/strong&gt; 必須先投稿，也需要經過審稿&lt;br&gt;
(PyCon TW Visiting Group 包下了所有英文的 Peer Reviewed Lightning Talk XD)&lt;br&gt;
&lt;strong&gt;Same Day&lt;/strong&gt; 則是當天投稿，當場抽籤決定誰是講者&lt;/p&gt;
&lt;p&gt;我的 Lightning Talk 主要是要介紹 PyCon TW&lt;br&gt;
我用「與人交流」作為 "How to get more than PyCon in a PyCon" 的核心&lt;br&gt;
每一個點再帶到 PyCon TW 在做的一些努力之類的&lt;br&gt;
但其實到了日本才發現，這邊的會眾超積極在跟人交流的啊 XDDD&lt;br&gt;
果然只是我以前都待在舒適圈太開心，都只跟原本的朋友聊聊天&lt;/p&gt;
&lt;p&gt;有一個小插曲是&lt;br&gt;
大家湧入主會場的時候，網路就開始不穩定了......&lt;br&gt;
因為我到當天都還有再改 slide，還沒來得及抓最新的離線版本，讓我著實抖了一下&lt;br&gt;
Peter 說得對 "Never live Demo. Never Internet......"&lt;br&gt;
還好在我上台前，網路有稍微恢復，才沒有出包&lt;/p&gt;
&lt;p&gt;雖然只有 5 分鐘，但第一次上台給全英文的 talk 還是挺緊張的&lt;br&gt;
&lt;img alt="down-stair" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840143063.jpg"&gt;&lt;/p&gt;
&lt;p&gt;原本 PyCon JP 的 party 結束後&lt;br&gt;
Takanori-san 很熱情的帶我們去續攤&lt;br&gt;
&lt;img alt="beer" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840215951.jpg"&gt;&lt;/p&gt;
&lt;h2 id="pycon-jp-day-2"&gt;PyCon JP - Day 2&lt;/h2&gt;
&lt;p&gt;這天的 Keynote &lt;a href="https://www.youtube.com/watch?v=0bTPOsVvG7g"&gt;Pythonで切り開く新しい農業&lt;/a&gt; 主要是在講他透過 Python 來分辨小黃瓜的故事&lt;br&gt;
我很喜歡他對 AI 的註解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;現在越來越少人要當農夫了&lt;br&gt;
如果不做些什麼，農業的知識就會流失&lt;br&gt;
而 AI 正好可以作為一種知識儲存和傳遞的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dustin 的 &lt;a href="https://www.youtube.com/watch?v=d3cj4f63u-A"&gt;Modern development environments for Pythonistas&lt;/a&gt; 也讓我印象蠻深刻的&lt;br&gt;
主要是因為跟我要去 PyCon CA 講的內容相關&lt;br&gt;
再加上，結束後我們一群 PyCon TW 圍著他問問題 XD&lt;br&gt;
btw Dustin 在 PyCon TW / US / ... 給的 talks "PEP 572"，真的非常精彩&lt;br&gt;
錯過的話，非常推薦可以補帶&lt;/p&gt;
&lt;p&gt;當然還有 KK 大的 &lt;a href="https://www.youtube.com/watch?v=NLLhYKscuMk"&gt;When AI meets 3000-year-old Chinese Palmistry&lt;/a&gt;&lt;br&gt;
其實我這次來比較少聽 AI 相關的 talk，但分析手相實在太有趣了&lt;/p&gt;
&lt;p&gt;最後我有嘗試去聽一場日文的 talk&lt;br&gt;
憑著我 50 音都背不齊的日文程度，果然還是太挑戰了 XD&lt;br&gt;
當我以為我至少能看投影片的時候，他的投影片也是日文的&lt;br&gt;
後來發現好像是台灣才是比較特例&lt;br&gt;
即使是用中文給的 talk ，還是習慣用英文做投影片&lt;/p&gt;
&lt;p&gt;最後閉幕的時候聽到 Python 這個商標在日本被&lt;a href="http://www.gigamall.ne.jp/ark/ai/python.html"&gt;ARK&lt;/a&gt;註冊走&lt;br&gt;
PSF 要著手處理這件事了&lt;/p&gt;
&lt;p&gt;&lt;img alt="drone" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840284965.jpg"&gt;&lt;br&gt;
&lt;small&gt;最後大合照的無人機&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="coffee" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840254045.jpg"&gt;&lt;br&gt;
&lt;small&gt;某人把還沒打開的奶精加入咖啡&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="after-party" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840345989.jpg"&gt;&lt;br&gt;
&lt;small&gt;離開日本前， Visiting Group 小聚&lt;/small&gt;&lt;/p&gt;
&lt;h2 id="speaker-tour"&gt;Speaker Tour&lt;/h2&gt;
&lt;p&gt;會議結束後的一天，PyCon JP 還有帶講者們到淺草寺等有名的景點走走&lt;br&gt;
可惜那天下著大雨 QQ&lt;/p&gt;
&lt;p&gt;&lt;img alt="speaker-tour" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840364273.jpg"&gt;&lt;/p&gt;
&lt;h2 id="final-words"&gt;Final Words&lt;/h2&gt;
&lt;p&gt;整體來說，我覺得 PyCon JP 辦得比我想像的來得更好&lt;br&gt;
能跟著 PyCon TW 來，也讓我覺得跟人交流有比較容易一些&lt;br&gt;
如果下次還有揪團，我應該也還會再來&lt;/p&gt;
&lt;p&gt;恩對，大概就是這樣&lt;br&gt;
&lt;img alt="me-with-badge" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840325586.jpg" style="width:80%"&gt;&lt;/p&gt;
&lt;p&gt;在找一些東西的時候，發現同行的前輩 Kir 也發了一篇 PyCon JP 的文&lt;br&gt;
&lt;a href="https://medium.com/@Kir.Chou/my-journey-of-pycon-jp-tw-2019-220555e8e3b1"&gt;My journey of PyCon JP/TW 2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，這是發在 PyCon TW Blog 的參訪報告 - &lt;a href="https://pycontw.blogspot.com/2019/10/visiting-group-in-pycon-jp-2019.html"&gt;Visiting Group in PyCon JP 2019&lt;/a&gt;&lt;br&gt;
整理了我們整團的所見所聞&lt;/p&gt;
&lt;p&gt;如果喜歡這篇文章的話，你雖然沒辦法拍手 50 下&lt;br&gt;
但可以在下面按一個 response，或留個 comment 跟我聊聊天&lt;br&gt;
如果能在順手填一下 2020 年的 &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSe6whkZAEZD10LlPQuSWRYsshySoNR_pux8grGZ0OgmOIkQ3g/viewform?fbclid=IwAR2mPycJxD2HCVm_mIX4v7ChEGwNEgo5-HP_QGA4503dD9E2kCP3M5OihT8"&gt;PyCon Taiwan 志工招募&lt;/a&gt; 就能給我更大的支持了 😄&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="PyCon"></category><category term="Python"></category></entry><entry><title>COSCUP 2019</title><link href="https://blog.wei-lee.me/posts/tech/2019/09/coscup-2019" rel="alternate"></link><published>2019-09-02T14:10:00+08:00</published><updated>2019-09-02T14:10:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2019-09-02:/posts/tech/2019/09/coscup-2019</id><summary type="html">&lt;p&gt;事隔了兩年又再次參加了 COSCUP&lt;br&gt;
上一次好像是還在中研院的時候&lt;/p&gt;
&lt;p&gt;現在會議都會有共筆，就不太需要再另外做筆記&lt;br&gt;
所以大概就是聊聊這次去比較喜歡的幾場 talk&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hackmd.io/@coscup/2019/https%3A%2F%2Fhackmd.io%2F%40coscup%2FHJAlwq67H"&gt;COSCUP 2019 共筆&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;事隔了兩年又再次參加了 COSCUP&lt;br&gt;
上一次好像是還在中研院的時候&lt;/p&gt;
&lt;p&gt;現在會議都會有共筆，就不太需要再另外做筆記&lt;br&gt;
所以大概就是聊聊這次去比較喜歡的幾場 talk&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hackmd.io/@coscup/2019/https%3A%2F%2Fhackmd.io%2F%40coscup%2FHJAlwq67H"&gt;COSCUP 2019 共筆&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;好像前幾年就開始有把每一個軌的主題分得很清楚&lt;br&gt;
也有可能是我以前去的時候沒發現 XD&lt;br&gt;
這次參加最多場的應該是 &lt;code&gt;開源與職涯&lt;/code&gt; 這一軌&lt;br&gt;
尤其想聽 &lt;code&gt;海外頭路：憂喜甘苦談&lt;/code&gt;&lt;br&gt;
我明明已經提早過去了，沒想到隊伍從前 10 分鐘就排得很長了......&lt;br&gt;
是大家都想離開台灣了嗎 XD&lt;/p&gt;
&lt;p&gt;聽到最有趣的是 talk 是 &lt;code&gt;如何在两年内从初学者成长为流行开源项目维护者和技术书作者？&lt;/code&gt;&lt;br&gt;
（&lt;a href="https://hackmd.io/1kfASFqeR1iCEq2Uqf9S_A"&gt;共筆&lt;/a&gt;附上）&lt;br&gt;
講者分享如何在兩年內成為了 flask 的維護者，還寫了一本技術書&lt;br&gt;
&lt;del&gt;最重要的訣竅就是&lt;strong&gt;不要工作&lt;/strong&gt;&lt;/del&gt;&lt;br&gt;
比起提供建議，我覺得這更像是是一個 call to action&lt;br&gt;
用他的故事來告訴我們，要做到這些事並不見得那麼困難&lt;br&gt;
有時候就是需要多一點衝動而已&lt;br&gt;
不知道有沒有錄影，這場真的蠻值得再看一次的 XD&lt;/p&gt;
&lt;p&gt;第一天最後是 Rust 核心成員 Steve Klabnik （&lt;a href="https://hackmd.io/3Euz7maGRLSATDR_X3P7lA"&gt;共筆&lt;/a&gt;）帶來的 talk&lt;br&gt;
原本還想說再講 Rust ，會不會聽不懂&lt;br&gt;
不過後來講的內容跟開源專案的組織管理比較有關&lt;br&gt;
其實還挺有趣的&lt;/p&gt;
&lt;p&gt;第二天一早就被告台科大停電，臨時更換地點&lt;br&gt;
不過還算是蠻順利的，除了換個場地，沒有網路了以外，倒是沒遇到什麼大問題&lt;br&gt;
這天我大概都在會場亂晃，除了下面有筆記的兩場 talk 外，好像就都沒什麼印象了 XD&lt;/p&gt;
&lt;p&gt;下面就放了一些我當天有做的筆記&lt;br&gt;
有一些是從共筆補充過來&lt;br&gt;
也有一些時覺得不知道怎麼整理上共筆，就留在這了&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#day-1"&gt;Day 1&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#infra-devops"&gt;Infra / DevOps 的養成之路與開源工具&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-infra"&gt;開源與職涯 - Infra 的養成之路與開源工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;系統工程師的大怪升級之旅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-a"&gt;Q &amp;amp; A&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#learn-to-test-and-then-test-to-learn"&gt;Learn to test and then test to learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;海外頭路：憂喜甘苦談&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;荷蘭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;日本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-a_1"&gt;Q &amp;amp; A&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-2"&gt;Day 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;源碼在哪裡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#do-you-select-postgresql-or-mysql"&gt;Do you Select PostgreSQL or mysql&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#difference-between-mysql-and-postgresql"&gt;Difference between MySQL and PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantage-of-mysql"&gt;Advantage of MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantage-of-postgresql"&gt;Advantage of PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id="day-1"&gt;Day 1&lt;/h1&gt;
&lt;h2 id="infra-devops"&gt;Infra / DevOps 的養成之路與開源工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/Yhf8ByscR2-oIifd9c2IBQ"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1wF1gA_Q-cZ33nXf1YhqGIWuLy_iMcC_1XllEHEkMgAc/edit#slide=id.i0"&gt;slide - 開源與職涯 - Infra 的養成之路與開源工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/chusiang/my-devops-tour-0-dot-1"&gt;slide - 系統工程師的大怪升級之旅&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Ref:&lt;a href="https://zh.wikipedia.org/wiki/奮鬥吧！系統工程師"&gt;奮鬥吧！系統工程師&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-infra"&gt;開源與職涯 - Infra 的養成之路與開源工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CV 要夠詳細&lt;ul&gt;
&lt;li&gt;只有打 Linux 五個字沒有人看得懂 → 細說你會什麼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;社群&lt;ul&gt;
&lt;li&gt;選擇你最舒服的方式參與&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1wF1gA_Q-cZ33nXf1YhqGIWuLy_iMcC_1XllEHEkMgAc/edit#slide=id.g487e56660f_0_14"&gt;開源社群 List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;系統工程師的大怪升級之旅&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DevOps 三步工作法&lt;ol&gt;
&lt;li&gt;由左自右的流動&lt;/li&gt;
&lt;li&gt;從右自左的回饋&lt;/li&gt;
&lt;li&gt;文化&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;推薦讀物&lt;ul&gt;
&lt;li&gt;自我成長: &lt;a href="https://www.tenlong.com.tw/products/9789862762561"&gt;學徒模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DevOps: &lt;a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable-ebook-dp-B00VDHRFWU/dp/B00VDHRFWU/ref=mt_kindle?_encoding=UTF8&amp;amp;me=&amp;amp;qid="&gt;The Nature of Software Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: 撰寫 DevOps 部落格時如何避開機密、公司智財權等？&lt;ul&gt;
&lt;li&gt;自己複製出環境、資料等，自己把找到的技術在自己的環境複製一次，執行成功之後才記錄下來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learn-to-test-and-then-test-to-learn"&gt;Learn to test and then test to learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Material&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/185lhxQoS07G1g9Qw7ngT4Z2lQaB7p3HIPky5ERkIWFc/edit"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pitfalls of End-to-end Testing&lt;ul&gt;
&lt;li&gt;High learning curve&lt;/li&gt;
&lt;li&gt;Hard to build and maintain&lt;/li&gt;
&lt;li&gt;Not easy to identify defects&lt;/li&gt;
&lt;li&gt;Slow feedback&lt;/li&gt;
&lt;li&gt;Not realistic enough&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test to learn&lt;ul&gt;
&lt;li&gt;透過寫測試，紀錄學習歷程，下次回來看就知道怎麼用了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wrap Up&lt;ul&gt;
&lt;li&gt;Unit Testing is the foundation and hard to learn&lt;/li&gt;
&lt;li&gt;Mock and wrapper help you isolate your system boundaries&lt;/li&gt;
&lt;li&gt;To make your code unit-testable, you'll learn to write better code.&lt;/li&gt;
&lt;li&gt;Test to learn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;海外頭路：憂喜甘苦談&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/@coscup/rJkQ17l4H"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;荷蘭&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why Not The Netherlands&lt;ul&gt;
&lt;li&gt;荷蘭文難學&lt;/li&gt;
&lt;li&gt;食物難吃&lt;/li&gt;
&lt;li&gt;外食很貴&lt;/li&gt;
&lt;li&gt;房租很高&lt;/li&gt;
&lt;li&gt;稅很重 (up to 51.75%)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why The Netherlands&lt;ul&gt;
&lt;li&gt;英文可存活&lt;/li&gt;
&lt;li&gt;簽證好辦&lt;/li&gt;
&lt;li&gt;薪水&lt;/li&gt;
&lt;li&gt;多元文化&lt;/li&gt;
&lt;li&gt;氣候宜人 (冬天頂多 0 度)&lt;/li&gt;
&lt;li&gt;房貸比房租便宜&lt;/li&gt;
&lt;li&gt;30% Ruling （高技術外國人的稅務優惠）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在歐洲正中間，方便旅遊&lt;/li&gt;
&lt;li&gt;大麻？（其實是非法，但政府明確表明不抓 xD）紅燈區？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;荷蘭對 Work from Home 的政策算蠻鬆的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;日本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mercari Backend Engineer&lt;ul&gt;
&lt;li&gt;What is Mercari？&lt;ul&gt;
&lt;li&gt;主要做二手拍賣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要使用 Go Lang, php&lt;/li&gt;
&lt;li&gt;How many leave do you have?&lt;ul&gt;
&lt;li&gt;10 days leave + 3 days summer leave + 10 days sick leave&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Are you usually late for work?&lt;ul&gt;
&lt;li&gt;彈性工時 (12:00 ~ 16:00 一定要在公司)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How many foreigner in you project?&lt;ul&gt;
&lt;li&gt;Engineer: 50% foreigners&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you have lots of nomikai（應酬）?&lt;ul&gt;
&lt;li&gt;一季一次&lt;/li&gt;
&lt;li&gt;一次約 ￥4,000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a_1"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;h4&gt;Q: 日本階級制度很重？&lt;/h4&gt;
&lt;p&gt;是，但因為是外國人，所以可以裝作不知道&lt;/p&gt;
&lt;h4&gt;Q: 怎麼找到海外工作的？&lt;/h4&gt;
&lt;p&gt;LinkedIn, location 換到當地後，就會有收不完的邀約了&lt;/p&gt;
&lt;h4&gt;Q: 不會日文可以去日本工作嗎&lt;/h4&gt;
&lt;p&gt;只會講英文的話，建議去 Line, Rakuten, Mercari ，小公司至少要有 N2 比較順利&lt;/p&gt;
&lt;h4&gt;Q: 日本薪水大概是多少&lt;/h4&gt;
&lt;p&gt;New Grade 年收 400 萬日幣， Senior 則要怎麼談&lt;/p&gt;
&lt;h4&gt;Q: 荷蘭 engineer 職缺多嗎？&lt;/h4&gt;
&lt;p&gt;很多，目前最大是 Uber ，另外有很多新創&lt;br&gt;
因為英國脫歐，最近荷蘭職缺比較多&lt;/p&gt;
&lt;h4&gt;Q: 荷蘭的永久居留證？&lt;/h4&gt;
&lt;p&gt;雖然荷蘭不能雙重國籍，但因為不承認台灣是個國家，所以申請上會特別容易，不會被刁難&lt;/p&gt;
&lt;h4&gt;Q: 台灣人到歐洲最大的障礙是什麼&lt;/h4&gt;
&lt;p&gt;自己煮飯，其他都還好&lt;/p&gt;
&lt;h4&gt;Q: 會遇到歧視嗎？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;日本 - Lilith Peng&lt;ul&gt;
&lt;li&gt;女性歧視有點大&lt;/li&gt;
&lt;li&gt;排外的社會 → 沒有解法，各憑本事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;荷蘭 - 呂行&lt;ul&gt;
&lt;li&gt;除非到鄉下才會有歧視，但大城市還好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Q: 除了薪資以外，為什麼想出國&lt;/h4&gt;
&lt;p&gt;體驗不同文化、生活方式&lt;/p&gt;
&lt;h4&gt;Q: 為什麼 荷蘭/日本，而不是北美&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;荷蘭 - 呂行&lt;ul&gt;
&lt;li&gt;因為北美簽證不好拿，不習慣美國的生活方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日本 - Lilith Peng&lt;ul&gt;
&lt;li&gt;日本有高度人才證&lt;/li&gt;
&lt;li&gt;會日文，英文不好 XD&lt;/li&gt;
&lt;li&gt;日本離台灣近&lt;/li&gt;
&lt;li&gt;稅率比歐洲好&lt;/li&gt;
&lt;li&gt;房租便宜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Q: 日本/荷蘭 的面試文化？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;荷蘭&lt;ul&gt;
&lt;li&gt;會有白板題&lt;/li&gt;
&lt;li&gt;一關問架構&lt;/li&gt;
&lt;li&gt;一關問經歷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日文&lt;ul&gt;
&lt;li&gt;履歷表用 Excel 寫，會加分&lt;/li&gt;
&lt;li&gt;履歷是一致的格式&lt;/li&gt;
&lt;li&gt;面試分兩種&lt;ul&gt;
&lt;li&gt;外商派&lt;/li&gt;
&lt;li&gt;日本傳統派&lt;ul&gt;
&lt;li&gt;西裝外套、打領帶、皮鞋、公事包......&lt;/li&gt;
&lt;li&gt;90度鞠躬&lt;/li&gt;
&lt;li&gt;他們就是看感覺錄取 ← 他們認為人才是可以被培養的 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Q: 會不會有天花板&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;日本工程師大概 1,500 萬就是天花板，除非轉管理職&lt;/li&gt;
&lt;li&gt;荷蘭不算特別明顯&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id="day-2"&gt;Day 2&lt;/h1&gt;
&lt;h2 id="_5"&gt;源碼在哪裡&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;grep 可以對二進位檔直接做文字搜尋&lt;/li&gt;
&lt;li&gt;Technical / Development History&lt;ul&gt;
&lt;li&gt;Firsthand&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mailing lists&lt;/strong&gt;, IRC, HipChat, Slack, Issue trackers, Forums, Journals / Papers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary&lt;ul&gt;
&lt;li&gt;Wiki, Tech News, Tech Document, White Papers, Blogs, Books, Review papers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Management&lt;ul&gt;
&lt;li&gt;Source Hosts&lt;ul&gt;
&lt;li&gt;Github / Bitbucket and etc., SourceForge, Launchpad&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Local Deployment&lt;ul&gt;
&lt;li&gt;FHS, Language-specific path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Deployment&lt;ul&gt;
&lt;li&gt;Auxiliary services (e.g., Open Stack, web)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Version&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Major.Minor.Patch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="do-you-select-postgresql-or-mysql"&gt;Do you Select PostgreSQL or mysql&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/soudai/do-you-select-postgresql-or-mysql"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="difference-between-mysql-and-postgresql"&gt;Difference between MySQL and PostgreSQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Server architecture&lt;ul&gt;
&lt;li&gt;MySQL → multi-thread&lt;/li&gt;
&lt;li&gt;PostgresSQL → multi-process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licence&lt;ul&gt;
&lt;li&gt;MySQL → GPL v2 or Commercial License&lt;/li&gt;
&lt;li&gt;PostgresSQL → PostgresSQL License&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Development Style&lt;ul&gt;
&lt;li&gt;MySQL → Oracle&lt;/li&gt;
&lt;li&gt;PostgresSQL → Community&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="advantage-of-mysql"&gt;Advantage of MySQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Good at fetching by &lt;strong&gt;primary key&lt;/strong&gt; and &lt;strong&gt;primary key&lt;/strong&gt; update&lt;/li&gt;
&lt;li&gt;Flexible replication&lt;ul&gt;
&lt;li&gt;Multi source replication&lt;/li&gt;
&lt;li&gt;Group Replication → Multi Master&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Document Store&lt;ul&gt;
&lt;li&gt;JSON type → schema-less table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="advantage-of-postgresql"&gt;Advantage of PostgreSQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Parallel Query&lt;ul&gt;
&lt;li&gt;but not to increase number of workers beyond number of CPU core&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Materialized View&lt;/li&gt;
&lt;li&gt;Foreign Data Wrapper → an external table handle for your own table (other DBMS)&lt;ul&gt;
&lt;li&gt;support WHERE, JOIN, GROUP BY, DELETE &amp;amp; UPDATE&lt;/li&gt;
&lt;li&gt;Any data store is acceptable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIN INDEX &amp;amp; Function INDEX + JSON&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="COSCUP"></category></entry><entry><title>How was PyCon US 2019</title><link href="https://blog.wei-lee.me/posts/tech/2019/06/how-was-pycon-us-2019" rel="alternate"></link><published>2019-06-22T21:49:00+08:00</published><updated>2020-02-04T18:43:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2019-06-22:/posts/tech/2019/06/how-was-pycon-us-2019</id><summary type="html">&lt;p&gt;既然自稱 Python 的信徒&lt;br&gt;
總是要來世界最大的 PyCon 朝聖一下 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3010" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3010.jpg"&gt;&lt;/p&gt;
&lt;p&gt;（我還因為寫了 GitHub ，被以為是 GitHub 的員工 XD）&lt;/p&gt;
</summary><content type="html">&lt;p&gt;既然自稱 Python 的信徒&lt;br&gt;
總是要來世界最大的 PyCon 朝聖一下 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3010" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3010.jpg"&gt;&lt;/p&gt;
&lt;p&gt;（我還因為寫了 GitHub ，被以為是 GitHub 的員工 XD）&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pycon-us"&gt;簡介一下 PyCon US&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tutorial"&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#talks"&gt;Talks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#day-1"&gt;Day 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-2"&gt;Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-3"&gt;Day 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#watch-list"&gt;Watch List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#open-space"&gt;Open Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#job-fair-poster"&gt;Job Fair / Poster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#development-sprint"&gt;Development Sprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;給自己下次去的建議&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;多跟人交流、多跟人交流、多跟人交流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;練好英文口說&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;準備好一段短的招呼語跟自我介紹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;留點緩衝時間給調時差&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-"&gt;保留體力 - 不用每個活動都參與到&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#open-space_1"&gt;多去 Open Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#talk"&gt;事前對有興趣的 talk 準備好想問的問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#action-items"&gt;將當下的熱情紀錄下來，並列出 action items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#20190703-update"&gt;食物 （20190703 update）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;雜談&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="pycon-us"&gt;簡介一下 PyCon US&lt;/h2&gt;
&lt;p&gt;PyCon 總共跨了 9 天&lt;br&gt;
除了主會議外，還有各種不同的活動跟討論&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5/1 ~ 5/2: Tutorial&lt;/li&gt;
&lt;li&gt;5/3 ~ 5/5: 主會議&lt;/li&gt;
&lt;li&gt;5/6 ~ 5/9: Development Sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年辦在 Cleveland 的 Huntington Convention Center&lt;br&gt;
會眾大概有 3000 人&lt;br&gt;
會議期間除了同時會有 6 個軌的 talk 以外，還會有好幾間的 Open Space&lt;/p&gt;
&lt;p&gt;最大的會議廳長這樣&lt;br&gt;
&lt;img alt="IMG_3033" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3033.jpg"&gt;&lt;br&gt;
&lt;img alt="IMG_3035" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3035.jpg"&gt;&lt;/p&gt;
&lt;p&gt;參加前，我有看了這篇 "&lt;a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/"&gt;How to have a great first PyCon&lt;/a&gt;"&lt;br&gt;
對我這次去參加 PyCon 很有幫助&lt;/p&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;我參加了兩場 Tutorial&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=J08MrW2NC1Y&amp;amp;list=PLPbTDk1hBo3xof51R8pk3kP1BVBuMYP9c&amp;amp;index=18&amp;amp;t=0s"&gt;Getting started with Kubernetes and container orchestration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Kubernetes 的使用介紹的蠻清楚的，我覺得對入門 Kubernete 很有幫助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DWgD5iloSHs&amp;amp;list=PLPbTDk1hBo3xof51R8pk3kP1BVBuMYP9c&amp;amp;index=15&amp;amp;t=0s"&gt;Building Evolutionary API with GraphQL and Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;主要是在講 GraphQL 的概念，我覺得偏簡單，原本希望可以多聽到一些設計上的想法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一場 Tutorial 大概是三個小時&lt;br&gt;
一天參加一場，我的體力上比較負荷的來&lt;br&gt;
但中午吃飯跟其他會眾聊天的時候，遇到了好幾個人都是兩天參加滿四場 Tutorial ...&lt;/p&gt;
&lt;p&gt;好幾個會眾都推薦了 David Beazley 的 &lt;a href="https://www.youtube.com/watch?v=pkCLMl0e_0k"&gt;Lambda Calculus from the Ground Up&lt;/a&gt;&lt;br&gt;
這場 Tutorial 的介紹開宗明義就說了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You will learn nothing practically useful in this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但大家還是都很推薦這場&lt;br&gt;
聽說 David Beazley 是很有名的 Speaker（請原諒我的孤陋寡聞 QQ）&lt;br&gt;
我甚至遇到一位會眾說看到名字就報名了，也不用看是什麼主題&lt;/p&gt;
&lt;h2 id="talks"&gt;Talks&lt;/h2&gt;
&lt;p&gt;稍微簡介幾場我還有印象的 talk&lt;br&gt;
也許之後有時間會把筆記好好整理一下分享出來&lt;/p&gt;
&lt;h3 id="day-1"&gt;Day 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keynote - Russell Keith-Magee&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Python's Black Swan&lt;ul&gt;
&lt;li&gt;你現在覺得 Python 的存在很自然，但 10 年後 Python 還會在嗎？&lt;/li&gt;
&lt;li&gt;我們要怎麼做些什麼才能讓 Python 在 10 年後還存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 Calls to Action&lt;ol&gt;
&lt;li&gt;Start thinking about Black swans (before it's too late)&lt;/li&gt;
&lt;li&gt;Improve resourcing of maintenance and R&amp;amp;D efforts&lt;/li&gt;
&lt;li&gt;Value contributors and their contributions&lt;/li&gt;
&lt;li&gt;Get out your wallet&lt;/li&gt;
&lt;li&gt;Contribute&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Evolution the Right Way&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;更新 API 並且淘汰舊的版本，你需要注意的幾個設計細節&lt;/li&gt;
&lt;li&gt;如果想直接看文字不要補影片的話，可以直接看講者的文章 &lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;API Evolution the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Programmatic Notebooks with papermill&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Netflix 推銷自己的開源工具 &lt;a href="https://github.com/nteract/papermill"&gt;papermill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用一個 jupyter notebook 當作範本，由外部輸入幾組不同的參數，一次產生多個相對應 jupyter notebooks（為什麼我在弄碩論的時候沒發現有這樣的工具 QQ）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything at Once: Python's Many Concurrency Models&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;介紹跟比較 5 種 Python 的 Concurrency Model (asyncio, Python threads, GIL-released thread, multiprocessing, distributed tasks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supporting Engineers with Mental Health Issues&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Enginner 常常因為壓力太大造成一些心理的狀況，該如何正視自己的狀況並試著調適或尋求幫助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yFcCuinRVnU&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=1&amp;amp;t=16m35s"&gt;Lightning Talk - Overthinking T-Shirts with Scipy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這是他們用自己公司的產品 Demo 他們計算要帶多少 T-Shirts 來發，並且快速的視覺化&lt;/li&gt;
&lt;li&gt;其實講題蠻瞎的，但講者講的真的很有趣很精彩 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="day-2"&gt;Day 2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keynote - Shadeed "Sha" Wallace-Stepter&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;"How many people here are on probation or parole?" （這個開頭害我以為我是不是英文真的太差誤會了什麼...... ）&lt;/li&gt;
&lt;li&gt;Sha 訴說自己如何一個從犯人變成創業家的故事，如何在獄中學習 Python，並在出獄後重新融入社會&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keynote - Jessica McKellar&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;上一場像是實例的現身說法，這場則是在同一個主題下的 call to action&lt;/li&gt;
&lt;li&gt;Jessica 想做的是改變美國的監獄系統&lt;ul&gt;
&lt;li&gt;如果出獄的人並不能融入社會，社會也不願意接受他們，那他們就會很容易再犯再回到監獄，而這會產生很大的社會成本&lt;/li&gt;
&lt;li&gt;如果能讓他們在獄中學習技能，並說服一些公司慢慢接受這群人，我們就能讓這些人重新融入社會，並成為社會的生產力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工程師的工作不就是該修復系統嗎？&lt;/li&gt;
&lt;li&gt;這兩場 keynote 非常的精采，是整場 PyCon 最多人起立鼓掌最久的 Talk&lt;ul&gt;
&lt;li&gt;很不幸的這兩場的影片剛好消失了，目前只能從 &lt;a href="https://twitter.com/jessicamckellar/status/1127639822640660482"&gt;Jessica 的 twitter&lt;/a&gt; 看到文字版的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Zen of Python Teams&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;將 Zen of Python 應用到建造更好的團隊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Does remote work really work?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;怎樣的人適合 remote work？ (Remote work is not for everyone.)&lt;/li&gt;
&lt;li&gt;你要注意些什麼才能成為一個好的 remote worker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python Security Tool&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;這場很實際地提了幾個跟 Python 有關的 Security Tool&lt;br&gt;
&lt;img alt="IMG_3063" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3063.jpg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sRwHWPDJBnk&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=2&amp;amp;t=39m35s"&gt;Lightning Talk - Writing Selfless Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;無私的 Python： 有了 &lt;a href="https://pypi.org/project/selfless/"&gt;selfless&lt;/a&gt; 我們不用在 Python 中寫自私的 (&lt;strong&gt;self&lt;/strong&gt;fish) class 也能有同樣的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sRwHWPDJBnk&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=2&amp;amp;t=8m45s"&gt;Lightning Talk - One Weird Trick for people to see your name in lunch&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;因為 badge 太長了，吃午餐的時候其他人會看不到你的名字&lt;ul&gt;
&lt;li&gt;那就在 badge 後面打個結，讓帶子短一點，大家就能看到你的名字了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恩對，這場 Lightning Talk 就真的是這樣而已 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sRwHWPDJBnk&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=2&amp;amp;t=5m19s"&gt;Lightning Talk - 3 Quick Tips for Software Blogging&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;Set a Purpose&lt;ul&gt;
&lt;li&gt;Why do you want to blog?&lt;ul&gt;
&lt;li&gt;Publish info, guides, help&lt;/li&gt;
&lt;li&gt;Personal journalling /notes&lt;/li&gt;
&lt;li&gt;connect with others&lt;/li&gt;
&lt;li&gt;electronic biz card&lt;/li&gt;
&lt;li&gt;be self-motivated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don't&lt;ul&gt;
&lt;li&gt;&lt;del&gt;become famous&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;make money from ads&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write new, helpful content&lt;ul&gt;
&lt;li&gt;Don't repeat existing content. Make something new!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools and Platforms Don't Matter (Content matters)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="day-3"&gt;Day 3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keynote - Python Steering Council&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現在的 Python 政府討論 Python的過去與未來&lt;ul&gt;
&lt;li&gt;Python Governance&lt;/li&gt;
&lt;li&gt;PEP 8000&lt;/li&gt;
&lt;li&gt;PEP 13&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q: Where to start to become a core dev?&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org"&gt;Python Developer’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keynote - Nina Zakharenko - Light up you life with Python &amp;amp; LEDS!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現場 Demo &lt;a href="https://micropython.org"&gt;MicroPython&lt;/a&gt;，如何用 Python 操控硬體&lt;/li&gt;
&lt;li&gt;我想這場主要是想展示用 Python 能很簡單地做到一些原本想像中可能會比較困難的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="watch-list"&gt;Watch List&lt;/h3&gt;
&lt;p&gt;我跟在 PyCon 認識的朋友整理了一些之後會想補帶的 talk&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;API Evolution the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;The Zen of Python Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2mevf60qm60"&gt;Releasing the World's Largest Python Site Every 7 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8"&gt;Time to take out the rubbish: garbage collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;Getting Started Testing in Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;Escape from auto-manual testing with Hypothesis!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;Ace Your Technical Interview Using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e1vqfBEAkNA"&gt;Migrating Pinterest from Python2 to Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QvZqttX9uXc"&gt;Scraping a Million Pokemon Battles: Distributed Systems By Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MjHpMCIvwsY"&gt;Practical decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="open-space"&gt;Open Space&lt;/h2&gt;
&lt;p&gt;畢竟 talk 都會錄影，而且很快就上傳了（大概結束後兩天就會上傳）&lt;br&gt;
所以後來我就越來越常去 Open Space&lt;br&gt;
而且相較之下 Open Space 會比較有跟人互動的機會&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3042" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3042.jpg"&gt;&lt;br&gt;
&lt;img alt="IMG_3060" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3060.jpg"&gt;&lt;br&gt;
&lt;img alt="IMG_3064" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3064.jpg"&gt;&lt;/p&gt;
&lt;p&gt;除了一些比較技術性的討論外&lt;br&gt;
也會有不少娛樂性的 Open Space（通常在晚上）&lt;br&gt;
像這個就是揪團要一起看 Game of Throne XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3062" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3062.jpg"&gt;&lt;/p&gt;
&lt;p&gt;大部分討論性質的 Open Space 會像這樣圍成一圈&lt;/p&gt;
&lt;p&gt;&lt;img alt="open-space" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/15611957026963.jpg"&gt;&lt;/p&gt;
&lt;p&gt;這是我去參加 Vim 討論會的照片&lt;br&gt;
當天就有人分享了討論的筆記 (&lt;a href="https://gist.github.com/pwlandoll/dcb252686ae3c2e2486fd6425eb00d91"&gt;Vim BoF @PyCon2019&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;我還有參加到一場幫忙做履歷健檢的跟討論 Tech Interview&lt;/p&gt;
&lt;h2 id="job-fair-poster"&gt;Job Fair / Poster&lt;/h2&gt;
&lt;p&gt;Job Fair 主要就是跟各個公司聊天，看看他們的工作性質跟開了什麼缺&lt;br&gt;
有聽到幾間 remote 的公司還蠻有趣的&lt;br&gt;
不過其實也不用等到 Job Fair 才問&lt;br&gt;
Job Fair 的公司反而比較少，不過應該就是專注在有開缺的公司&lt;br&gt;
前幾天的攤位反而更有機會聊聊&lt;br&gt;
&lt;img alt="IMG_3025" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3025.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Poster 也是一個能跟人互動蠻好的機會&lt;br&gt;
不過那些比較有趣的，通常旁邊都會圍著一群人 XD&lt;br&gt;
&lt;a href="https://hypothesis.readthedocs.io"&gt;Hypothesis&lt;/a&gt; 好像整個 session 人都沒少過&lt;br&gt;
（話說 Hypothesis 還真的從 talk, tutorial, sprint 到 poster 每個場合都出現了）&lt;br&gt;
&lt;img alt="IMG_3070" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3070.jpg"&gt;&lt;/p&gt;
&lt;h2 id="development-sprint"&gt;Development Sprint&lt;/h2&gt;
&lt;p&gt;自從上次在 PyCon TW 參加了 PyBee 的 Sprint ，就覺得這樣一群人協作開源專案很有趣&lt;br&gt;
所以這也是我這次 PyCon 幾乎最期待的活動&lt;/p&gt;
&lt;p&gt;在 Development Sprint ，開源專案的作者會帶自己的專案找大家一起來協作&lt;br&gt;
沒有帶專案來的人就可以看自己對哪個有興趣加入貢獻&lt;br&gt;
參加 Development Sprint 是貢獻開源專案還蠻好的入門方式&lt;br&gt;
畢竟原作者跟 core contributor 就在旁邊&lt;br&gt;
有遇到什麼問題想問馬上就可以問&lt;/p&gt;
&lt;p&gt;我這次參加了 &lt;a href="https://github.com/pallets"&gt;pallets&lt;/a&gt;, &lt;a href="https://github.com/python/cpython"&gt;cpython&lt;/a&gt;, &lt;a href="https://github.com/pybee"&gt;pybee&lt;/a&gt;, &lt;a href="https://github.com/edx"&gt;OpenEdx&lt;/a&gt; 的 Sprint&lt;br&gt;
每一個專案，我在最後都有提交至少一個小 PR&lt;br&gt;
這次最有成就感的大概就是成功提交了一個 flask 跟 cpython 的 PR&lt;br&gt;
（雖然 cpython 的其實還在 review 中）&lt;/p&gt;
&lt;p&gt;這幾個專案之中，我覺得 &lt;a href="https://github.com/pybee"&gt;pybee&lt;/a&gt;, &lt;a href="https://github.com/edx"&gt;OpenEdx&lt;/a&gt; 算是最新手友善的&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3195" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3195.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Sprint 的這幾天還蠻常看到 Guido 在走廊走來走去&lt;br&gt;
也蠻多人去找他搭話跟拍照的&lt;br&gt;
不過害羞的我就有點不敢過去了 QQ&lt;/p&gt;
&lt;p&gt;記錄一下這四天丟了哪些 PR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pallets"&gt;pallets&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pallets/flask/pull/3179"&gt;Fix MethodView inheritance Error (#3138) #3179&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beeware.org"&gt;Beeware&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/pull/679"&gt;Fix the CAPSLOCK typo in toga_cocoa #679&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/pull/686"&gt;Fix open file not working when using open command and double click files #686&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/podium/pull/28"&gt;Fix the error that UP arrow won't go the previous page #28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython&lt;ul&gt;
&lt;li&gt;Project&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org"&gt;Python Developer’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/cpython-source-code-guide/?preview=cpython-sprints"&gt;The Ultimate Guide to the CPython Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request (not yet merged)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/13233"&gt;bpo-36841: Supporting customization of float encoding in JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenEdx&lt;ul&gt;
&lt;li&gt;Project&lt;ul&gt;
&lt;li&gt;&lt;a href="https://contributing-to-open-edx.readthedocs.io/en/latest/"&gt;Contributing to Open edX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.slack.com"&gt;open edx slack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;openedx-slack-invite.herokuapp.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/spaces/COMM/pages/162245773/Sites+powered+by+Open+edX"&gt;Sites powered by Open edX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-documentation/pull/1825"&gt;Add pull upstream reminder in contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/pull/20502"&gt;INCR-236&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;給自己下次去的建議&lt;/h2&gt;
&lt;h3 id="_2"&gt;多跟人交流、多跟人交流、多跟人交流&lt;/h3&gt;
&lt;p&gt;這是我感受到跟在台灣參加研討會最不一樣的地方&lt;br&gt;
（也可能是我在台灣的研討會都在舒適圈中...）&lt;br&gt;
只要你願意，在會場中幾乎每個人都很樂於跟你交流&lt;br&gt;
可能你只是站在一個桌子上吃早餐，就會有人過來跟你聊聊&lt;br&gt;
這個體驗真的蠻有趣的&lt;/p&gt;
&lt;h3 id="_3"&gt;練好英文口說&lt;/h3&gt;
&lt;p&gt;原本覺得自己英文程度雖然稱不上好，但應該也沒到太差吧&lt;br&gt;
至少在旅行上是沒遇過什麼問題&lt;br&gt;
但這種程度跟要跟人討論或聊天還是差太多了&lt;br&gt;
當然要說點話是沒什麼問題，但要流暢表達自己就還是蠻困難的&lt;br&gt;
一對一的聊天還算勉強有辦法&lt;br&gt;
到了團體討論就真的很吃力&lt;br&gt;
光在聽力上要跟上大家在討論的就有點辛苦&lt;br&gt;
就更不用說要加入討論了&lt;br&gt;
剛到 PyCon 的前幾天對於這件事還真的蠻挫折的&lt;/p&gt;
&lt;h3 id="_4"&gt;準備好一段短的招呼語跟自我介紹&lt;/h3&gt;
&lt;p&gt;一開始有人來找我聊天，還是會有些緊張，不知道要說什麼&lt;br&gt;
畢竟在台灣真的也沒什麼這樣練習英文口說的機會&lt;br&gt;
後來多跟幾個人聊過後&lt;br&gt;
自然而然就形成了一套跟人開頭的招呼語跟自我介紹&lt;br&gt;
之後話題就能比較順利地一直接下去&lt;/p&gt;
&lt;h3 id="_5"&gt;留點緩衝時間給調時差&lt;/h3&gt;
&lt;p&gt;這次到美國的隔天就已經要開始 PyCon 了&lt;br&gt;
一到了傍晚就會開始想睡&lt;br&gt;
所以前幾天的 After Party 我參加一下就走了&lt;br&gt;
後來也沒去參加 Facebook&lt;br&gt;
一來是我也有點不知道怎麼在這種場合應對&lt;br&gt;
二來是真的太累了...&lt;/p&gt;
&lt;h3 id="-"&gt;保留體力 - 不用每個活動都參與到&lt;/h3&gt;
&lt;p&gt;剛來的時候會覺得，都花了這麼多錢特地跑來，一定要把握時間每&lt;br&gt;
就會勉強自己盡可能每個時段都要塞滿&lt;br&gt;
但 PyCon 的 talk, open space and etc. 實在太多了&lt;br&gt;
真的要塞滿，體力就有點負荷不來，後來就都是邊睡邊聽......&lt;br&gt;
中間可以留一些時間在 Quiet Room 稍微休息&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3187" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3187.jpg"&gt;&lt;/p&gt;
&lt;p&gt;與其多衝一些場數，不如專注地把幾場真正想聽的專心聽完&lt;/p&gt;
&lt;h3 id="open-space_1"&gt;多去 Open Space&lt;/h3&gt;
&lt;p&gt;相較於 talk ， Open Space 除了沒有錄影可以補帶以外&lt;br&gt;
也是一個跟人們可以更有互動的機會&lt;br&gt;
有時候說不定也能聽到一些不能在 talk 說的事（笑&lt;br&gt;
而且我覺得在這應該是蠻有機會交到一些朋友的場合&lt;br&gt;
（雖然我後來認識的大多是在走廊上或吃飯遇到的 XD）&lt;/p&gt;
&lt;h3 id="talk"&gt;事前對有興趣的 talk 準備好想問的問題&lt;/h3&gt;
&lt;p&gt;雖然說看現場的感受跟看影片還是不一樣&lt;br&gt;
但既然都去聽了，如果能跟講者討論自己遇到的問題，應該會更有收穫&lt;/p&gt;
&lt;h3 id="action-items"&gt;將當下的熱情紀錄下來，並列出 action items&lt;/h3&gt;
&lt;p&gt;參加的當下的感受還蠻強烈的，但回來台灣好一段時間後&lt;br&gt;
當初的熱情跟想法，就會慢慢被生活給磨光&lt;br&gt;
所以立刻把明確的 action items 記錄下來，也許會讓這些事情成真的機會高一點&lt;/p&gt;
&lt;p&gt;寫下這篇文章，某種程度上也是想記錄下這次參加的感受呢&lt;/p&gt;
&lt;h2 id="20190703-update"&gt;食物 （20190703 update）&lt;/h2&gt;
&lt;p&gt;&lt;img alt="food" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/food.png"&gt;&lt;/p&gt;
&lt;p&gt;既然有人問了，就來補充一下吧 XD&lt;/p&gt;
&lt;p&gt;首先是從 Tutorial 開始到 Sprint 結束的九天&lt;br&gt;
每天都有星巴克可以喝&lt;br&gt;
雖然到 Sprint 的時候好像已經把經費花光&lt;br&gt;
臨時又有廠商在贊助才能撐到結束&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3011" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3011.jpg"&gt;&lt;/p&gt;
&lt;p&gt;議程以外那幾天大多是自助式&lt;br&gt;
大概都是這樣的沙拉&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3024" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3024.jpg"&gt;&lt;/p&gt;
&lt;p&gt;議程那幾天就有點像是餐盒&lt;br&gt;
有豬、牛、素、水果幾種可以選&lt;br&gt;
像這個就是牛排，吃起來就還不錯&lt;br&gt;
&lt;img alt="IMG_3045" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3045.jpg"&gt;&lt;/p&gt;
&lt;p&gt;這個也是牛排&lt;br&gt;
但吃起來很可怕......&lt;br&gt;
上面那個餅皮我真的努力要吃過了，但我失敗了＠＠&lt;br&gt;
這是我待在美國這一個月最難吃的食物......&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3061" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3061.jpg"&gt;&lt;/p&gt;
&lt;p&gt;恩，大概就只有這樣xD&lt;/p&gt;
&lt;h2 id="_6"&gt;雜談&lt;/h2&gt;
&lt;p&gt;一開始對於要不要飛一趟去美國還蠻猶豫的&lt;br&gt;
畢竟 PyCon 的 talk 網路上都看得到，花這一大筆錢真的值得嗎？&lt;br&gt;
而且自己一個跑到一個人生地不熟的地方也是挺可怕的&lt;/p&gt;
&lt;p&gt;其實這些問題我到最後也沒給自己一個好的答覆&lt;br&gt;
反正就覺得現在如果不衝動地做這件事，也許就不會有下次了&lt;br&gt;
就毅然決然的買了機票跟門票&lt;br&gt;
逼得自己沒有退路，一定得要去&lt;/p&gt;
&lt;p&gt;以結論來說，我覺得非常值得&lt;br&gt;
而且如果有可能，我明年還是會想去 PyCon 2020 in Pittsburgh&lt;br&gt;
在 PyCon 體驗到一些我在台灣比較不會接觸到的事&lt;br&gt;
平常也許可以看看文章，聽別人說說這些故事&lt;br&gt;
但這跟實際現場的體會真的太不一樣了&lt;br&gt;
最大的感受是「那些原先覺得做不到的事，似乎變得不再那麼遙遠」&lt;/p&gt;
&lt;p&gt;當然我在美國其實待了一個多月，也是去了不少地方&lt;br&gt;
說不定哪天有空也會寫篇遊記&lt;/p&gt;
&lt;p&gt;這篇快速整理了一下我現在想到的，也許之後還會再補點內容&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category><category term="Conference"></category></entry><entry><title>SITCON 2019</title><link href="https://blog.wei-lee.me/posts/tech/2019/04/sitcon-2019" rel="alternate"></link><published>2019-04-06T21:00:00+08:00</published><updated>2019-04-06T21:00:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2019-04-06:/posts/tech/2019/04/sitcon-2019</id><summary type="html">&lt;p&gt;SITCON 都過了兩個禮拜&lt;br&gt;
好不容易才騰出個時間整理一下想法&lt;br&gt;
想想去年的 X-Village 的想法也一直還沒好好寫完&lt;br&gt;
兩個禮拜似乎也不算太久（？&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SITCON 都過了兩個禮拜&lt;br&gt;
好不容易才騰出個時間整理一下想法&lt;br&gt;
想想去年的 X-Village 的想法也一直還沒好好寫完&lt;br&gt;
兩個禮拜似乎也不算太久（？&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;不過這次在 SITCON 的分享也算是把 X-Village 的想法都整理起來了&lt;br&gt;
就當作整合進這篇吧 xD&lt;/p&gt;
&lt;h3 id="_1"&gt;第一次站上中研院的舞台&lt;/h3&gt;
&lt;p&gt;這是我第一次以講者的身份站在中研院的台上&lt;br&gt;
主要分享去年 X-Village 辦課程的經驗&lt;br&gt;
不過不出意外的，這樣的議題大家不會太感興趣 XD&lt;br&gt;
而且同時的 R0 又很精彩&lt;br&gt;
如果我不是這場的講者，我應該也會去聽吧&lt;/p&gt;
&lt;p&gt;原本不想花太多時間，就只投了十分鐘的 Espresso&lt;br&gt;
不知道是不是我的介紹看起來好像內容很多&lt;br&gt;
就被問要不要改成 40 分鐘的 Presentation 了&lt;br&gt;
既然都被問了，那就來挑戰看看吧&lt;/p&gt;
&lt;p&gt;只是很不幸的&lt;br&gt;
我的工作就在 SITCON 錄取我後開始忙碌起來&lt;br&gt;
一直都沒時間好好準備簡報&lt;br&gt;
我的第一版簡報甚至要到了台南試講的前一兩個小時才做完&lt;br&gt;
原本想說彩排前還有兩個禮拜可以改&lt;br&gt;
但我還是一直忙到前幾天才有時間好好改...&lt;br&gt;
這才親身體會到，直到要講的前一天才弄簡報不是傳說啊 xD&lt;br&gt;
工程師真是沒看到死線就不會覺悟（笑&lt;br&gt;
所幸不管是試講還是彩排，我應該都講得還不算太差&lt;/p&gt;
&lt;p&gt;至於議程當天&lt;br&gt;
除了人不太多以外，一切都還蠻順利的&lt;br&gt;
時間掌握上，也比我想像得順利得多&lt;br&gt;
雖然現場沒人提問，Sli.do 倒是有不少人留下問題&lt;br&gt;
不過問我 Python 問題的人大概就佔了一半 xD&lt;br&gt;
我想是因為我開頭就介紹了我是 Python 的信徒吧 xDD&lt;/p&gt;
&lt;p&gt;這次會想來當講者&lt;br&gt;
主要就是想訓練自己公開演說的技能&lt;br&gt;
總覺得好像好一段時間都沒有點這項技能了&lt;br&gt;
也想讓去年累個半死辦的 X-Village 有多一點人看到&lt;br&gt;
即使我們的經驗中有很多錯誤的嘗試&lt;br&gt;
還是希望有人多少能從中帶走一些什麼想法，讓下一個這樣的資訊教育辦得更成功&lt;/p&gt;
&lt;p&gt;如果沒參加到我的議程，對我的內容有興趣的話&lt;br&gt;
我有把我的簡報公開出來，我也在會後把 Sli.do 上的問題都回答完了&lt;br&gt;
我應該算還蠻認真的講者吧 xDD&lt;br&gt;
之後沒忘記的話，我應該也會把錄影補上來&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/x-village-yong-bu-dao-liang-ge-yue-zhun-bei-liang-ge-yue-de-ke-cheng"&gt;Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/P-oMfddFSuWbEeFX1WfIVg#X-Village---用不到兩個月準備兩個月的課程"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;身為會眾&lt;/h3&gt;
&lt;p&gt;比起之前參加的幾場 SITCON&lt;br&gt;
這次應該是我參加的議程最少的一次&lt;br&gt;
大概有一半的時間都在外面的攤位閒晃 xD&lt;/p&gt;
&lt;p&gt;倒是 R2 的三場 Espresso 都聽了&lt;br&gt;
每一場的內容跟表達方式都很有趣&lt;/p&gt;
&lt;p&gt;當然每年還是要參與一下編輯器大亂鬥&lt;br&gt;
今年終於不再是 vim 跟 emacs 互鬥，然後還把對方擦掉了 xDD&lt;/p&gt;
&lt;p&gt;&lt;img alt="vs_code_wins" src="/images/posts-image/2019-04-07-SITCON-2019/vs_code_wins.jpeg" style="width:50%"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;講者晚宴&lt;/h3&gt;
&lt;p&gt;這也是這次 SITCON 我蠻期待的一個活動&lt;br&gt;
難得有機會能這樣子跟各路大神交流&lt;br&gt;
不然每次參加 conference ，好像都沒有交到新朋友&lt;br&gt;
當然也有可能只是我太邊緣了&lt;/p&gt;
&lt;p&gt;大家真的都好早就開始碰程式了&lt;br&gt;
同桌之中，最老的就是我ＱＱ&lt;br&gt;
最年輕也有國高中的講者呢&lt;br&gt;
相比他們，我國高中的時候沒有什麼特別的想法&lt;br&gt;
只是跟著大家認為正確的升學道路走&lt;br&gt;
甚至高中還蠻討厭寫程式的呢&lt;br&gt;
沒想到最後竟然還是走上了程式這條路&lt;br&gt;
出來混，早晚還是要還的嗎xD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="SITCON"></category></entry><entry><title>[Note] Effective Python</title><link href="https://blog.wei-lee.me/posts/tech/2019/01/effective-python" rel="alternate"></link><published>2019-01-19T16:45:00+08:00</published><updated>2019-01-19T16:45:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2019-01-19:/posts/tech/2019/01/effective-python</id><summary type="html">&lt;p&gt;&lt;img alt="effective python" src="/images/books/aE00B2o.jpg"&gt;&lt;/p&gt;
&lt;p&gt;第二次看過終於有辦法把原本看不懂的部分都看懂了&lt;br&gt;
那些看不懂的大多是很抽象化的技巧&lt;br&gt;
但是啊，看懂了這些語法&lt;br&gt;
現在的我還是沒有能力，將這些抽象化應用在我自己的程式中&lt;br&gt;
不過其他大部分比較簡單的在看過一次&lt;br&gt;
還是提醒我在每一個眉眉角角都還要再更注意&lt;br&gt;
上次看過的還沒有全部都應用到我寫程式的習慣中呢&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="effective python" src="/images/books/aE00B2o.jpg"&gt;&lt;/p&gt;
&lt;p&gt;第二次看過終於有辦法把原本看不懂的部分都看懂了&lt;br&gt;
那些看不懂的大多是很抽象化的技巧&lt;br&gt;
但是啊，看懂了這些語法&lt;br&gt;
現在的我還是沒有能力，將這些抽象化應用在我自己的程式中&lt;br&gt;
不過其他大部分比較簡單的在看過一次&lt;br&gt;
還是提醒我在每一個眉眉角角都還要再更注意&lt;br&gt;
上次看過的還沒有全部都應用到我寫程式的習慣中呢&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pythonic"&gt;第一章： Pythonic 思維&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#02-pep8"&gt;作法02： 遵循 PEP8 風格指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#04"&gt;作法04： 撰寫輔助函式而非複雜的運算式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#05"&gt;作法05: 知道如何切割序列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#07-list-comprehension-map-filter"&gt;作法07: 使用 list comprehension 而非 map 和 filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#09-generator-list-comprehension"&gt;作法09: 考慮使用 generator 取代大型 list comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-zip-iterables"&gt;作法11: 使用 zip 來平行處理 iterables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-for-while-else"&gt;作法12: 避免在 for 或 while 後面使用 else 區塊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-tryexceptelsefinally"&gt;作法13: 善用 try/except/else/finally 中的每個區塊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;第二章： 函式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#14-none"&gt;作法14: 優先選用例外處理而非回傳 None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#20-none-docstrings-mutable-default-arguments"&gt;作法20: 使用 None 與 Docstrings 來指定 mutable default arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#19-keyword-argument-related-to-21"&gt;作法19: 以 keyword argument 提供選擇性的行為 (Related to 作法21)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#21-keyword-argument"&gt;作法21: 強制使用僅限 keyword argument 來讓程式碼更清楚易懂&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;第三章： 類別與繼承&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#22-class-dictionary-tuple"&gt;作法22: 優先選用輔助 class 而非使用 dictionary 或 tuple 來管理紀錄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#25-super"&gt;作法25: 使用 super 來初始化父類別&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#27"&gt;作法27: 優先選用公開屬性而非私有屬性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;第四章： 元類別與屬性&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#33-34-35"&gt;作法33, 34, 35&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;第五章： 共時與平行處理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#38-lock-data-race"&gt;作法38: 使用 Lock 來避免執行緒中的 data race&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#39-queue"&gt;作法39: 使用 Queue 來協調執行緒之間的工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#41-concurrentfutures"&gt;作法41: 考慮使用 concurrent.futures 來達成真正的平行處理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;第六章： 內建模組&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#34-contextlib-with-statement-tryfinally"&gt;作法34: 考慮使用 contextlib 與 with statement 來建立可重用的 try/finally 行為&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#45-datetime-time"&gt;作法45: 本地時鐘使用 datetime 而非 time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;第七章： 協作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#49-function-class-module-docstrings"&gt;作法49: 為每個 function, class, module 撰寫 Docstrings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#50-package-module-api"&gt;作法50: 使用 package 來組織 module 並提供穩定的 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#51-root-exception-api"&gt;作法51: 定義一個 root exception 來隔離呼叫者與 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#52"&gt;作法52: 知道如何打破循環依存性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;第八章： 推出產品&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#57-pdb"&gt;作法57: 考慮使用 pdb 來進行互動式除錯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#58"&gt;作法58: 最佳化之前先進行效能評估&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#59-tracemalloc"&gt;作法59: 使用 tracemalloc 來了解記憶體用量或是否有洩漏&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id="pythonic"&gt;第一章： Pythonic 思維&lt;/h2&gt;
&lt;h3 id="02-pep8"&gt;作法02： 遵循 PEP8 風格指南&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;br&gt;
(我只把我認為容易被忽略或特別重要的幾點留下來)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whitespace&lt;ul&gt;
&lt;li&gt;過長的 expressions 要接續到其他文字行時，除了原本的縮排層次，應再加上額外的&lt;strong&gt;四個空格&lt;/strong&gt;來縮排&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Naming&lt;ul&gt;
&lt;li&gt;protected instance attributes → _leading_underscore&lt;/li&gt;
&lt;li&gt;private instance attributes → __double_leading_underscore&lt;/li&gt;
&lt;li&gt;Class, exceptions → CapitalizedWord&lt;/li&gt;
&lt;li&gt;model-level constant → ALL_CAPS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Statements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用行內否定 (inline negation, e.g., &lt;code&gt;if a is not b&lt;/code&gt;)，而非否定正向的運算式 (negation of positive expressions, e.g., &lt;code&gt;if not a is b&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;別用查驗長度的方式 (&lt;code&gt;if len(somelist) == 0&lt;/code&gt;) 來檢查空值。使用 &lt;code&gt;if not somelist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免單行 &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;except&lt;/code&gt;，將它們分多行描述以清楚表達&lt;/li&gt;
&lt;li&gt;import module 永遠用絕對名稱&lt;ul&gt;
&lt;li&gt;e.g., 用 &lt;code&gt;from bar import foo&lt;/code&gt; 而不是 &lt;code&gt;import foo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;import 順序&lt;ol&gt;
&lt;li&gt;standard library modules&lt;/li&gt;
&lt;li&gt;third-party modules&lt;/li&gt;
&lt;li&gt;your own modules&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 &lt;a href="https://www.pylint.org"&gt;pylint&lt;/a&gt; 來檢查風格&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="04"&gt;作法04： 撰寫輔助函式而非複雜的運算式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將複雜的運算式移到輔助函式 (helper function) 內，特別是在你需要重複用到同樣的邏輯的時候&lt;/li&gt;
&lt;li&gt;與其在運算式中使用 &lt;code&gt;or&lt;/code&gt; 或 &lt;code&gt;and&lt;/code&gt; ，不如使用 &lt;code&gt;if/else&lt;/code&gt; 讓程式碼更易讀&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# or, and&lt;/span&gt;
&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# if/else&lt;/span&gt;
&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# even better if/else&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# helper function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_first_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;

&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_first_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="05"&gt;作法05: 知道如何切割序列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;省略 zero index, 最後的索引來降低視覺雜訊&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;a[:5]&lt;/code&gt;, &lt;code&gt;a[5:]&lt;/code&gt; 而不是 &lt;code&gt;a[0:5]&lt;/code&gt;, &lt;code&gt;a[5:len(a)]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;copy value v.s. copy reference&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# copy value&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="c1"&gt;# copy reference&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="07-list-comprehension-map-filter"&gt;作法07: 使用 list comprehension 而非 map 和 filter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免用 &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; ，因為使用他們時需要建立一個 &lt;code&gt;lambda&lt;/code&gt; ，這是種視覺雜訊&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# list comprehension&lt;/span&gt;
&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# map&lt;/span&gt;
&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="09-generator-list-comprehension"&gt;作法09: 考慮使用 generator 取代大型 list comprehension&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對於大型輸入來說 list comprehension 可能耗用相當大量的記憶體&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="11-zip-iterables"&gt;作法11: 使用 zip 來平行處理 iterables&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# without zip&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# with zip&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;如果提供了不同長度的 iterables ， zip 會 truncate 掉較長的 input&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="12-for-while-else"&gt;作法12: 避免在 for 或 while 後面使用 else 區塊&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# avoid&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="13-tryexceptelsefinally"&gt;作法13: 善用 try/except/else/finally 中的每個區塊&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;即使例外發生，但也想要在例外發生時執行清理用的 cleanup code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;如果 try 沒有丟出例外， else 區塊就會執行&lt;/li&gt;
&lt;li&gt;用來最小化 try 區塊的程式碼量 → &lt;strong&gt;讓 try 區塊只出現會丟出例外的程式碼&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;第二章： 函式&lt;/h2&gt;
&lt;h3 id="14-none"&gt;作法14: 優先選用例外處理而非回傳 None&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;回傳 &lt;code&gt;None&lt;/code&gt; 帶有特殊意義的函式容易出錯，因為 &lt;code&gt;None&lt;/code&gt; 與其他的值 (e.g., &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;)，在做條件運算式運算的結果都是 &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="20-none-docstrings-mutable-default-arguments"&gt;作法20: 使用 None 與 Docstrings 來指定 mutable default arguments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;default arguments 只會被 evaluate 一次：模組載入時、函式定義時。對於動態值 (e.g., &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;) 來說，這可能導致奇怪的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# The two results would be the same but should be different&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Demonstration&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;        default: current datetime&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="19-keyword-argument-related-to-21"&gt;作法19: 以 keyword argument 提供選擇性的行為 (Related to 作法21)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# original&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flow_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;

&lt;span class="c1"&gt;# with default argument&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flow_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不像「作法21」全面採取 keyword argement的原因是為了達到 backwards compatibility&lt;/p&gt;
&lt;h3 id="21-keyword-argument"&gt;作法21: 強制使用僅限 keyword argument 來讓程式碼更清楚易懂&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 keyword-only arguments 來強制要求呼叫者提供 keyword argument 以避免混淆，特別是在接收多個 Boolean flag 的函式中&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# * indicates the end of positional arguments&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_division&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;ignore_overflow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;第三章： 類別與繼承&lt;/h2&gt;
&lt;h3 id="22-class-dictionary-tuple"&gt;作法22: 優先選用輔助 class 而非使用 dictionary 或 tuple 來管理紀錄&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果還不需要用到較有彈性的完整 class，請使用 &lt;code&gt;namedtuple&lt;/code&gt; 來製作輕量化、不可變的資料容器&lt;ul&gt;
&lt;li&gt;&lt;code&gt;namedtuple&lt;/code&gt; 不能指定預設引數值，如果資料有許多 optional properties，則還是適合用 class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="25-super"&gt;作法25: 使用 super 來初始化父類別&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Implicit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="27"&gt;作法27: 優先選用公開屬性而非私有屬性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼私有屬性的語法不強制施行嚴格的可見性限制呢？&lt;ul&gt;
&lt;li&gt;We are all consenting adults here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選擇私有屬性，只會讓子類別的 overrides 或 extensions 動作變得更麻煩更容易出錯&lt;/li&gt;
&lt;li&gt;一般來說最好選擇使用 protected attributes&lt;/li&gt;
&lt;li&gt;唯一得認真考慮使用 private attributes 的時機，是擔心子類別會有名稱衝突的時候&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;第四章： 元類別與屬性&lt;/h2&gt;
&lt;h3 id="33-34-35"&gt;作法33, 34, 35&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Metaclass 的應用&lt;ul&gt;
&lt;li&gt;驗證 subclass 是否有被正確定義&lt;/li&gt;
&lt;li&gt;註冊 class 的存在&lt;/li&gt;
&lt;li&gt;在一個 class 被實際使用前，修改其特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;第五章： 共時與平行處理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;共時 (concurrency): 作業系統會在單一處理器快速切換多個執行程式&lt;/li&gt;
&lt;li&gt;平行處理 (parallelism): 真正在同一時間執行許多工作的處理方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="38-lock-data-race"&gt;作法38: 使用 Lock 來避免執行緒中的 data race&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果用 thread 去跑 &lt;code&gt;increment&lt;/code&gt; 會造成 data race&lt;br&gt;
原因是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;實際上執行了三個 operation&lt;br&gt;
等效於以下的程式碼&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時候必須在 &lt;code&gt;increment&lt;/code&gt; 加上 &lt;code&gt;Lock&lt;/code&gt; 避免 data race&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LockingCounter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="39-queue"&gt;作法39: 使用 Queue 來協調執行緒之間的工作&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;consumer waiting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;consumer done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Producer putting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Producer done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="41-concurrentfutures"&gt;作法41: 考慮使用 concurrent.futures 來達成真正的平行處理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from concurrent.futures import multiprocessing&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;藉由執行額外的直譯器作為 child processes。因為這些 child processes 跟主直譯器是分開的，所以它們的 GIL 也是分開的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 multiprocessing 的成本很高&lt;ul&gt;
&lt;li&gt;因為 main process 和 child processes 的溝通需要透過 serialization 和 deserialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiprocessing 適合&lt;ul&gt;
&lt;li&gt;isolated: 不必與程式其他部分共用狀態的 function&lt;/li&gt;
&lt;li&gt;high-leverage: 在 main process 和 child processes 只需要轉移少量的資料，就能進行大量計算的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiprocessing 最好只用到 &lt;code&gt;concurrent.futures&lt;/code&gt; 的 built-in module 和 &lt;code&gt;ProcessPoolExecutor&lt;/code&gt; class&lt;ul&gt;
&lt;li&gt;其他部分過於複雜，建議避免&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;第六章： 內建模組&lt;/h2&gt;
&lt;h3 id="34-contextlib-with-statement-tryfinally"&gt;作法34: 考慮使用 contextlib 與 with statement 來建立可重用的 try/finally 行為&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;


&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;old_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getEffectiveLevel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;log_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mylog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This is my message!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This will not print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yield&lt;/code&gt; 前是 contextmanager 的 &lt;code&gt;__enter__&lt;/code&gt; 會執行的部分，之後則是 &lt;code&gt;__exit__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="45-datetime-time"&gt;作法45: 本地時鐘使用 datetime 而非 time&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;搭配 &lt;code&gt;pytz&lt;/code&gt; module 來使用 &lt;code&gt;datetime&lt;/code&gt; built-in module 在不同時區的時間之間作轉換&lt;/li&gt;
&lt;li&gt;處理過程中，永遠用 UTC 來記錄，呈現給使用者前才轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;第七章： 協作&lt;/h2&gt;
&lt;h3 id="49-function-class-module-docstrings"&gt;作法49: 為每個 function, class, module 撰寫 Docstrings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;General Docstring Guide&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用3個 double quotes (&lt;code&gt;"""&lt;/code&gt;) 開頭&lt;/li&gt;
&lt;li&gt;第一行應該是單一句子，來描寫用途&lt;/li&gt;
&lt;li&gt;接下來的文字含有使用者應該知道的作業細節&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將重要的 public attribute 和 method 在 class level 的 docstring 寫出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;public function / method&lt;ul&gt;
&lt;li&gt;寫上 function 的特殊行為, argument 和 return value&lt;/li&gt;
&lt;li&gt;如果沒有 argument, return value，單句描述應該就夠了&lt;/li&gt;
&lt;li&gt;如果不會回傳任何東西，就不要提到 return value，而不是寫 "return None"&lt;/li&gt;
&lt;li&gt;如果有用到數目不定的 argument , keyword-argument，應該用 &lt;code&gt;*args&lt;/code&gt;, &lt;code&gt;**kwargs&lt;/code&gt;來描述&lt;/li&gt;
&lt;li&gt;如果有 default argument 都應該被提及&lt;/li&gt;
&lt;li&gt;如果是一個 generator，應該描述 iterate 時會 yield 什麼&lt;/li&gt;
&lt;li&gt;如果是 coroutine，應該描述&lt;ul&gt;
&lt;li&gt;會產生什麼&lt;/li&gt;
&lt;li&gt;預期從 yield 收到什麼&lt;/li&gt;
&lt;li&gt;什麼時候會停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="50-package-module-api"&gt;作法50: 使用 package 來組織 module 並提供穩定的 API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python 可以透過 module 或 package 的 &lt;code&gt;__all__&lt;/code&gt; 特殊屬性來限制要暴露給 API 使用者的「表面積」&lt;ul&gt;
&lt;li&gt;如此即使重構也不會影響到使用者&lt;/li&gt;
&lt;li&gt;這在提供明確、穩定、給外部使用的 API 是個很好的做法&lt;/li&gt;
&lt;li&gt;如果只是在建置自己 module 間使用的 API 則是應該避免的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;盡可能使用 &lt;code&gt;from x import y&lt;/code&gt;，而不是 &lt;code&gt;import *&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import *&lt;/code&gt; 可能造成變數名稱複寫，而且不容易被 debug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="51-root-exception-api"&gt;作法51: 定義一個 root exception 來隔離呼叫者與 API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼要自定義一個 root exception?&lt;ul&gt;
&lt;li&gt;讓使用者知道他們以錯誤的用法使用了你的 API&lt;/li&gt;
&lt;li&gt;幫助你找出 API 中的 bug → 只要不是提出這些自定義的例外，就很可能是 bug 的所在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="52"&gt;作法52: 知道如何打破循環依存性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最好的做法是重構程式碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但有時候清楚的劃分相當困難，或 cost 太高了，因此還是需要知道如何打破循環依存性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解法一： 重新安排匯入順序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這是一個比較不好的做法，違反了 PEP 8，且容易讓程式碼稍微的修改就造成問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解法二： import, configure and execute&lt;ul&gt;
&lt;li&gt;讓 module 只作定義 function, class 和 constant，不做實際執行&lt;/li&gt;
&lt;li&gt;每個 module 提供一個 configure 函式，讓所有 module 都完成匯入後才呼叫&lt;/li&gt;
&lt;li&gt;許多狀況下都能運作良好，並且讓 dependency injection 變得可能&lt;/li&gt;
&lt;li&gt;缺點&lt;ul&gt;
&lt;li&gt;很難重新組織程式碼架構&lt;/li&gt;
&lt;li&gt;因為物件的定義和 configuration 在不同的地方，造成程式碼更難閱讀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解法三： 動態匯入&lt;ul&gt;
&lt;li&gt;通常是最簡單的解法&lt;/li&gt;
&lt;li&gt;在 function/method 中才使用 import&lt;/li&gt;
&lt;li&gt;但一般來說來是最好避免， import 的 cost 並沒有小到可以被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_7"&gt;第八章： 推出產品&lt;/h2&gt;
&lt;h3 id="57-pdb"&gt;作法57: 考慮使用 pdb 來進行互動式除錯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在程式碼加入以下這行，就能讓程式執行到這一步時停下，開啟互動式的 python shell&lt;br&gt;
&lt;code&gt;python
    import pdf; pdf.set_trace()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檢視執行中的程式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bt&lt;/code&gt;: 印出目前 call stack 的 traceback&lt;/li&gt;
&lt;li&gt;&lt;code&gt;up&lt;/code&gt;: 上移 call stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;down&lt;/code&gt;: 下移 call stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恢復程式的執行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt;: 執行程式，直到下一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt;: 執行程式，直到遇到目前函式的下一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;: 執行程式，直到目前函式回傳&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;: 執行程式，直到下一個 breakpoint 或 set_trace 再被呼叫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="58"&gt;作法58: 最佳化之前先進行效能評估&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;cProfile&lt;/code&gt; module 而非 &lt;code&gt;profile&lt;/code&gt; module&lt;ul&gt;
&lt;li&gt;因為對程式效能的影響較小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cProfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Stats&lt;/span&gt;

&lt;span class="c1"&gt;# some program to test&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt;

&lt;span class="n"&gt;profiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runcall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip_dirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cumulative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="59-tracemalloc"&gt;作法59: 使用 tracemalloc 來了解記憶體用量或是否有洩漏&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python 的預設實作 CPython 中，記憶體管理的方式是使用 reference counting&lt;/li&gt;
&lt;li&gt;Python 3.4 以後可以使用 tracemalloc&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tracemalloc&lt;/span&gt;
&lt;span class="n"&gt;tracemalloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;time1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tracemalloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_snapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# some code that waste memory&lt;/span&gt;

&lt;span class="n"&gt;time2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tracemallo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_snapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lineno&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Note"></category></entry><entry><title>[Note] Clean Code</title><link href="https://blog.wei-lee.me/posts/tech/2018/11/clean-code" rel="alternate"></link><published>2018-11-16T17:08:00+08:00</published><updated>2020-10-08T16:12:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2018-11-16:/posts/tech/2018/11/clean-code</id><summary type="html">&lt;p&gt;既然都把 The Clean Coder 做完了&lt;br&gt;
就順便把原本在 GitBook 的 The Clean Code 一起搬過來好了&lt;/p&gt;
&lt;p&gt;&lt;img alt="clean code" src="/images/books/clean code.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;既然都把 The Clean Coder 做完了&lt;br&gt;
就順便把原本在 GitBook 的 The Clean Code 一起搬過來好了&lt;/p&gt;
&lt;p&gt;&lt;img alt="clean code" src="/images/books/clean code.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;blockquote&gt;
&lt;p&gt;Lee-W @ 2020-10-08&lt;br&gt;
隔了兩年又再回來翻這本書&lt;br&gt;
這次除了打算把後面的章節全部看完外，也會重新把筆記順過一次&lt;/p&gt;
&lt;p&gt;第四次把前十章看完後，感到一些原本似懂非懂的概念，變得理所當然&lt;br&gt;
但依然會對巧妙的地方感到讚嘆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;第1章：無暇的程式碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;第2章：有意義的命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;第3章：函式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;錯誤處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;參數&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;如何寫出這樣函式？？？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;第4章：註解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;有用的註解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;糟糕的註解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;第5章：編排&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;函式間的編排&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;使用空行、空白&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;第6章：物件及資料結構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;第7章：錯誤處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;第8章：邊界&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9"&gt;第9章：單元測試&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;第10章：類別&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;職責&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;凝聚性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="1"&gt;第1章：無暇的程式碼&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LeBlanc's Law: 待會而等於永不&lt;ul&gt;
&lt;li&gt;待會兒再回來整理程式，等於讓程式一直限於髒亂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;髒亂的程式只會讓開發速度更慢。&lt;strong&gt;趕上期限的方法是隨時都確保程式儘可能的乾淨&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;What is Clean Code?&lt;ul&gt;
&lt;li&gt;只做好一件事&lt;/li&gt;
&lt;li&gt;可以被原作者以外的開發者閱讀與擴充的&lt;/li&gt;
&lt;li&gt;Beck's rules for simple code&lt;ul&gt;
&lt;li&gt;通過所有測試&lt;/li&gt;
&lt;li&gt;沒有重複的程式碼&lt;/li&gt;
&lt;li&gt;充份表達系統設計的構思&lt;/li&gt;
&lt;li&gt;具有最少的 entities (e.g., class, methods, functions, and etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每一次修改程式碼之後，都得讓程式碼變得比修改之前再更乾淨&lt;ul&gt;
&lt;li&gt;童子軍原則: 每次你到過的營地，離開後要比之前更乾淨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2"&gt;第2章：有意義的命名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Variables, methods, classes 要能解釋他們為什麼在這、做什麼用和怎麼使用它&lt;/li&gt;
&lt;li&gt;變數名稱要唸得出來 (e.g., &lt;del&gt;genYMDHMS&lt;/del&gt;)&lt;/li&gt;
&lt;li&gt;較小的名稱如果能表達足夠的意義，通常比較長的名稱好，儘量減少再命名上不必要的文字&lt;/li&gt;
&lt;li&gt;不要用變數型態作為變數名稱&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;accountList&lt;/code&gt; → &lt;code&gt;accountGroup&lt;/code&gt; or &lt;code&gt;accounts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要區別名稱，用&lt;strong&gt;讀者能分辨的區別方式&lt;/strong&gt;！！！&lt;ul&gt;
&lt;li&gt;e.g.,&lt;ul&gt;
&lt;li&gt;&lt;del&gt;moneyAmount&lt;/del&gt; → &lt;code&gt;money&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;customerInfo&lt;/del&gt; → &lt;code&gt;customer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名的長度應該要與 scope 大小對應&lt;ul&gt;
&lt;li&gt;一個常用到的變數或常數，最好給它一個容易被搜尋的名子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詞性&lt;ul&gt;
&lt;li&gt;class, object → 名詞&lt;/li&gt;
&lt;li&gt;method → 動詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;替單一的概念選一個詞&lt;ul&gt;
&lt;li&gt;e.g., get, fetch, retrieve 混用是一件很糟的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免用雙關語，或可以表達兩個意思的字&lt;ul&gt;
&lt;li&gt;e.g., 加入一個新的值 : &lt;del&gt;add&lt;/del&gt; → append, insert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3"&gt;第3章：函式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;寫一個好的函式有兩個守則&lt;ul&gt;
&lt;li&gt;簡短&lt;/li&gt;
&lt;li&gt;比簡短來得更簡短&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;準則&lt;ul&gt;
&lt;li&gt;每行應該少於150字，函式應該少於20行&lt;/li&gt;
&lt;li&gt;但最重要的是，&lt;strong&gt;每個函式都要能清楚的告訴你本身的意圖，並帶領你到下個函式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;別去害怕取較長的函數名稱&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;長但具描述性質 &amp;gt; 註解 &amp;gt; 短而無法理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;降層準則： 由上而下閱讀的程式&lt;/li&gt;
&lt;li&gt;Don't repeat yourself at any cost!!!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; 這些敘述最好都只有一行，而那行通常是函式呼叫&lt;ul&gt;
&lt;li&gt;避免巢狀結構，&lt;strong&gt;函式內的縮排不該超過一或兩層&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函式應該只做好做一件事情&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;做一件事的函式不應該被合理的分成不同的段落 (e.g., 宣告區, 初始區... and etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函式要能&lt;strong&gt;做好某件事&lt;/strong&gt;，或&lt;strong&gt;回答某個問題&lt;/strong&gt;，而這代表&lt;strong&gt;兩者不該同時發生！！！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;......&lt;/span&gt;

&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;setAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;錯誤處理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用例外處理取代錯誤碼回傳&lt;ul&gt;
&lt;li&gt;而錯誤處理是會混淆程式結構的，比較好的作法就是把 try catch 區塊提出來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deletePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeKey&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;page deleted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;configKey not delete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;deleteReference from registry failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delete failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;deletePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;configKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeKey&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// even more refactored&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;deletePageAndAllReferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;deletePageAndAllReferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;deletePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;configKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeKey&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;參數&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;函式最好是不使用到參數，可以的話不要超過3個&lt;ul&gt;
&lt;li&gt;除非有非常特殊的理由，否則都不該超過3個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;別傳flag參數(e.g. isSutie)進入函式&lt;/strong&gt;，那代表這個函式一定做超過一件事！！！&lt;/li&gt;
&lt;li&gt;單一參數函式&lt;ul&gt;
&lt;li&gt;問與這個參數有關的問題 (e.g., &lt;code&gt;fileExists("MyFile")&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;對這個參數進行操作，並且 &lt;strong&gt;回傳&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;事件，利用參數去改變系統的狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 ~ 3 個參數&lt;ul&gt;
&lt;li&gt;注意參數順序性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用建立物件的方式，減少函式參數的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;makeCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;makeCirecle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;radiue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;避免使用輸出型參數，這十分的讓人困惑&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;appendFooter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendFooter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;如何寫出這樣函式？？？&lt;/h3&gt;
&lt;p&gt;一直修改和重構，直到足夠精簡&lt;br&gt;
不用一開始就要寫到最精簡，實際上那也是辦不到的&lt;/p&gt;
&lt;h2 id="4"&gt;第4章：註解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要替糟糕的程式碼寫註解 ─ 重寫它！！！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;即使是適當的使用註解，也只是用來彌補程式碼表達意思的失敗&lt;ul&gt;
&lt;li&gt;每次要寫註解時，先思考是否能&lt;strong&gt;直接用程式碼表達&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;註解只應該描述附近的程式碼，不要在區域性註解內放入系統全域資訊&lt;/li&gt;
&lt;li&gt;替只做一件事的小函式選一個好名稱，多半比將註解寫在函式標頭優雅&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;有用的註解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供資訊的註解&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//format matched kk:mm:ss EEE, MMM dd, yyyy&lt;/span&gt;
&lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tiMatcher&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\d*:\\d*:\\d* \\w*, \\w* \\d*, \\d*&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;對後果的告誡： 警告會出現某種特殊後果的註解&lt;/li&gt;
&lt;li&gt;TODO&lt;/li&gt;
&lt;li&gt;公開 API 中的 Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;糟糕的註解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大部分的註解&lt;/li&gt;
&lt;li&gt;多餘的註解： 沒比程式碼本身透露更多資訊的註解&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;del&gt;每個函式，每個變數都該有註解來說明&lt;/del&gt;。&lt;strong&gt;不，別這麼做&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把暫時無用的程式碼註解掉並留著，是很惱人的 → 版本控制會幫我們記下它&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="5"&gt;第5章：編排&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;選擇一些簡單的縮排規則，並持續的運用它&lt;ul&gt;
&lt;li&gt;如果在一個團隊，所有成員都該依循著一套統一的編排規則&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;團隊合作時，事先決定編排方式是值得的&lt;ul&gt;
&lt;li&gt;該在哪裡放括號&lt;/li&gt;
&lt;li&gt;縮排寬度多少&lt;/li&gt;
&lt;li&gt;如何命名變數、類別、方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;編排是一種溝通方式，可以嚴重影響可讀性，所以我們要很重視它&lt;/li&gt;
&lt;li&gt;垂直邊排： 一份程式檔大概多長比較好？&lt;ul&gt;
&lt;li&gt;一份重要的大型專案也可以在大多數程式檔都只有200行左右的情況下完成&lt;/li&gt;
&lt;li&gt;這沒有硬性規定。但要知道&lt;strong&gt;簡短的程式檔總是比大型的程式檔容易理解&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;變數應該被宣告在接近它被使用的地方&lt;ul&gt;
&lt;li&gt;區域變數應該在函式的最上方被宣告&lt;/li&gt;
&lt;li&gt;迴圈的控制變數應該在回圈敘述內宣告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;函式間的編排&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果一個函式呼叫了另一個函式，這個函式最好放在被呼叫函式的上方&lt;/li&gt;
&lt;li&gt;概念高度相似的函式也應該垂直的放在一起&lt;ul&gt;
&lt;li&gt;也許是類似的命名或相同工作的變異版本，就算沒相互呼叫，還是應該放在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;談到了垂直的寬度後，那水平的寬度呢?&lt;ul&gt;
&lt;li&gt;雖然我們喜歡較短的程式碼，但只要是&lt;strong&gt;不需要用到捲軸捲到右方就可以稱為適當的寬度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有時候if, while或簡單的函式，可以被縮減為一行，讓我們違反一般的縮排規則，&lt;strong&gt;不建議這麼做&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="c1"&gt;//better&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_7"&gt;使用空行、空白&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一段程式碼都代表一個完整思緒，而我們用空行來區隔它們&lt;ul&gt;
&lt;li&gt;而如果程式碼們是相關的，它們就該是垂直緊密的&lt;/li&gt;
&lt;li&gt;相似的概念應該要放在同一份檔案中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們用水平的空白來區分高度和低度相關的概念，也可以作為強調用，下面的程式碼是書中一個很棒的例子&lt;ul&gt;
&lt;li&gt;注意到return那行，這裡用空格來強調運算子的優先權&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Quadratic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;determinant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;determinant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;determinant&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;......&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="6"&gt;第6章：物件及資料結構&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;資料結構容易新增函式，而物件容易增加新類別。&lt;/strong&gt; 反之亦然&lt;/li&gt;
&lt;li&gt;模組不該知道它操作的物件的內部操作&lt;/li&gt;
&lt;li&gt;別使用一連串的程式呼叫&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outputDir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getScratchDir&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePaty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//refactored&lt;/span&gt;
&lt;span class="n"&gt;Option&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scratchDir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getScractchDir&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outputDir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scratchDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="7"&gt;第7章：錯誤處理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例外處理應該要能提供&lt;strong&gt;有用的錯誤訊息&lt;/strong&gt;，&lt;ul&gt;
&lt;li&gt;e.g, 哪裡發生錯誤、錯誤型態是什麼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;別回傳 null，試著拋出例外事件是更好的作法&lt;ul&gt;
&lt;li&gt;函式回傳 null 已經夠糟了，但傳遞 null 進去更是糟糕透頂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wrapper: 從呼叫者的角度定義例外class -&amp;gt; 減少依賴&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wrapper Example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// original&lt;/span&gt;
&lt;span class="n"&gt;ACMEPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ACMEPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeviceResponseException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Device response exception&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATM1212UnlockedException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ATM1212UnlockedException&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HMXError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Device response exception&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="n"&gt;LocalPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LocalPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ACMEPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;innerPort&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;LocalPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;innerPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ACMEPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;innerPort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeviceResponseException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATM1212UnlockedException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GMXError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="8"&gt;第8章：邊界&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;學習型測試： 不在產品程式（production）裡實驗新的東西，而是另外寫測試程式，來了解第三方軟體&lt;ul&gt;
&lt;li&gt;學習型測試不會花太多額外時間（因為原本就要研究 API），而且能用來&lt;strong&gt;確認第三方軟體是否能照我們預期的執行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果沒有這種&lt;strong&gt;邊界測試&lt;/strong&gt;來減輕版本更新時的整合負擔，我們&lt;strong&gt;只能一直停留在舊的版本&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免我們的程式過度的使用第三方軟體的特殊之處，最好是依靠在可以控制的程式之上。免得到最後反而受到第三方軟體的控制&lt;/li&gt;
&lt;li&gt;使用尚未存在的程式（e.g., 尚未開定義好）&lt;ul&gt;
&lt;li&gt;自行定義介面，並用 adapter 封裝與 API 的互動&lt;ul&gt;
&lt;li&gt;額外的好處是如果 API 升級，也只需要改動 adapter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="9"&gt;第9章：單元測試&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;為什麼要寫測試？&lt;ul&gt;
&lt;li&gt;測試讓程式保有彈性&lt;/li&gt;
&lt;li&gt;不用怕修改程式會造成程式結果不如預期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;測試程式跟產品程式一樣重要，一樣需要整潔&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可讀性&lt;/strong&gt;造就了整潔的測試程式&lt;/li&gt;
&lt;li&gt;但是測試程式並不需要產品程式一樣的有效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整潔測試程式的 5 個原則 F.I.R.S.T.&lt;ol&gt;
&lt;li&gt;Fast: 能快速的被執行&lt;/li&gt;
&lt;li&gt;Independent: 測試程式不該相互依賴&lt;/li&gt;
&lt;li&gt;Repeatable: 可以在任何環境重複執行&lt;/li&gt;
&lt;li&gt;Self-Validating: 輸出 boolean ，你不該手動比較兩個檔案才知道有沒有通過測試&lt;/li&gt;
&lt;li&gt;Timely: 單元測試要在恰好能使其通過的產品程式&lt;strong&gt;之前&lt;/strong&gt;不久撰寫&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BUILD-OPERATE-CHECK&lt;ol&gt;
&lt;li&gt;建立測試資料&lt;/li&gt;
&lt;li&gt;操作測試資料&lt;/li&gt;
&lt;li&gt;檢查「操作測試資料」後的結果是否如預期&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;一個測試只能有一個assert&lt;/del&gt; → &lt;strong&gt;一個測試只測試一個概念&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TDD (Test Driven Development) 三大法則&lt;ol&gt;
&lt;li&gt;在撰寫一個單元測試前，不可撰寫任何產品程式&lt;/li&gt;
&lt;li&gt;只撰寫剛好無法通過的單元測試，不能編譯也算無法通過&lt;/li&gt;
&lt;li&gt;只撰寫剛好能通過當前測試的產品程式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="10"&gt;第10章：類別&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java的慣例&lt;ul&gt;
&lt;li&gt;類別以變數開頭&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public static final&lt;/code&gt; → &lt;code&gt;private static&lt;/code&gt; → &lt;code&gt;private&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;code&gt;public&lt;/code&gt; (幾乎很少有理由要用到)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;public 函式緊跟在變數&lt;/li&gt;
&lt;li&gt;private 的工具函式，會跟在呼叫它的函式後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不用過度執著於封裝，有時候為了讓測試程式存取， protected 是必要的&lt;/li&gt;
&lt;li&gt;設計程式時，一次只專注在「讓程式運作」或「讓程式整潔」之一，而兩者是同樣重要的&lt;/li&gt;
&lt;li&gt;系統應該要由很多小的 class 組成，而不是少數的大 class 組成&lt;/li&gt;
&lt;li&gt;我們架構的系統，在未來想新增或修改功能時，應該要儘可能不動到其他程式碼&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開放閉合原則&lt;/strong&gt;： 類別應該要對擴充有開放性，對修改有封閉性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相依性反向原則&lt;/strong&gt;： 類別應該要相依於抽象概念，而不是相依在具體細節&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;職責&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class 除了簡短還是要簡短&lt;ul&gt;
&lt;li&gt;在函式計算行數，class算的是&lt;strong&gt;職責的數量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;class的命名要能足夠描寫他的職責&lt;ul&gt;
&lt;li&gt;如果無法取個明確的名稱，這個 class 可能就太大了&lt;/li&gt;
&lt;li&gt;模稜兩可的名稱，代表 class 可能包含愈多的職責，而這是我們不希望的&lt;/li&gt;
&lt;li&gt;用 25 個字詞為這個 class 寫出簡短的描述，而不使用到模糊的字眼，這樣的 class 就是職責數量恰當&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;單一職責原則&lt;/strong&gt;： 一個 class 或 module 應該有也只能有一個修改的理由&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;凝聚性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class 只應該要有少量的實體變數， class 的每個方法都應該操作一個或更多這些變數&lt;/li&gt;
&lt;li&gt;不用也不太可能產生最大凝聚性類別&lt;ul&gt;
&lt;li&gt;但當凝聚性增加，就代表方法和變數結合成一個邏輯的整體，這是我們所希望的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;class 累積越來越多實體變數，但只有少數函式操作著他們，就會開始喪失凝聚性&lt;ul&gt;
&lt;li&gt;而這就是應該拆開 class 的時候了！！！&lt;/li&gt;
&lt;li&gt;不用重新撰寫程式，而是應該改變它&lt;ul&gt;
&lt;li&gt;先寫好一套驗證的測試程式，一次一個地改變&lt;/li&gt;
&lt;li&gt;每一次變動都重新驗證是否如預期執行&lt;/li&gt;
&lt;li&gt;重構完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Note"></category><category term="Software Engineering"></category></entry><entry><title>[Note] The Clean Coder</title><link href="https://blog.wei-lee.me/posts/tech/2018/11/the-clean-coder" rel="alternate"></link><published>2018-11-16T15:03:00+08:00</published><updated>2018-11-16T15:03:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2018-11-16:/posts/tech/2018/11/the-clean-coder</id><summary type="html">&lt;p&gt;過了幾年又重新看過這本書才慢慢能感受到裡面說的&lt;br&gt;
Uncle Bob 的書真的每個階段看都會有很不一樣的感覺&lt;br&gt;
很值得買回來收 xD&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clean Coder" src="/images/books/5a0LzcS.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;過了幾年又重新看過這本書才慢慢能感受到裡面說的&lt;br&gt;
Uncle Bob 的書真的每個階段看都會有很不一樣的感覺&lt;br&gt;
很值得買回來收 xD&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clean Coder" src="/images/books/5a0LzcS.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;幾年前第一次看這本書的時候&lt;br&gt;
寫程式大多只是交作業，頂多就跟其他的同學一起交大一點的作業或開發一些小專案&lt;br&gt;
能不要被雷（或不要雷別人）就很不錯了&lt;br&gt;
當時記錄下的摘要也就沒什麼內容（&lt;a href="https://blog.wei-lee.me/posts/book/2015/01/Soft"&gt;[Book] Clean Coder&lt;/a&gt;）&lt;br&gt;
到了現在。加減算是做過稍微大一點的專案，也帶過一些小專案&lt;br&gt;
重新看過這本書，就慢慢理解了一點 Uncle Bob 想說的&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;關於本書&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;第一章：專業主義&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;擔當責任&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;自動化測試&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;結構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;職業道德&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;了解你的領域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;學習&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;了解業務領域&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;第二章：説「不」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;第三章：説「是」&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_12"&gt;識別「缺乏承諾」的徵兆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;真正的承諾聽起來是怎樣的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;第四章：寫程式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_15"&gt;做好準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_16"&gt;創意輸入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_17"&gt;保持節奏、知道何時應該離開一會&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_18"&gt;進度延遲&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_19"&gt;交付失敗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_20"&gt;幫助&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_21"&gt;第五章：測試驅動開發&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tdd"&gt;TDD 的三大法則&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tdd_1"&gt;TDD 的優勢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_22"&gt;第六章：練習&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_23"&gt;自身經驗的拓展&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_24"&gt;第七章：驗收測試&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_25"&gt;測試的協商與被動推進&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_26"&gt;結論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_27"&gt;第八章：測試策略&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_28"&gt;自動化測試金字塔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_29"&gt;第九章：時間管理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_30"&gt;會議&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_31"&gt;爭論 / 反對&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manna"&gt;專注力 Manna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_32"&gt;要避免的行為&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_33"&gt;死胡同&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;第10章：預估&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pert-program-evaluation-and-review-technique"&gt;PERT (Program Evaluation and Review Technique)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_34"&gt;大數法則&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#11"&gt;第11章：壓力&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_35"&gt;避免壓力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_36"&gt;應對壓力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#12"&gt;第12章：協作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13"&gt;第13章：團隊與專案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14"&gt;第14章：輔導、學徒期與工藝典範&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#appendix-a"&gt;Appendix A: 工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;關於本書&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什麼是軟體專業人士？&lt;/li&gt;
&lt;li&gt;軟體專業人士如何行事？&lt;/li&gt;
&lt;li&gt;軟體專業人士如何處理衝突，「應對」緊湊的開發進度表？如何和不切實際的管理人員打交道？&lt;/li&gt;
&lt;li&gt;軟體專業人士何時應該說「不」？怎麼說？&lt;/li&gt;
&lt;li&gt;軟體專業人士如何「應對」壓力？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;第一章：專業主義&lt;/h2&gt;
&lt;h3 id="_3"&gt;擔當責任&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;專業人士如果犯了錯，只好&lt;strong&gt;自己&lt;/strong&gt;收拾殘局&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;專業主義就代表著&lt;strong&gt;「擔當責任」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你說的沒錯。軟體發展太複雜了，不可能沒什麼Bug。但很不幸，這個理由並不能為你開脫。人體太複雜了，不可能完全理解，但醫生仍誓言不傷害病人。如果他們不拿人體的複雜性做託辭，我們又怎麼能拿上述理由，開脫自已的責任呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程式難免出現 bug ，但這不意味著你不用對他們負責；沒人能寫出完美的軟體，但這不代表你不用對不完美負責。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每次 QA 找出問題時，或者更糟糕的是「用戶找出問題」時，你都該震驚羞愧，並決心以此為戒。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;自動化測試&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;寫一些隨時都能執行的「單元測試」，然後盡可能地多執行&lt;/li&gt;
&lt;li&gt;要測試多少程式碼呢？ → &lt;strong&gt;當然是全部！全部都要測！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;但有些程式碼不是很難測嗎？&lt;ul&gt;
&lt;li&gt;沒錯。但之所以難測，是因為設計時沒考慮如何測試&lt;/li&gt;
&lt;li&gt;唯一的解決辦法就是要設計&lt;strong&gt;「易於測試的程式碼」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;想證明軟體易於修改，唯一的辦法就是「做些實際的修改」&lt;ul&gt;
&lt;li&gt;如果發現這些修改不如想像中簡單，就應該改進設計，讓後續的改變更簡單&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;職業道德&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你應該計畫每週的60小時中&lt;ul&gt;
&lt;li&gt;40小時給雇主&lt;/li&gt;
&lt;li&gt;20小時給自己 （大約每天 3 小時）&lt;ul&gt;
&lt;li&gt;不為雇主工作，為自己的職業發展工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_7"&gt;了解你的領域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個專業軟體發展人員&lt;strong&gt;至少&lt;/strong&gt;必須精通的事項&lt;ul&gt;
&lt;li&gt;Design patterns&lt;ul&gt;
&lt;li&gt;GOF&lt;/li&gt;
&lt;li&gt;POSA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design principles&lt;ul&gt;
&lt;li&gt;SOLID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Methods&lt;ul&gt;
&lt;li&gt;XP&lt;/li&gt;
&lt;li&gt;Scrum&lt;/li&gt;
&lt;li&gt;Lean&lt;/li&gt;
&lt;li&gt;Kanban&lt;/li&gt;
&lt;li&gt;Waterflow&lt;/li&gt;
&lt;li&gt;結構化分析&lt;/li&gt;
&lt;li&gt;結構化設計&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disciplines&lt;ul&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;物件導向設計&lt;/li&gt;
&lt;li&gt;結構化程式設計&lt;/li&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;li&gt;Pair Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Artifacts&lt;ul&gt;
&lt;li&gt;UML&lt;/li&gt;
&lt;li&gt;DFD (Data Flow Diagram)&lt;/li&gt;
&lt;li&gt;結構圖&lt;/li&gt;
&lt;li&gt;Petri net&lt;/li&gt;
&lt;li&gt;狀態遷移圖表&lt;/li&gt;
&lt;li&gt;流程圖&lt;/li&gt;
&lt;li&gt;決策表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;學習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自我學習&lt;ul&gt;
&lt;li&gt;讀書, 關注 blog, tweets, 參加 conference, 訪問用戶群, 參與讀書會 and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;協作&lt;/li&gt;
&lt;li&gt;輔導&lt;ul&gt;
&lt;li&gt;專業人士會「視輔導新人為己任」，他們不會放任未經輔導的新手胡打亂撞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;了解業務領域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果撰寫財務系統，你就該對財務領域有所了解&lt;ul&gt;
&lt;li&gt;你未必要成為該領域的專家，但你仍需要勤勉，付出相當的努力來認識業務領域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最不專業的做法是，只簡單地按照規格說明來撰寫程式碼，但卻對於那些業務為什麼需要做那樣的規格定義不求甚解。相反的，你應該對該領域有所瞭解，能辨別、執行規格說明書的錯誤&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_10"&gt;第二章：説「不」&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Do or do not ! There is no try!&lt;br&gt;
—— Yoda&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;專業人士敢於說明真相而不屈從於權勢。專業人士有勇氣對他們的經理說「不」。&lt;ul&gt;
&lt;li&gt;難道不該照你老闆說的去做嗎？&lt;ul&gt;
&lt;li&gt;不該。只要你是一名專業人士，那就不該&lt;/li&gt;
&lt;li&gt;奴隸沒有權利說「不」。勞工或許也對說「不」有所顧慮。但是專業人士應該懂得說「不」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你的經理要求你在明天之前完成登入頁面，這就是他在追求和捍衛的一個目標，那是他的工作職責。如果你明知第二天之前不可能完成登入頁面，嘴上卻說「好的，我會試試看」，那麼便是你失職了。這時候，唯一盡責的方式便是說「不，這不可能」&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可能得最好結果&lt;/strong&gt;是你和你的經理共同追求的目標。&lt;strong&gt;最關鍵的是要找到那個「共同目標」，而這往往有賴於「協商」。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「為什麼」重要嗎？&lt;ul&gt;
&lt;li&gt;如果你的主管恰好有「技術背景」和「好脾氣」去傾聽理解，這些解釋也許有用&lt;/li&gt;
&lt;li&gt;另一種狀況是，主管會不認同這樣的結論或做法不對，可能會說出不用做完整的測試和程式碼審核&lt;ul&gt;
&lt;li&gt;有時候，提供太多細節，只會變成一個口令一個動作的管理方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_11"&gt;第三章：説「是」&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作出承諾包含三步驟&lt;ol&gt;
&lt;li&gt;口頭上說自己將會去做&lt;/li&gt;
&lt;li&gt;心裡認真對待自己所做出的能諾&lt;/li&gt;
&lt;li&gt;真的付諸行動去做&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;識別「缺乏承諾」的徵兆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;need / should&lt;ul&gt;
&lt;li&gt;我們需要把這工作做完&lt;/li&gt;
&lt;li&gt;我需要減肥&lt;/li&gt;
&lt;li&gt;有人應當負責去推動這件事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hope / wish&lt;ul&gt;
&lt;li&gt;希望明天我能完成這個任務&lt;/li&gt;
&lt;li&gt;希望改天我們能見宴嗎&lt;/li&gt;
&lt;li&gt;但願我有時間做這件事&lt;/li&gt;
&lt;li&gt;但願電腦更快點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Let's (而不是「讓我」)&lt;ul&gt;
&lt;li&gt;讓我們回頭見&lt;/li&gt;
&lt;li&gt;讓我們把這工作做完&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_13"&gt;真正的承諾聽起來是怎樣的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;我將在...之前...&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;e.g., 我將在星期二之前完成這個任務&lt;/li&gt;
&lt;li&gt;你對自己會做某件事做了清晰的事實陳述，而且還明確說明了完成期限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之所以沒成功，是因為我寄望於某某人去做這件事&lt;ul&gt;
&lt;li&gt;你只能承諾自己能&lt;strong&gt;完全掌控&lt;/strong&gt;的事&lt;/li&gt;
&lt;li&gt;如果最終目標依賴於他人，那麼你就應該採取些具體行動以接近最終目標&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之所以沒成功，是因為有些時候我真的無能為力&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果你無法兌現承諾，那麼最重要的就是「儘早向你承諾對象發聲預警，越快越好，越早越好」。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果你不儘早告訴他人可能的問題，就錯失了讓他們幫你兌現能諾的機會。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_14"&gt;第四章：寫程式&lt;/h2&gt;
&lt;h3 id="_15"&gt;做好準備&lt;/h3&gt;
&lt;p&gt;寫程式是件累人的事，你必須做到&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;讓程式碼能正常工作。理解當前要解決的問題和如何解決，並且確保程式碼忠實的依循解決方案&lt;/li&gt;
&lt;li&gt;幫客戶解決問題&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;很多時候，客戶提出的需求其實並不能真正解決他們自己的問題。這有賴於你去發現這些問題並與客戶交流，以確保能滿足客戶的真實需求&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程式碼必須和現有系統整合，並妥善管理好各種相依關係，不能讓系統僵化&lt;ul&gt;
&lt;li&gt;寫程式時必須遵循穩工程原則&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他的程式設計師必須能讀懂你的程式碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這包括寫好註解、精心淬煉程式碼，這可能是程式設計師最難精通的一項。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;感到疲勞或心煩意亂，&lt;strong&gt;千萬別寫程式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;奉獻精神和職業素養更主要的意義在於「遵守紀律原則」而非成為「長時間的工作狂」&lt;/li&gt;
&lt;li&gt;要確保自己已經幾睡眠、健康和生活方式調整到最佳狀態，這樣才能做到每天的8小時工作時間內&lt;strong&gt;全力以赴&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_16"&gt;創意輸入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;「創意輸出」依賴於「創意出入」 → 廣泛閱讀&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_17"&gt;保持節奏、知道何時應該離開一會&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;軟體開發是一場馬拉松，不是短跑衝刺&lt;/li&gt;
&lt;li&gt;沒解決這個問題不能回家&lt;ul&gt;
&lt;li&gt;噢不，你可以回家，而且是應該回家！&lt;/li&gt;
&lt;li&gt;創意和智力來自於大腦的高速運轉，當你感到疲勞時，它們就不翼而飛了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_18"&gt;進度延遲&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;即使是最優秀的程式設計師、最敬業的員工，也不能避免碰到延遲&lt;ul&gt;
&lt;li&gt;管理延遲的要訣就是&lt;strong&gt;早期檢測和保持透明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根據目標定期衡量進度，使用三個考慮到各種因素的期限，&lt;strong&gt;不要把預估和期望混淆在一起&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;樂觀預估, 常態預估, 悲觀預估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要經受不住誘惑盲目衝刺&lt;ul&gt;
&lt;li&gt;你無法更快的寫完程式碼。試圖這麼做，最終只會讓自己變得更慢，同時也只能製造出一堆混亂，讓其他人也慢下來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_19"&gt;交付失敗&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程式設計師所能表現的不專業中，最糟糕的就是，明知道還沒有完成任務卻宣稱已經完成&lt;/li&gt;
&lt;li&gt;明確定義「完成」&lt;ul&gt;
&lt;li&gt;最好的方法是讓業務分析師和測試人員建立一套自動化的驗收測試，只有完全通過這些驗收測試，開發任務才能算已經完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_20"&gt;幫助&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作為專業人士，你要以能隨時幫助別人為榮&lt;ul&gt;
&lt;li&gt;你的工作不可能重要到你不能花一丁點時間來幫助別人&lt;/li&gt;
&lt;li&gt;這並不是說你不需要獨處的時間 → 直接、禮貌的讓人知道某個時間區段不希望受到干擾，其餘的時段敞開大門樂於幫助他人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要學會如何請求幫助&lt;/li&gt;
&lt;li&gt;輔導&lt;ul&gt;
&lt;li&gt;花時間親自輔導手底下的年輕程式設計師，是資深程式設計師的「專業職責所在」&lt;/li&gt;
&lt;li&gt;同樣的道理，向資深導師尋求輔導，也是年輕程式設計師的「專業職責」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_21"&gt;第五章：測試驅動開發&lt;/h2&gt;
&lt;h3 id="tdd"&gt;TDD 的三大法則&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在撰寫一個單元測試（測試失敗的單元測試）前，不可撰寫任何產品程式&lt;/li&gt;
&lt;li&gt;只撰寫剛好無法通過的單元測試，不能編譯也算無法通過&lt;/li&gt;
&lt;li&gt;只撰寫剛好能通過當前測試失敗的產品程式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="tdd_1"&gt;TDD 的優勢&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;確定性&lt;/li&gt;
&lt;li&gt;缺陷注入率&lt;/li&gt;
&lt;li&gt;勇氣&lt;ul&gt;
&lt;li&gt;擁有一套值得信賴的測試，便可完全打消對修改程式碼的全部恐懼。當看見糟糕的程式碼時，就可以放手整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件&lt;ul&gt;
&lt;li&gt;單元測試就是文件。他們描述了系統的最底層設計細節&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設計&lt;ul&gt;
&lt;li&gt;基於測試先行的需要，會迫使你去思考什麼才是&lt;strong&gt;好的設計&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;與採用測試先行方式編寫的測試程式碼比起來，後寫的測試在深度和捕捉錯誤的靈敏度方面要遜色很多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_22"&gt;第六章：練習&lt;/h2&gt;
&lt;h3 id="_23"&gt;自身經驗的拓展&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;老闆通常只會限定一種語言、一種平台，以及程式設計師工作目標的專業領域。這樣會導致經驗不夠豐富的程式設計師，其領域和思維都被侷限&lt;ul&gt;
&lt;li&gt;程式設計師發現，面對這個行業的週期性變化造成的新局面，自己並沒有做好準備&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保持不落伍的一種方法是為 open source project 貢獻程式碼&lt;ul&gt;
&lt;li&gt;嘗試對自己不習慣的語言、平台、領域做出貢獻&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_24"&gt;第七章：驗收測試&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定義驗收測試&lt;ul&gt;
&lt;li&gt;「業務方與開發方合作編寫的測試」，其目的在於確認需求已經完成了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「完成」意味著&lt;ol&gt;
&lt;li&gt;所有程式碼都寫完了&lt;/li&gt;
&lt;li&gt;所有的測試都通過了&lt;/li&gt;
&lt;li&gt;QA 和需求方已經認可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_25"&gt;測試的協商與被動推進&lt;/h3&gt;
&lt;p&gt;身為專業開發人員，「與撰寫測試的人協商並改進測試」是你的職責。絕不能被動接受測試，更不能對自己說：「噢，測試就是這麼要求的，我又得這麼做。」&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;層級&lt;/th&gt;
&lt;th&gt;對象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;單元測試&lt;/td&gt;
&lt;td&gt;系統內部&lt;/td&gt;
&lt;td&gt;呼叫特定類別方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;驗收測試&lt;/td&gt;
&lt;td&gt;系統外部&lt;/td&gt;
&lt;td&gt;通常在 API 或 UI 層級進行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_26"&gt;結論&lt;/h3&gt;
&lt;p&gt;細節交流是件麻煩事。尤其開發方和業務方交流關於程式的細節時，更是如此。&lt;strong&gt;通常，各方握手言歡，以為其他人都明白自己的意思。雙方以為取得了共識，然後帶著截然不同的想法離開，這種事屢見不顯。&lt;/strong&gt;&lt;br&gt;
要解決開發方和業務方的溝通問題，我 (Uncle Bob) 所知道的唯一有效辦法是「編寫自動化的驗收測試」。&lt;/p&gt;
&lt;h2 id="_27"&gt;第八章：測試策略&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;職位&lt;/th&gt;
&lt;th&gt;測試面向&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;業務人員&lt;/td&gt;
&lt;td&gt;正常路徑測試 (happy-pathtest)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QA&lt;/td&gt;
&lt;td&gt;包含極端狀況 (corner)、邊界條件 (boundary)的異常路徑測試(unhappy-path)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_28"&gt;自動化測試金字塔&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;測試&lt;/th&gt;
&lt;th&gt;覆蓋率&lt;/th&gt;
&lt;th&gt;測試介面&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;人工探索式測試&lt;/td&gt;
&lt;td&gt;~5%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;系統測試&lt;/td&gt;
&lt;td&gt;~10%&lt;/td&gt;
&lt;td&gt;gui&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;整合測試&lt;/td&gt;
&lt;td&gt;~20%&lt;/td&gt;
&lt;td&gt;api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;元件測試&lt;/td&gt;
&lt;td&gt;~50%&lt;/td&gt;
&lt;td&gt;api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;單元測試&lt;/td&gt;
&lt;td&gt;~100%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;單元測試&lt;ul&gt;
&lt;li&gt;目的： 在最低層次上定義系統&lt;ul&gt;
&lt;li&gt;先寫測試，在寫程式碼&lt;/li&gt;
&lt;li&gt;這些應該作為 CI 的一部分執行，以確保程式設計師的程式碼意圖沒有遭到破壞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;元件測試&lt;ul&gt;
&lt;li&gt;需要使用合適的 mocking 或 test-doubling，解開「系統和其他元件」的耦合&lt;/li&gt;
&lt;li&gt;由 QA 和業務人員編寫，開發人員提供輔助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整合測試&lt;ul&gt;
&lt;li&gt;目的： 確認系統架構層面結構正確&lt;/li&gt;
&lt;li&gt;只對元件很多的較大型系統才具有意義&lt;/li&gt;
&lt;li&gt;由系統架構師或 lead designers 來編寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系統測試&lt;ul&gt;
&lt;li&gt;針對「整個整合完畢的系統」來執行的自動化測試&lt;/li&gt;
&lt;li&gt;不會直接測試業務規則，而是測試系統是否以正確組裝完畢&lt;/li&gt;
&lt;li&gt;應包含產能測試和性能測試&lt;/li&gt;
&lt;li&gt;由系統架構師和 technical leads 來編寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人工探索式測試&lt;ul&gt;
&lt;li&gt;目的： 驗證預期行為時，探索系統預期以外的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_29"&gt;第九章：時間管理&lt;/h2&gt;
&lt;h3 id="_30"&gt;會議&lt;/h3&gt;
&lt;p&gt;關於會議，有兩條真理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;會議是必須的&lt;/li&gt;
&lt;li&gt;會議浪費了大量的時間&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;離席&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;仔細管理自己的時間是你的責任。如果你發現參加某個會議是在浪費時間，就應當想個禮貌的辦法出來&lt;ul&gt;
&lt;li&gt;顯然，你不該大喊「這會議真讓人厭煩」，沒有必要採取粗魯的辦法。可以選個適當時機來問問大家，你的出席是否必要。你可以解釋說，自己抽不出更多的時間用於這場會議，問問有沒有辦法加快討論，或者另選時間&lt;/li&gt;
&lt;li&gt;繼續參加對你沒有太多意義的會議，是不專業的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_31"&gt;爭論 / 反對&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果觀點無法在短時間（5 ~ 30 分鐘）內達成一致，就永遠無法達成一致&lt;ul&gt;
&lt;li&gt;唯一的解決方法是「去取得資料，讓資料來說話」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「既然其他人想要這樣做，就這麼做吧」這可能是非專業的行為中最糟糕的了，千萬千萬不要這麼做&lt;ul&gt;
&lt;li&gt;如果你同意了，就&lt;strong&gt;必須&lt;/strong&gt;拿出行動來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="manna"&gt;專注力 Manna&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;專注力是稀有的資源&lt;ul&gt;
&lt;li&gt;如果你用光了自己的專注力 Manna，必須花一個小時或更多時間做不需要專注力的事情來補充它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專業開發人員會安排好他們的睡眠，保證清晨有飽滿的專注力 Manna 去上班&lt;/li&gt;
&lt;li&gt;肌肉專注力有助於改善新制專注力，而不僅僅是簡單恢復&lt;ul&gt;
&lt;li&gt;定期訓練肌肉專注力，可以提升心智專注力的上限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_32"&gt;要避免的行為&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;優先順序錯亂&lt;ul&gt;
&lt;li&gt;無論什麼原因，我們都可以找到辦法逃避真正的工作。提高某項任務的優先順序，之後就有藉口延後真正急迫的任務&lt;/li&gt;
&lt;li&gt;專業開發人員會評估每項任務的優先順序，排除個人的喜好和需求，按照真實的緊急程度來執行任務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_33"&gt;死胡同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;專業開發人員不會執著於不容放棄也無法繞開的 idea。他們會保持開放的頭腦來聽取其他建議，所以即便走到盡頭，他們仍然有選擇&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="10"&gt;第10章：預估&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;承諾 v.s. 預估&lt;ul&gt;
&lt;li&gt;承諾是必須做到的&lt;/li&gt;
&lt;li&gt;預估是一種「猜測」，不帶任何承諾的色彩。之所以要預估，是因為不知道要花多少時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pert-program-evaluation-and-review-technique"&gt;PERT (Program Evaluation and Review Technique)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三元分析法&lt;ul&gt;
&lt;li&gt;O: Optimistic Estimate&lt;ul&gt;
&lt;li&gt;一切都很順利的完成時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N: Nominal Estimate&lt;ul&gt;
&lt;li&gt;一般來說的完成時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P: Pessimistic Estimate&lt;ul&gt;
&lt;li&gt;遇到各種意外地完成時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$ \mu = \frac{O+4N+P}{6} $&lt;ul&gt;
&lt;li&gt;任務期望完成的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$ \sigma = \frac{P-O}{6} $&lt;ul&gt;
&lt;li&gt;任務完成機率分布的標準差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_34"&gt;大數法則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把大任務分成許多小任務，分開預估再加總，結果會比單獨評估大任務要精確得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="11"&gt;第11章：壓力&lt;/h2&gt;
&lt;h3 id="_35"&gt;避免壓力&lt;/h3&gt;
&lt;h4&gt;承諾&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;避免對「沒有把握達成最後期限的工作」做出「承諾」&lt;ul&gt;
&lt;li&gt;業務方總是期望能夠拿到這些承諾，因為他們想消除風險。我們要做的就是日風險量會，必將他們陳述給業務方，這樣他們就能做好相對的準備。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有時，有人會代我們做出承諾&lt;ul&gt;
&lt;li&gt;出於責任感，我們必須主動協助找到方法來兌現這些承諾，但是一定&lt;strong&gt;不能接受&lt;/strong&gt;這些承諾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;危機中的紀律&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果在危機中你改變了行為，就說明你並不是真的相信常規行為中的紀律&lt;ul&gt;
&lt;li&gt;如果在平時你會注意程式碼整潔，但在危機時刻，你卻會產出髒亂的程式碼，就說明你並不真正相信混亂會導致速度下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_36"&gt;應對壓力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要驚慌失措&lt;/li&gt;
&lt;li&gt;溝通&lt;ul&gt;
&lt;li&gt;讓你的團隊或主管知道你身陷困境。告訴他們你為走出困境置地的最佳計畫。請求他們的支援與指引。避免製造意料之外的詫異&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依靠你的紀律原則&lt;ul&gt;
&lt;li&gt;依靠那些你已經知道確實有效的東西 - 你平時遵守的紀律&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尋求幫助&lt;ul&gt;
&lt;li&gt;Pair Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="12"&gt;第12章：協作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;專業程式設計師的主要職責是滿足雇主的需求&lt;ul&gt;
&lt;li&gt;這意味著要含你的經理們、業務分析師們、測試工程師們和其他團隊成員有良好的協作，並且&lt;strong&gt;深刻理解&lt;/strong&gt;業務項目&lt;/li&gt;
&lt;li&gt;你需要理解&lt;strong&gt;「手上正在撰寫的程式碼，其業務價值是什麼」&lt;/strong&gt;，了解雇用你的企業將如何從你的工作中獲得回報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「需要長時間努力思考一個問題」、「任務極為簡單、和另一個人一起工作變成一種浪費」時單獨工作是正確的&lt;ul&gt;
&lt;li&gt;但一般來說和其他人緊密協作、大部分時間採取 Pair Programming 是最好的作法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程式設計意味著「與人協作」&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;我們需要和業務人員一起工作，我們之間也需要互相合作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13"&gt;第13章：團隊與專案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;形成有凝聚力的團隊是需要時間的&lt;ul&gt;
&lt;li&gt;可能需要6個月，甚至是1年&lt;/li&gt;
&lt;li&gt;團隊成員首先要建立關係。他們需要學習如何互相協作，需要瞭解彼此的癖好、強項、弱項，最終才能&lt;strong&gt;凝聚成&lt;/strong&gt;團隊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有凝聚力的團隊通常有12名成員，多可以有20人，最少可以只有3人&lt;ul&gt;
&lt;li&gt;e.g., 12名&lt;ul&gt;
&lt;li&gt;7名程式設計師&lt;/li&gt;
&lt;li&gt;2名測試人員： 編寫「自動化測試」確認程式正確性&lt;/li&gt;
&lt;li&gt;2名分析師： 開發「需求」，為需求編寫「自動化測試」確認業務價值正確&lt;/li&gt;
&lt;li&gt;1名專案經理： 跟蹤團隊的「進度」，確保成員理解「專案時間表」和「優先順序」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;團隊比專案更難建置&lt;ul&gt;
&lt;li&gt;組織穩健的團隊，讓團隊在一個又一個專案中整體移動、共同工作是較好的做法&lt;/li&gt;
&lt;li&gt;團隊有了凝聚力，但卻因為專案結束了便將這樣的團隊解散，是極為荒謬可笑的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="14"&gt;第14章：輔導、學徒期與工藝典範&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;學校能夠傳授的是電腦程式設計的理論&lt;ul&gt;
&lt;li&gt;但學校並不會、也無法傳授作為一名程式設計工匠所需要掌握的原則、實踐和技能&lt;ul&gt;
&lt;li&gt;這些東西只有經由師徒個體間多年的細心監督和輔導才能獲得&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="appendix-a"&gt;Appendix A: 工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Source code control&lt;ul&gt;
&lt;li&gt;e.g., git&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE / Editor&lt;ul&gt;
&lt;li&gt;e.g., vi, emacs, IntelliJ, TextMate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問題追蹤&lt;ul&gt;
&lt;li&gt;e.g., Pivotal Tracker, Lighthouse, wiki, Board (To-Do/ Doing/ Done)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CI&lt;ul&gt;
&lt;li&gt;e.g., Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;單元測試工具&lt;ol&gt;
&lt;li&gt;快速便捷的執行測試&lt;/li&gt;
&lt;li&gt;在通過或失敗要有清楚的視覺提示&lt;/li&gt;
&lt;li&gt;對於測試進度也要有清楚的視覺提示&lt;/li&gt;
&lt;li&gt;避免 test cases 之間的彼此通訊&lt;/li&gt;
&lt;li&gt;讓編寫測試變得容易&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;元件測試工具&lt;ul&gt;
&lt;li&gt;理想的情況是「業務分析師和QA」能夠使用這些工具來&lt;strong&gt;編寫&lt;/strong&gt;規約&lt;/li&gt;
&lt;li&gt;e.g, FitNesse, RobotFX, Cucumber&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整合測試工具&lt;ul&gt;
&lt;li&gt;e.g., Selenium, Watir&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML / MDA&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Note"></category><category term="Software Engineering"></category></entry><entry><title>MOPCON 2018</title><link href="https://blog.wei-lee.me/posts/tech/2018/11/mopcon-2018" rel="alternate"></link><published>2018-11-06T17:50:00+08:00</published><updated>2018-11-06T17:50:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2018-11-06:/posts/tech/2018/11/mopcon-2018</id><summary type="html">&lt;p&gt;今年其實是因為拿到去年講者用不到的邀請票才來參加的 xD&lt;br&gt;
總結來說，我覺得這趟來還算是蠻有收穫的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年其實是因為拿到去年講者用不到的邀請票才來參加的 xD&lt;br&gt;
總結來說，我覺得這趟來還算是蠻有收穫的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;幾年前有去過一次 MOPCON&lt;br&gt;
也許是去慣了台北的研討會都在中研院豪華的場地，就覺得 MOPCON 的場地很普通&lt;br&gt;
（其實連國際級的會議 EDBT 的場地都沒中研院好呢&lt;br&gt;
那年的議程也沒給我多大的收穫，之後就沒再來過了&lt;/p&gt;
&lt;p&gt;兩天的會議下來，原本自己有做了一些筆記&lt;br&gt;
但後來覺得自己保留一份筆記實在沒什麼意義...&lt;br&gt;
共筆上面的內容還比我多，就把我自己的部分也都更新上共筆了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/c/mopcon-2018/%2FQeQiI7PvSeG5EdDQyb9NmQ"&gt;共筆連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="day-1"&gt;Day 1&lt;/h2&gt;
&lt;p&gt;第一天比較有趣的是&lt;code&gt;從菜鳥警察到資料戰警&lt;/code&gt;, &lt;code&gt;用 Drone 改善團隊自動化測試及部署流程&lt;/code&gt;&lt;br&gt;
原本讓我有考慮來 MOPCON 就是想來聽聽 Drone 的使用&lt;br&gt;
不過果然還是要自己玩玩看才會知道怎麼用啊 xD&lt;br&gt;
感覺聽這樣的 talk 大概就是讓我決定要不要花時間來試新工具&lt;/p&gt;
&lt;p&gt;聽說還蠻多場都只是在介紹自家的產品的&lt;br&gt;
還好我很巧妙的避開了（？？？&lt;/p&gt;
&lt;h2 id="day-2"&gt;Day 2&lt;/h2&gt;
&lt;p&gt;第二天我就幾乎都在 Unconference 了&lt;br&gt;
一般議程只聽了開頭 jserv 的&lt;code&gt;智慧電網背後的軟體建設&lt;/code&gt; 跟結尾的&lt;code&gt;Flutter 踩雷心得&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其實會都待在 Unconference 也是一場意外 xD&lt;br&gt;
原本想說還有五分鐘才正式議程，所以就先過去晃晃&lt;br&gt;
但 &lt;code&gt;創業的辛酸與奧義&lt;/code&gt; 實在太精彩了，就一直聽下去了&lt;br&gt;
這場可是讓 Unconfernce 的場地全部坐滿，外面還圍了一整圈的人呢&lt;/p&gt;
&lt;p&gt;接下來的 &lt;code&gt;工程師與設計師都該知道的事&lt;/code&gt; 也很精彩&lt;br&gt;
還好我有跑去 Dcard 的攤位跟講者要 &lt;a href="https://www.facebook.com/dcardlab/photos/ms.c.eJxFVNuRRTEI6mhH47v~;xnaO3JBfBhHRRG3mRGRa2Kj2ny6Qmtl1XPQCYx9gx8nor0QyCcwyhhodciTyMfIs0EPAV~_PID4jSj1FNwFbUq8kQMK6xcAGjrug58BH0sbOYvRJFSRKYHd9uSX0u65getl3rVUOgtkRu29LaErnW0zDLeQAibEZouQx9TqFhLEn4iOej17rRh2NRxeEKiRkTwxoq37SFEnZxZKrUQGLOxNKRaV2nEQeJ0Vg7uhQB~_Dg8B49d9rMeBg22HSSW3P7UAsHEEgEFrdf6EC4q5~_vSwxuLaWgY20J0KDqzZ8mQs7AoJwPLFi47HYARaAHD2QVt57ZNnJQ~;p4FpeTAlCuvP6UCDJeLQICPXqTOgksYV8omprQbPodS2Cw~_mFIklS1oxC60H8kgOl~;DBTFPxouR9BniVL7HYW8~;3KgNOY~;4BsW3r1Q~-~-.bps.a.1399255386872479/1399255663539118/?type=3&amp;amp;theater"&gt;slide&lt;/a&gt;&lt;br&gt;
裡面的內容都還蠻有用的，但實在有點來不及作筆記&lt;br&gt;
而且 Unconference 真的沒什麼人會去更新共筆&lt;br&gt;
這場的整份筆記只有我在更新 QQ&lt;br&gt;
最大的 takeaway 是 UI堆疊的太念&lt;br&gt;
好像是來自 &lt;a href="http://scotthurff.com/posts/why-your-user-interface-is-awkward-youre-ignoring-the-ui-stack"&gt;How to fix a bad user interface&lt;/a&gt; 這篇文章&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flutter 踩雷心得&lt;/code&gt; 也是出乎意料有趣的議程&lt;br&gt;
&lt;a href="https://flutter.io"&gt;Flutter&lt;/a&gt; 是一套可以拿來用在 iOS 和 Android 的框架&lt;br&gt;
整場聽下來學到了不少 mobile 開發的知識&lt;br&gt;
還有如何叫老闆買新電腦（誤&lt;/p&gt;
&lt;h3 id="lighting-talk"&gt;Lighting Talk&lt;/h3&gt;
&lt;p&gt;話說今年好像彩蛋題太難解，好多場 Lighting Talk 都在講要怎麼打 MOPCON 的官方 APP xDDD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="MOPCON"></category></entry><entry><title>Blog 風格修正</title><link href="https://blog.wei-lee.me/posts/tech/2018/10/fix-blog-style" rel="alternate"></link><published>2018-10-14T21:00:00+08:00</published><updated>2018-10-14T21:00:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2018-10-14:/posts/tech/2018/10/fix-blog-style</id><summary type="html">&lt;p&gt;一直以來都有發現 Blog 的風格有點小問題&lt;br&gt;
但都懶得去好好地找出問題&lt;br&gt;
這次終於下定決定修好它&lt;/p&gt;
</summary><content type="html">&lt;p&gt;一直以來都有發現 Blog 的風格有點小問題&lt;br&gt;
但都懶得去好好地找出問題&lt;br&gt;
這次終於下定決定修好它&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;起源其實是我的上一篇文被嘴了 QAQ&lt;/p&gt;
&lt;p&gt;&lt;img alt="your style is bad" src="/images/posts-image/2018-10-14-fix-blog-style/15385701963828.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem 1" src="/images/posts-image/2018-10-14-fix-blog-style/15385699268490.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem 2" src="/images/posts-image/2018-10-14-fix-blog-style/15385700601798.jpg"&gt;&lt;/p&gt;
&lt;p&gt;整理下來大概有三個問題&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大小標的 margin&lt;/li&gt;
&lt;li&gt;英文前後也空一格&lt;/li&gt;
&lt;li&gt;第二行縮了四分之一字元&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1-margin"&gt;1. 大小標的 margin&lt;/h2&gt;
&lt;p&gt;這應該是三個問題中最簡單的&lt;br&gt;
但我有點懶得動 CSS ，所以就先不修了 xD&lt;/p&gt;
&lt;h2 id="2"&gt;2. 英文前後也空一格&lt;/h2&gt;
&lt;p&gt;剛好最近看到了&lt;a href="https://github.com/sparanoid/chinese-copywriting-guidelines#中文文案排版指北"&gt;中文文案排版指北&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;才發現原來&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。與大家共勉之。」&lt;br&gt;
——vinta/paranoid-auto-spacing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;總之，這也不是特別難處理的問題&lt;br&gt;
只要透過 &lt;a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk"&gt;add-space-between-latin-and-cjk&lt;/a&gt; 再加上 &lt;code&gt;os.walk()&lt;/code&gt; 就能解決了&lt;br&gt;
不過還是會遇到一些不該加空格的地方，也被加空格了&lt;br&gt;
但也只要用 &lt;code&gt;git diff&lt;/code&gt; 再確認一下哪裡有被 script 修改過就可以了&lt;/p&gt;
&lt;h2 id="3"&gt;3. 第二行縮了四分之一字元&lt;/h2&gt;
&lt;p&gt;這個問題就比較頭痛了&lt;br&gt;
因為我在模板找到這段的內容是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{{ article.content }}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是説這個多的空白是 &lt;a href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt; (我用的 static blog generator) 所產生的&lt;br&gt;
我沒有辦法透過單純的修改 HTML, CSS 來修正這個問題&lt;br&gt;
必須要找到 pelican 是從哪產生出這個空白的&lt;br&gt;
於是就開始我的 trace pelican 的之旅&lt;/p&gt;
&lt;p&gt;接下來，就是一連串的 trace 過程&lt;br&gt;
不想看可以透過&lt;a href="#transport"&gt;傳送門&lt;/a&gt;直接跳到解法&lt;/p&gt;
&lt;h3 id="pelicanreaderspy-first-try"&gt;pelican/readers.py (first try)&lt;/h3&gt;
&lt;p&gt;要找到 Markdown 是在哪被 parse 並產生內容的並不困難&lt;br&gt;
(&lt;code&gt;pelican/readers.py&lt;/code&gt; 的 &lt;a href="https://github.com/getpelican/pelican/blob/ee24ad1821774db2bfb199100eced17270a961d3/pelican/readers.py#L334"&gt;334行&lt;/a&gt;)&lt;br&gt;
透過一些測試，發現這段的行為是因為有了多的 &lt;code&gt;\n&lt;/code&gt; 造成了多的空白&lt;br&gt;
第一個猜想是某些情況下的 &lt;code&gt;\n&lt;/code&gt; 沒有成功的被移除掉&lt;br&gt;
所以只要加一行 &lt;code&gt;content.replace('\n', '')&lt;/code&gt; 確保全部的 &lt;code&gt;\n&lt;/code&gt; 都被移除，應該就可以了&lt;/p&gt;
&lt;p&gt;一開始問題也真的解決了&lt;br&gt;
直到我用到 markdown中的 ``` 語法才又出現問題&lt;br&gt;
在整個 code block 中的 code 全部都黏在一起沒有斷行&lt;br&gt;
看來這個做法是行不通...&lt;/p&gt;
&lt;p&gt;只好認命的從我平常產生文章的指令一步一步追回去&lt;br&gt;
trace 的過程還有踩到一個雷是「pip 裝的 pelican 並不是 master 上的版本」&lt;br&gt;
所以我還必須要切到 &lt;a href="https://github.com/getpelican/pelican/tree/3.7.1"&gt;3.7.1版&lt;/a&gt; 才能開始解決我遇到的問題&lt;/p&gt;
&lt;h4&gt;setup.py&lt;/h4&gt;
&lt;p&gt;平常我都是透過 &lt;code&gt;pelican -r -o output -s pelicanconf.py&lt;/code&gt;這個指令來產生文章&lt;br&gt;
所以第一步就是要從 &lt;a href="https://github.com/getpelican/pelican/blob/master/setup.py#L15"&gt;setup.py&lt;/a&gt; 找出 pelican 這個指令是哪裡來的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pelican = pelican:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;pelican/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h4&gt;
&lt;p&gt;既然在 &lt;a href="https://github.com/getpelican/pelican/tree/3.7.1/pelican"&gt;pelican&lt;/a&gt; 這個 package 中沒有 &lt;code&gt;main.py&lt;/code&gt;&lt;br&gt;
那 Python 還能找到 &lt;code&gt;main&lt;/code&gt; 就只剩下 &lt;code&gt;__init__.py&lt;/code&gt;&lt;br&gt;
扣除掉一些 parse 指令參數的程式碼&lt;br&gt;
接下來最像是產生文章的程式碼就是&lt;a href="https://github.com/getpelican/pelican/blob/master/pelican/__init__.py#L147"&gt;147行&lt;/a&gt; 的 &lt;code&gt;run&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;generate_context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下一步就是要從 &lt;code&gt;generators&lt;/code&gt; 找出 &lt;code&gt;generate_context&lt;/code&gt; 這個函式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican.generators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticlesGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PagesGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;SourceFileGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StaticGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;TemplatePagesGenerator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;pelican/generators.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;generators&lt;/code&gt;中看起來最有關的就是 &lt;code&gt;ArticlesGenerator&lt;/code&gt;&lt;br&gt;
這個 class 也找到了 &lt;code&gt;generate_context&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;article_or_draft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;base_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;preread_signal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_preread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;preread_sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context_signal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context_sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡找到的是文章被產生的地方&lt;br&gt;
只要能在找到文章中的內容是在哪產生，應該就能解決我的問題&lt;br&gt;
所以下一步就是要再去找到 &lt;code&gt;Readers&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;pelican/reader.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Readers&lt;/code&gt; 在這個檔案的&lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L486"&gt;486行&lt;/a&gt;&lt;br&gt;
接著 trace 這個 class 到&lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L526"&gt;526行&lt;/a&gt;就真的是文章內容第一次被產生的地方&lt;br&gt;
到目前為止，文章的內容還是沒有多餘的空白&lt;br&gt;
所以順利的話只要從這繼續 trace 下去就能找出問題&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cached_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後發現問題是出在 &lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L555"&gt;555行&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typogrify_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要不對 &lt;code&gt;content&lt;/code&gt; 做 &lt;code&gt;typogrify_wrapper&lt;/code&gt;就不會產生多餘的空白&lt;/p&gt;
&lt;p&gt;&lt;a id='transport'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;typogrify&lt;/h4&gt;
&lt;p&gt;typogrify 是 &lt;code&gt;pelicanconf.py&lt;/code&gt; (pelican 的設定檔) 中的一個設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TYPOGRIFY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要關掉 typogrify 就不會再產生出多餘的空白&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mintchaos/typogrify"&gt;typogrify&lt;/a&gt; 看來是某種加強 HTML 的工具&lt;br&gt;
我試過要把 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 跟 &lt;code&gt;&amp;amp;nbsp&lt;/code&gt; 加入 &lt;code&gt;TYPOGRIFY_IGNORE_TAGS&lt;/code&gt;&lt;br&gt;
不過看來還是沒辦法解決&lt;br&gt;
最後只好把 typogrify 整個關掉了&lt;/p&gt;
&lt;h2 id="_1"&gt;後記&lt;/h2&gt;
&lt;p&gt;其實這也只是個無傷大雅的小問題&lt;br&gt;
但真的是花了我不少時間才找到真正的問題所在&lt;/p&gt;
&lt;p&gt;前幾次都能透過 trace 原始碼，找到 library 的一些小問題&lt;br&gt;
也丟了幾個 Pull Request&lt;br&gt;
不過看來這次沒能再多貢獻什麼&lt;br&gt;
雖然好像有找到可能從 typogrify 解決掉這個 issue的方式&lt;br&gt;
但要再把它加入 pelican 變成一種 config 還是有些麻煩 xD&lt;/p&gt;</content><category term="Tech"></category><category term="Develop"></category></entry><entry><title>從 Andromoney 到 MOZE</title><link href="https://blog.wei-lee.me/posts/tech/2018/09/from-andromoney-to-moze" rel="alternate"></link><published>2018-09-09T16:00:00+08:00</published><updated>2018-09-09T16:00:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2018-09-09:/posts/tech/2018/09/from-andromoney-to-moze</id><summary type="html">&lt;p&gt;最近不小心被 &lt;a href="https://www.mozeapp.com"&gt;MOZE&lt;/a&gt; 的介面燒到&lt;br&gt;
一個衝動就從 &lt;a href="https://web.andromoney.com"&gt;AndroMoney&lt;/a&gt; 轉到 MOZE&lt;br&gt;
這篇算是來記錄從 AndroMoney 把資料轉換到 MOZE 的過程&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近不小心被 &lt;a href="https://www.mozeapp.com"&gt;MOZE&lt;/a&gt; 的介面燒到&lt;br&gt;
一個衝動就從 &lt;a href="https://web.andromoney.com"&gt;AndroMoney&lt;/a&gt; 轉到 MOZE&lt;br&gt;
這篇算是來記錄從 AndroMoney 把資料轉換到 MOZE 的過程&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;一些無關本文的前言&lt;/h2&gt;
&lt;p&gt;雖然 X-Village 暫時告一個段落，好像應該來寫個什麼&lt;br&gt;
但真的要寫起來還要再花一點時間&lt;/p&gt;
&lt;p&gt;上次 Blog 發文都已經是一年前的事了&lt;br&gt;
但點閱率竟然有一點在上升（雖然還是很低 QAQ）&lt;br&gt;
還有一些人看了我在 Logdown 的 LineBot 文跑來找我討論&lt;br&gt;
覺得蠻開心的 xD&lt;br&gt;
但這邊還是一直都沒辦法被找到 QQ&lt;br&gt;
以後考慮同步發到 Medium 好了&lt;/p&gt;
&lt;p&gt;不過好像該進入本文了 xD&lt;/p&gt;
&lt;h2 id="moze"&gt;為什麼換到 MOZE&lt;/h2&gt;
&lt;p&gt;當初在 Android 上使用 AndroMoney 就只是因為他免費，而且還算是好用&lt;br&gt;
剛好換到 iOS 的時候，這款 app 也在 App Store 有上架&lt;br&gt;
懶得轉換資料的情況下就繼續買了&lt;br&gt;
用下來覺得 AndroMoney 好像還是在 Android 上比較好用&lt;br&gt;
AndroMoney 的各種功能都很方便，只是介面上就比較普通 xD&lt;br&gt;
而且 AndroMoney 各個平台都有，就算哪天想換 Android 的手機也不怕轉換問題&lt;br&gt;
但是啊， MOZE 的介面就是好看 xD&lt;/p&gt;
&lt;p&gt;再來就要說說其他我喜歡 MOZE 的原因&lt;/p&gt;
&lt;h3 id="andromoney"&gt;AndroMoney 沒有 (或我不會用) 的功能&lt;/h3&gt;
&lt;h4&gt;借款事件&lt;/h4&gt;
&lt;p&gt;&lt;img alt="3-borrow.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/3-borrow.png"&gt;&lt;/p&gt;
&lt;p&gt;MOZE 會幫我記住我借錢給誰，而且會一直提醒我誰跟我借了錢&lt;br&gt;
以前都還要特地記錄到其他 app&lt;/p&gt;
&lt;p&gt;&lt;img alt="4-borrow.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/4-borrow.png"&gt;&lt;br&gt;
而且借出的錢，不會算在我的支出，所以也不會影響到我的預算&lt;br&gt;
算是蠻方便的功能&lt;/p&gt;
&lt;h4&gt;繳費事件&lt;/h4&gt;
&lt;p&gt;提醒我信用卡要繳費的時間&lt;br&gt;
也會有跟借款事件差不多的提醒&lt;/p&gt;
&lt;h4&gt;動態改變每天剩餘的預算&lt;/h4&gt;
&lt;p&gt;這是一個我還蠻需要的功能&lt;br&gt;
我會想知道前幾天花的錢如何影響我這個月剩下的日子的預算&lt;br&gt;
而不是一個從月初的預算直接除以 30 都不改變的數字&lt;/p&gt;
&lt;h4&gt;帳戶 icon&lt;/h4&gt;
&lt;p&gt;每個帳戶都能加入自己的 icon&lt;br&gt;
只要是付費版的 MOZE 就會有各家銀行的 icon&lt;br&gt;
&lt;img alt="5-icon.jpeg" src="/images/posts-image/2018-09-09-andromoney-to-moze/5-icon.jpeg"&gt;&lt;br&gt;
雖然他說是付費圖示，但其實這幾個是免費的&lt;br&gt;
只有其他類別的彩色圖是要購買&lt;br&gt;
但我是覺得原本的我比較喜歡 xD&lt;br&gt;
另外，也可以自己製作想要的 icon 匯入 ~&lt;/p&gt;
&lt;h4&gt;電子發票載具&lt;/h4&gt;
&lt;p&gt;以前都沒有什麼要用電子載具的誘因&lt;br&gt;
就完全忘了這回事&lt;br&gt;
現在這個可以直接幫我記帳就很吸引我&lt;br&gt;
而且他也有支援 wideget ，給店家掃過後，馬上就能用 Apple Pay&lt;/p&gt;
&lt;p&gt;另外，我原本以為從雲端載下消費紀錄，一定會要再創一個紀錄&lt;br&gt;
但其實這是可以連結到某一筆過去的紀錄&lt;br&gt;
這對我也是蠻重要的功能&lt;/p&gt;
&lt;p&gt;只是目前好像還不能針對轉帳或借款事件歸帳&lt;br&gt;
希望這些能透過 MOZE 3.0 會有的分帳功能解決&lt;/p&gt;
&lt;h4&gt;拆帳 (MOZE 3.0 才有)&lt;/h4&gt;
&lt;p&gt;雖然目前還沒有，但這個功能我現在很期待&lt;br&gt;
所以還是想列一下 xD&lt;/p&gt;
&lt;h3 id="moze_1"&gt;MOZE 沒有 (或我不會用) 的功能&lt;/h3&gt;
&lt;h4&gt;專案不能跨幣別&lt;/h4&gt;
&lt;p&gt;我之前去歐洲的那些紀錄就因為這樣，必須用標籤來分類 QQ&lt;br&gt;
不過聽說 MOZE 3.0 會新增就是&lt;/p&gt;
&lt;h4&gt;不能將單一紀錄不計算在花費中&lt;/h4&gt;
&lt;p&gt;主要是有些特別的花費我不會想要扣在我的預算中&lt;br&gt;
這樣那個月剩下的天數的預算就都會是 0，好像也不太對 ...&lt;/p&gt;
&lt;h4&gt;【AndroMoney 功能教學目錄】&lt;/h4&gt;
&lt;p&gt;這個我真的覺得超棒的&lt;br&gt;
他把目前能用他現有功能做到的事，全部整理起來&lt;br&gt;
現在 MOZE 還是比較需要去爬舊文翻，或直接問粉專&lt;br&gt;
但不得不說 MOZE 回復速度真的超快&lt;/p&gt;
&lt;h2 id="andromoney-to-moze-transformater"&gt;AndroMoney to MOZE transformater&lt;/h2&gt;
&lt;p&gt;身為一個攻城獅，當然還是要寫自動化的程式來幫我轉換資料格式&lt;br&gt;
手動要處理 5、6000 筆帳務紀錄有點太累了&lt;br&gt;
btw MOZE 有說之後會提供 web 版的匯入工具&lt;/p&gt;
&lt;p&gt;在 MOZE 首頁 FAQ 可以找到要如何匯入資料 (&lt;a href="https://docs.google.com/spreadsheets/d/1OeVuhID8l_vhmjHbDKReAXcLkIi0NvDUDIAwD9I8AYQ/edit?usp=sharing"&gt;MOZE 格式&lt;/a&gt;)&lt;br&gt;
基本上就是照著他的格式就能轉換大部分的資料&lt;/p&gt;
&lt;p&gt;當然我也寫了一個小 script&lt;br&gt;
&lt;strong&gt;&lt;a href="https://github.com/Lee-W/AndroMoney_to_MOZE_transformater"&gt;AndroMoney_to_MOZE_transformater&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="script"&gt;Script 使用方式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;transformater.py&lt;span class="w"&gt; &lt;/span&gt;--input_file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your input filename&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;extract
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在轉換的過程中，會有一些資料還是要手動輸入的&lt;br&gt;
其實後來大多時間是花在這 ...&lt;/p&gt;
&lt;p&gt;會抓出的資料有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帳戶（以及其起始金額）&lt;/li&gt;
&lt;li&gt;專案&lt;/li&gt;
&lt;li&gt;主類別、次類別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後來發現還有另一個問題是不同幣別的轉帳， AndroMoney 匯出的資料不會有轉入的金額&lt;br&gt;
所以沒辦法自動化，這點倒是比較麻煩&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;transformater.py&lt;span class="w"&gt; &lt;/span&gt;transformat&lt;span class="w"&gt; &lt;/span&gt;--input_file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your input filename&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--output_file&lt;span class="w"&gt; &lt;/span&gt;MOZE.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來就是要把原本 AndroMoney 的紀錄轉成 MOZE 的格式&lt;br&gt;
只要把這個 &lt;code&gt;MOZE.csv&lt;/code&gt; (一定要是這個檔名) 丟到 Dropbox 的 &lt;code&gt;應用程式/MOZE&lt;/code&gt;&lt;br&gt;
MOZE 就能找到，並能選擇匯入&lt;/p&gt;
&lt;h3 id="_2"&gt;踩到的一些坑&lt;/h3&gt;
&lt;p&gt;寫這個 script 的過程中，其實踩到蠻多坑的&lt;br&gt;
匯入了好幾次才成功&lt;/p&gt;
&lt;p&gt;一來這是我第一次從&lt;a href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt; 換到&lt;a href="http://click.pocoo.org"&gt;click&lt;/a&gt;&lt;br&gt;
原本想說 argparse 已經算是蠻好用的了&lt;br&gt;
click 真的又更直覺了一點，難怪這麼多人推薦&lt;/p&gt;
&lt;p&gt;第一個遇到的問題就是轉帳的「相關行數」&lt;br&gt;
一開始不知道這個行數是從多少開始&lt;br&gt;
以寫程式來說，我就直接去抓那個 row 的 index&lt;br&gt;
所以抓到的 index 是 0-based&lt;br&gt;
後來想到可以試試看 1-based，還是無法匯入成功&lt;br&gt;
最後才發現還要把標頭也考慮進去&lt;br&gt;
第一個 row 其實 index 是 2&lt;/p&gt;
&lt;p&gt;第二個問題是轉帳的類別&lt;br&gt;
文件其實只說不用「子類別」，沒說「主類別」要怎麼處理 xD&lt;br&gt;
我試了各種可能的類別後&lt;br&gt;
自己去匯出了一筆轉帳紀錄，才解決&lt;br&gt;
原來轉帳的主類別分別會是「轉入」跟「轉出」&lt;br&gt;
&lt;img alt="1-doc.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/1-doc.png"&gt;&lt;/p&gt;
&lt;p&gt;後來弄完後有再去看一下文件，才發現下面其實有寫 ......&lt;br&gt;
&lt;img alt="2-doc.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/2-doc.png"&gt;&lt;/p&gt;
&lt;p&gt;這些問題我都跟作者反應了，他都超快就回了&lt;br&gt;
他是說之後會透過 web 版的工具匯入&lt;/p&gt;
&lt;h2 id="future-improvement"&gt;Future Improvement&lt;/h2&gt;
&lt;p&gt;其實我還是蠻喜歡 AndroMoney 的&lt;br&gt;
所以也許會找個時間寫怎麼把 MOZE 轉回 AndroMoney 的功能會寫個 MOZE to AndroMoney&lt;br&gt;
避免我哪天又想回到 Android 了 xD&lt;/p&gt;</content><category term="Tech"></category><category term="Develop"></category><category term="Utility"></category></entry><entry><title>GitHub Resume</title><link href="https://blog.wei-lee.me/posts/tech/2017/08/GitHub-Resume" rel="alternate"></link><published>2017-08-01T23:00:00+08:00</published><updated>2017-08-01T23:00:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-08-01:/posts/tech/2017/08/GitHub-Resume</id><summary type="html">&lt;p&gt;最近發現了這個可以自動從自己的 Github 上產生履歷的東西&lt;br&gt;
&lt;a href="https://github.com/resume/resume.github.com"&gt;GitHub Résumé&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近發現了這個可以自動從自己的 Github 上產生履歷的東西&lt;br&gt;
&lt;a href="https://github.com/resume/resume.github.com"&gt;GitHub Résumé&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;實在有點有趣，就來玩了一下&lt;br&gt;
只要在 repo 上按了 star，你就可以透過&lt;a href="http://resume.github.io"&gt;他的頁面&lt;/a&gt; 產生你的 GitHub 履歷&lt;br&gt;
基本上就是各種以往的專案和貢獻的統整&lt;/p&gt;
&lt;p&gt;&lt;a href="http://resume.github.io/?Lee-W"&gt;我的 GitHub 履歷&lt;/a&gt;&lt;br&gt;
果然我光 Python 跟 Jupyter Notebook 加起來就六成了 XD&lt;/p&gt;</content><category term="Tech"></category><category term="GitHub"></category><category term="Resume"></category></entry><entry><title>Practical Vim</title><link href="https://blog.wei-lee.me/posts/tech/2017/06/Practical-Vim" rel="alternate"></link><published>2017-06-26T08:50:00+08:00</published><updated>2017-06-26T08:50:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-06-26:/posts/tech/2017/06/Practical-Vim</id><summary type="html">&lt;p&gt;每天一回一回的看，終於把&lt;a href="https://pragprog.com/book/dnvim/practical-vim"&gt;Practical Vim&lt;/a&gt;看完了&lt;br&gt;
不過到了後期，大部分就真的都看不太懂了＝ ＝&lt;br&gt;
所以大多還是只記錄了前期我比較看得懂的一些 tip&lt;/p&gt;
</summary><content type="html">&lt;p&gt;每天一回一回的看，終於把&lt;a href="https://pragprog.com/book/dnvim/practical-vim"&gt;Practical Vim&lt;/a&gt;看完了&lt;br&gt;
不過到了後期，大部分就真的都看不太懂了＝ ＝&lt;br&gt;
所以大多還是只記錄了前期我比較看得懂的一些 tip&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ch1-the-vim-way"&gt;Ch1: The Vim Way&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip2-dont-repeat-yourself"&gt;Tip2: Don't Repeat Yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repeatable-action-and-how-to-repeat-them"&gt;Repeatable action and how to repeat them&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch2-normal-mode"&gt;Ch2: Normal Mode&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip10-use-counts-to-do-simple-arithmetic"&gt;Tip10: Use Counts to Do Simple Arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combine-and-conquer"&gt;Combine and Conquer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch3-insert-mode"&gt;Ch3: Insert Mode&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip13-make-corrections-instantly-from-insert-mode"&gt;Tip13: Make Corrections Instantly from Insert Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip14-get-back-to-normal-mode"&gt;Tip14: Get Back to Normal Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip15-paste-from-a-register-without-leaving-insert-mode"&gt;Tip15: Paste from a Register Without Leaving Insert Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip19-overwrite-existing-text-with-replace-mode"&gt;Tip19: Overwrite Existing Text with Replace Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch5-command-line-mode"&gt;Ch5: Command-Line Mode&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip28-execute-a-command-on-one-or-more-consecutive-lines"&gt;Tip28: Execute a Command on One or More Consecutive Lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip31-repeat-the-last-ex-commands"&gt;Tip31: Repeat the Last Ex Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip32-tab-complete-your-ex-commands"&gt;Tip32: Tab-Complete Your Ex Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip33-insert-the-current-word-at-the-command-prompt"&gt;Tip33: Insert the Current Word at the Command Prompt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch8-navigate-inside-files-with-motions"&gt;Ch8: Navigate Inside Files with Motions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch9-navigate-between-files-with-jumps"&gt;Ch9: Navigate Between Files with Jumps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip55-travel-the-jump-list"&gt;Tip55: Travel the Jump List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch12-matching-patterns-and-literals"&gt;Ch12: Matching Patterns and Literals&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip74-use-the-v-literal-switch-for-verbatim-searches"&gt;Tip74: Use the \V Literal Switch for Verbatim Searches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch13-search"&gt;Ch13: Search&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip81-preview-the-first-match-before-execution"&gt;Tip81: Preview the First Match Before Execution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch14"&gt;Ch14&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip88-find-and-replace-every-match-in-a-file"&gt;Tip88: Find and Replace Every Match in a File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="ch1-the-vim-way"&gt;Ch1: The Vim Way&lt;/h2&gt;
&lt;h3 id="tip2-dont-repeat-yourself"&gt;Tip2: Don't Repeat Yourself&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; command: Repeat the last change&lt;ul&gt;
&lt;li&gt;Command in normal mode&lt;/li&gt;
&lt;li&gt;The insert mode between two normal mode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="repeatable-action-and-how-to-repeat-them"&gt;Repeatable action and how to repeat them&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Intent&lt;/th&gt;
&lt;th&gt;Act&lt;/th&gt;
&lt;th&gt;Repeat&lt;/th&gt;
&lt;th&gt;Reverse&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Make a change&lt;/td&gt;
&lt;td edit&gt;&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan line for next character&lt;/td&gt;
&lt;td char&gt;f&lt;/td&gt;
&lt;td&gt;;&lt;/td&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan line for previous character&lt;/td&gt;
&lt;td char&gt;F&lt;/td&gt;
&lt;td&gt;;&lt;/td&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan document for next match&lt;/td&gt;
&lt;td&gt;/pattern&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan document for previous match&lt;/td&gt;
&lt;td&gt;?pattern&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Perform substitution&lt;/td&gt;
&lt;td&gt;:s/target/replacement&lt;/td&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Execute a sequence of changes&lt;/td&gt;
&lt;td changes&gt;qx&lt;/td&gt;
&lt;td&gt;@x&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="ch2-normal-mode"&gt;Ch2: Normal Mode&lt;/h2&gt;
&lt;h3 id="tip10-use-counts-to-do-simple-arithmetic"&gt;Tip10: Use Counts to Do Simple Arithmetic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-a&amp;gt;&lt;/code&gt;: Add number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt;: Sub number&lt;/li&gt;
&lt;li&gt;What if the cursor is not on a number?&lt;ul&gt;
&lt;li&gt;Operate on the number after the cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="combine-and-conquer"&gt;Combine and Conquer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Operator + Motion = Action&lt;/li&gt;
&lt;li&gt;When an operator command is invoked in duplicate, it acts upon the current line (e.g. dd)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Trigger&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;Yank into register&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;g!&lt;/td&gt;
&lt;td&gt;Swap case&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gu&lt;/td&gt;
&lt;td&gt;Make lowercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gU&lt;/td&gt;
&lt;td&gt;Make uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Shift right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;Shift left&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;Autoindent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="ch3-insert-mode"&gt;Ch3: Insert Mode&lt;/h2&gt;
&lt;h3 id="tip13-make-corrections-instantly-from-insert-mode"&gt;Tip13: Make Corrections Instantly from Insert Mode&lt;/h3&gt;
&lt;p&gt;If we make a mistake while composing text in Insert mode, we can fix it immediately&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keystrokes&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete back one character(backspace)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete back one word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete back to start of line&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The keystrokes above can also be used in bash shell&lt;/p&gt;
&lt;h3 id="tip14-get-back-to-normal-mode"&gt;Tip14: Get Back to Normal Mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; Switch to Insert Normal mode&lt;/p&gt;
&lt;h3 id="tip15-paste-from-a-register-without-leaving-insert-mode"&gt;Tip15: Paste from a Register Without Leaving Insert Mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;0&lt;/code&gt;: Paste the text that we just yanked at the current cursor position&lt;/p&gt;
&lt;h3 id="tip19-overwrite-existing-text-with-replace-mode"&gt;Tip19: Overwrite Existing Text with Replace Mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;: Enter replace mode&lt;/p&gt;
&lt;h2 id="ch5-command-line-mode"&gt;Ch5: Command-Line Mode&lt;/h2&gt;
&lt;h3 id="tip28-execute-a-command-on-one-or-more-consecutive-lines"&gt;Tip28: Execute a Command on One or More Consecutive Lines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;range&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:{start, end}&lt;/code&gt;: from line "start" to line "end"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: current line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: all lines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tip31-repeat-the-last-ex-commands"&gt;Tip31: Repeat the Last Ex Commands&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@:&lt;/code&gt;: Repeat the last Ex command&lt;/p&gt;
&lt;h3 id="tip32-tab-complete-your-ex-commands"&gt;Tip32: Tab-Complete Your Ex Commands&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;: Reveal a list of possible completions&lt;/p&gt;
&lt;h3 id="tip33-insert-the-current-word-at-the-command-prompt"&gt;Tip33: Insert the Current Word at the Command Prompt&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;: Get the word under cursor in Ex mode&lt;/p&gt;
&lt;h2 id="ch8-navigate-inside-files-with-motions"&gt;Ch8: Navigate Inside Files with Motions&lt;/h2&gt;
&lt;p&gt;This chapter is extremely practical&lt;/p&gt;
&lt;h2 id="ch9-navigate-between-files-with-jumps"&gt;Ch9: Navigate Between Files with Jumps&lt;/h2&gt;
&lt;h3 id="tip55-travel-the-jump-list"&gt;Tip55: Travel the Jump List&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[count]G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to line number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//pattern&amp;lt;CR&amp;gt;/?pattern&amp;lt;CR&amp;gt;/n/N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to next/previous occurrence of pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to matching parenthesis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to start of previous/next sentence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to start of previous/next paragraph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;H&lt;/code&gt;/&lt;code&gt;M&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to top/middle/bottom of screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to file name under the cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to definition of keyword under the cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to a mark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="ch12-matching-patterns-and-literals"&gt;Ch12: Matching Patterns and Literals&lt;/h2&gt;
&lt;h3 id="tip74-use-the-v-literal-switch-for-verbatim-searches"&gt;Tip74: Use the \V Literal Switch for Verbatim Searches&lt;/h3&gt;
&lt;p&gt;Put &lt;code&gt;\V&lt;/code&gt; before words when searching can cancel regular expression&lt;/p&gt;
&lt;h2 id="ch13-search"&gt;Ch13: Search&lt;/h2&gt;
&lt;h3 id="tip81-preview-the-first-match-before-execution"&gt;Tip81: Preview the First Match Before Execution&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; to autocomplete when searching&lt;/p&gt;
&lt;h2 id="ch14"&gt;Ch14&lt;/h2&gt;
&lt;h3 id="tip88-find-and-replace-every-match-in-a-file"&gt;Tip88: Find and Replace Every Match in a File&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;%s/word1/word2/g&lt;/code&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Vim"></category><category term="Note"></category></entry><entry><title>Python@Instagram</title><link href="https://blog.wei-lee.me/posts/tech/2017/06/Python-at-IG" rel="alternate"></link><published>2017-06-22T22:10:00+08:00</published><updated>2017-06-22T22:10:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-06-22:/posts/tech/2017/06/Python-at-IG</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/keynote-lisa-guo-and-hui-ding-python-at-instagram"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終於好好花個時間看完今年 IG 在 PyCon US 的 Talk 了&lt;br&gt;
的確蠻值得大家花這個時間去看的&lt;/p&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/keynote-lisa-guo-and-hui-ding-python-at-instagram"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終於好好花個時間看完今年 IG 在 PyCon US 的 Talk 了&lt;br&gt;
的確蠻值得大家花這個時間去看的&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-python"&gt;Why Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#but-python-is-still-slow-right"&gt;But Python is still slow, right?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-efficiency-strategy"&gt;Python Efficiency Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#road-to-python3"&gt;Road to Python3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;如果要看懶人包&lt;br&gt;
Google 一下「PyCon」、「Instagram」有很多很清楚地整理&lt;br&gt;
我也整理了一點點我覺得特別有意思的&lt;/p&gt;
&lt;h2 id="why-python"&gt;Why Python?&lt;/h2&gt;
&lt;p&gt;(一開始主要是歷史因素，因為當初的創辦人就這麼用了 XD)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Proven Technology&lt;ul&gt;
&lt;li&gt;Users do not care what database Instagram runs on. They certainly don't care what language Instagram develop in.&lt;/li&gt;
&lt;li&gt;Focus on scoping and solve real problems rather than getting stuck on language detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="but-python-is-still-slow-right"&gt;But Python is still slow, right?&lt;/h2&gt;
&lt;p&gt;At instagram, our bottlenecck is development velocity, not pure code execution&lt;/p&gt;
&lt;p&gt;The conclusion is that you can get to a few hundred million users with Python before worrying about the performance of framework and language&lt;/p&gt;
&lt;h2 id="python-efficiency-strategy"&gt;Python Efficiency Strategy&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Build extensive tools to profile and understand performance bottleneck&lt;/li&gt;
&lt;li&gt;Moving stable, citical compenents to C/C++&lt;/li&gt;
&lt;li&gt;Cythonization&lt;/li&gt;
&lt;li&gt;Async? New Python runtime?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="road-to-python3"&gt;Road to Python3&lt;/h2&gt;
&lt;p&gt;這一段講到 Instragram 如何從 Python2 轉到 Python3 的過程&lt;br&gt;
我覺得很精彩，所以大家就自己去看吧 XD&lt;/p&gt;
&lt;p&gt;我只紀錄一個我覺得特別有趣的東西&lt;br&gt;
如同大家所知道的 Python2 跟 Python3 一個很大的不同點，就是對於 byte 跟 str 的處理&lt;br&gt;
這就會導致我們必須先確認他的型態是否符合預期&lt;br&gt;
如果不符合就要在做 encode 或 decode&lt;/p&gt;
&lt;p&gt;可能就會像下面這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;six&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mymac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hamc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instagram 處理這種問題的功能實作成 &lt;code&gt;ensure_binary&lt;/code&gt;, &lt;code&gt;ensure_str&lt;/code&gt;, &lt;code&gt;ensure_text&lt;/code&gt; 這類的 helper function&lt;/p&gt;
&lt;p&gt;這也是我之前在 trace &lt;a href="https://github.com/pytransitions/transitions"&gt;transitions&lt;/a&gt; 的 source code&lt;br&gt;
發現有一個&lt;a href="https://github.com/pytransitions/transitions/blob/2cb42916affe167a8d94cdfdf56ab08b41ccd05c/transitions/core.py#L25"&gt;listify&lt;/a&gt; 的 function&lt;br&gt;
雖然是蠻簡單的小技巧，不過還算蠻實用的&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Sprint</title><link href="https://blog.wei-lee.me/posts/tech/2017/06/PyCon-TW-2017-Sprint" rel="alternate"></link><published>2017-06-17T16:07:00+08:00</published><updated>2017-06-17T16:07:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-06-17:/posts/tech/2017/06/PyCon-TW-2017-Sprint</id><summary type="html">&lt;p&gt;這天的 Sprint 是由今年的 Keynote Speaker - Russell Keith-Magee 帶來他的開源專案&lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt;&lt;br&gt;
讓大家一起來貢獻&lt;br&gt;
這個專案還蠻有趣的&lt;br&gt;
主要就是要讓 Python 能在各平台上跑 (i.e. web, mobile)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這天的 Sprint 是由今年的 Keynote Speaker - Russell Keith-Magee 帶來他的開源專案&lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt;&lt;br&gt;
讓大家一起來貢獻&lt;br&gt;
這個專案還蠻有趣的&lt;br&gt;
主要就是要讓 Python 能在各平台上跑 (i.e. web, mobile)&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;而且這個專案對新手還蠻友善的，文件中就有提供&lt;a href="https://pybee.org/contributing/how/first-time/what/"&gt;First Time Contributor&lt;/a&gt;&lt;br&gt;
第一次貢獻的人建議貢獻的專案是&lt;a href="https://github.com/pybee/voc"&gt;voc&lt;/a&gt;(Android) 和&lt;a href="https://github.com/pybee/batavia"&gt;batavia&lt;/a&gt;(JavaScript)&lt;br&gt;
而且在裡面的 issue 還會標注 first timer only&lt;br&gt;
&lt;img alt="first-timer-only" src="/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/1-new-comer.png"&gt;&lt;/p&gt;
&lt;p&gt;雖然我其實對 Java 跟 JavaScript 都不熟&lt;br&gt;
但比起來還是對 JavaScript 多了一點愛&lt;br&gt;
所以我就來貢獻 batavia 了&lt;/p&gt;
&lt;p&gt;雖然其實我的貢獻大多就是文件上少寫跟一些錯誤&lt;br&gt;
最後還有幫 Python 的 list 轉成 js 加了幾個小 method&lt;br&gt;
原本想解決 args 跟 kwargs 的 issue，但果然還是對 JS 太不熟了ＱＱ&lt;br&gt;
不過覺得整體來說是蠻好玩的&lt;/p&gt;
&lt;p&gt;Russell 都會很友善地回答問題&lt;br&gt;
像我一開始採的雷就是 batavia 還沒支援到 Python3.6，他也很熱心幫我解決&lt;br&gt;
我問了好幾個專案的小問題，Russell 都會說 "That's can be a pull request"&lt;br&gt;
只要送了 PR 就可以得到&lt;a href="https://pybee.org/contributing/challenge-coins/"&gt;Challenge Coins&lt;/a&gt;&lt;br&gt;
拿到這個 challenge coin 其實還蠻開心的 xd&lt;/p&gt;
&lt;p&gt;&lt;img alt="Challenge Coin" src="/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/2-challenge-coin.jpg" style="width:30%"&gt;&lt;/p&gt;
&lt;p&gt;最後再附上在 twitter 上，這次參與 spinrt 的大合照&lt;br&gt;
&lt;img alt="all" src="/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/3-all.jpg" style="width:50%"&gt;&lt;/p&gt;
&lt;p&gt;2017/6/22&lt;br&gt;
折騰了許久，我的&lt;a href="https://github.com/pybee/batavia/pull/569"&gt;PR&lt;/a&gt; 終於被 merge 回 batavia 了 XD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這次的 PyCon 2017 大致就到這裡結束了&lt;br&gt;
這幾篇文章大概先整理了，當時做的筆記&lt;br&gt;
也許之後有時間，再好好看一次影片跟 Slide，重新整理一下所有的內容&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 3</title><link href="https://blog.wei-lee.me/posts/tech/2017/06/PyCon-TW-2017-Day3" rel="alternate"></link><published>2017-06-11T09:00:00+08:00</published><updated>2017-06-18T14:08:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-06-11:/posts/tech/2017/06/PyCon-TW-2017-Day3</id><summary type="html">&lt;p&gt;這天就是 PyCon 的最後一天了&lt;br&gt;
聽說這是 PyCon 第一次引入 Unconference&lt;br&gt;
今年 Unconf 都還蠻有趣的，讓我一直猶豫到底要一般議程還是 Unconference&lt;br&gt;
不過 Unconference 那邊聲音就有點糊聽不太清楚&lt;br&gt;
不知道是不是 R4 場地的關係&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這天就是 PyCon 的最後一天了&lt;br&gt;
聽說這是 PyCon 第一次引入 Unconference&lt;br&gt;
今年 Unconf 都還蠻有趣的，讓我一直猶豫到底要一般議程還是 Unconference&lt;br&gt;
不過 Unconference 那邊聲音就有點糊聽不太清楚&lt;br&gt;
不知道是不是 R4 場地的關係&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;h2 id="_1"&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] From Little Things, Big Things Grow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;比美麗的湯更美麗：pyquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Write Elegant Concurrent Code in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;enjoy type hinting and its benefits (我很想聽這場，不過還是先跑去聽 Unconference 了 XD)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/masahitojp/the-benefits-of-type-hintss"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHkqR2Dvkb"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding test-driven Python package with CI and cloud&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Unconference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Lightning Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-from-little-things-big-things-grow"&gt;[Keynote] From Little Things, Big things grow.&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Chinese Intro" src="/images/posts-image/2017-06-11-PyCon-TW-2017-Day3/1-Keynote-Chineses.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Russell 開場就講了一串中文，引來如雷的掌聲 xD&lt;br&gt;
他在 PyCon 官網的介紹也很有趣 xD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;他剩下兩洲就能完成 Python 會議基調演講全大洲制霸；
只要企鵝們願意舉辦 PyCon 南極洲，他很樂意提供演說。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同時，他也在這次 PyCon 的 Sprint 帶來專案跟大家分享&lt;/p&gt;
&lt;p&gt;不過 Russell 的英文語速就真的有點快，超過我能好好做筆記的語速了 QQ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FryvqnPv1-"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="technical-issues-are-often-social"&gt;Technical issues are often social&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Backward Compatibility matters&lt;ul&gt;
&lt;li&gt;But it also has a price&lt;ul&gt;
&lt;li&gt;Hard to introduce new features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timing matters&lt;/li&gt;
&lt;li&gt;Messaging matters&lt;/li&gt;
&lt;li&gt;Reading the tea leaves (Trend?)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://headrush.typepad.com/creating_passionate_users/2005/10/getting_users_p.html"&gt;The Kick Ass Curve&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tool-and-ecosystem"&gt;Tool and ecosystem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Community matters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="accessibility"&gt;Accessibility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Toxic shock&lt;/li&gt;
&lt;li&gt;Denial is not a river in Egypt&lt;ul&gt;
&lt;li&gt;Complaining matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Codes of Conduct in practice&lt;/li&gt;
&lt;li&gt;Outreach is important&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="patches-welcome"&gt;Patches welcome&lt;/h3&gt;
&lt;h3 id="develop-a-funding-culture"&gt;Develop a funding culture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make it easy to&lt;ul&gt;
&lt;li&gt;spend money and receive money&lt;/li&gt;
&lt;li&gt;do the right things&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don't assume resources are free&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;這好像是我第一次在 R0 舉手提問&lt;br&gt;
最後因為時間關係沒被叫到 QQ&lt;br&gt;
不過我還是跑到前面去問 Russell，如何在 Backward Compatibility 和 New Fatures 中取捨&lt;br&gt;
Russell 的回答是如果專案已經持續很長的一段時間，並且有一定的使用者&lt;br&gt;
Backward Compatibility 就是一件很重要的事&lt;br&gt;
因為我們並不會希望以前的使用者不能在使用&lt;br&gt;
不過如果是新開始的專案，那就從新的開始就好&lt;br&gt;
像他現在的&lt;a href="https://pybee.org"&gt;Bee Ware&lt;/a&gt; 就是全用 Python3&lt;/p&gt;
&lt;p&gt;下午 Russell 會給一場跟 Bee Ware 有關的 Talk - &lt;a href="https://hackmd.io/s/HkqR2Dvkb#1300-1345talk-stranger-in-a-strange-land"&gt;Stranger in Strange Land&lt;/a&gt;&lt;br&gt;
不過因為標了很高的難度，想說我應該也聽不懂，也先沒去聽了 xd&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='2'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pyquery"&gt;比美麗的湯更美麗：pyquery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aji.tw/slides/pycon2017/#/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pyquery_1"&gt;&lt;a href="https://github.com/gawel/pyquery"&gt;pyquery&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 jquery 的方式來做 parsing&lt;/li&gt;
&lt;li&gt;可以做 crawling ( 一個 lib 就做了 requests + bs4 的事啊！ )&lt;/li&gt;
&lt;li&gt;可以拿 selenium 當 opener&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;裝不起來的問題，通常是因為 lxml 沒裝好&lt;/p&gt;
&lt;p&gt;感覺是一個很值得期待的 library&lt;br&gt;
下次要寫爬蟲，再拿它來試試看&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="write-elegant-concurrent-code-in-python"&gt;Write Elegant Concurrent Code in Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/mosky/elegant-concurrency"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/HkqR2Dvkb#1115-1200-talk-write-elegant-concurrent-code-in-python"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/moskytw/elegant-concurrency-lab"&gt;Sample Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Concurreny: 一段時間內同時跑&lt;br&gt;
Parallel: 一個時間點同時跑&lt;/p&gt;
&lt;h3 id="why-concurrency"&gt;Why Concurrency?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get the machine into full play! 不要讓 CPU 空轉！&lt;/li&gt;
&lt;li&gt;通常不會用 Python 解 CPU Bound 的問題，而是 I/O Bound 的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽完這場，感嘆自己真的對 Concurrent 還是不太懂＠＠&lt;br&gt;
雖然我沒記什麼筆記&lt;br&gt;
不過 Slide 很清楚，共筆也記了很多&lt;br&gt;
還附上 Sample Code 了&lt;br&gt;
哪天比較懂 Concurrent 的時候再回來看應該會比較有感覺吧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='5'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="unconference"&gt;Unconference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FrkMXWDTyb"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="line-chatbot"&gt;大會遊戲 line chatbot 黑白亂做&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/adrianliaw/quizbot-2017"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bot"&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aweimeow/PyConTW2017-UnConf-Slide"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aweimeow/PyConTW2017-Quiz-Solver"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跟著上面那一個 Unconference 做的大會 chat bot&lt;br&gt;
就有會眾分享如何寫一個 bot 自動去達大會的題目 xdd&lt;br&gt;
覺得很有趣&lt;/p&gt;
&lt;h3 id="what-steve-jobs-taught-me-about-software-development-and-life-in-general"&gt;What Steve Jobs Taught Me about Software Development and Life in General&lt;/h3&gt;
&lt;p&gt;這就是 Carosell 待過 Apple 的 VP&lt;br&gt;
大致上覺得跟&lt;a href="https://blog.wei-lee.me/posts/book/2016/03/essentialism#essentialism"&gt;少，但是更好&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saying, "No!" enables focus, flow, success.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to decide when to say "yes"?&lt;ul&gt;
&lt;li&gt;The one that changes your life would be a good one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="lightning-talk"&gt;Lightning Talk&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHJu2JvTyW"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lightning Talk 大概是 PyCon 最歡樂的時候了&lt;br&gt;
因為只有 5 分鐘，不然就要被拔線了&lt;br&gt;
大家都得講得很快&lt;/p&gt;
&lt;p&gt;今年的 PyCon 金句大概就是 Hisahiro Ohmura 推坑 PyCon JP 的&lt;/p&gt;
&lt;p&gt;&lt;img alt="Buy First, Consider Second" src="/images/posts-image/2017-06-11-PyCon-TW-2017-Day3/2-buy-first.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;聽不懂日文？
沒關係
我也聽不太懂中文
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，就像 jserv 的 slide 上說的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;每年的 pycon 好像都有其他語言的東西混進來，像是 15 年有人根本是在講 d3.js
只是用 python 幫忙準備資料 ;
今年是有人全部都在講 Rust，只是我們用 Rust 寫了個 python module XDDD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lightning Talk 馬上就出現一個 julia 了 xddd&lt;br&gt;
記得兩年前的 PyCon 超多 Julia 的&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 2</title><link href="https://blog.wei-lee.me/posts/tech/2017/06/PyCon-TW-2017-Day2" rel="alternate"></link><published>2017-06-10T09:00:00+08:00</published><updated>2017-06-18T12:37:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-06-10:/posts/tech/2017/06/PyCon-TW-2017-Day2</id><summary type="html">&lt;p&gt;第二天有一整個時段的 Job Fair，可以出去晃晃到各個攤販聊天&lt;br&gt;
最有印象的大概就是 Carousel，跟他們聊得還蠻開心的&lt;br&gt;
還多玩了幾次他們的大家來找碴 XD&lt;br&gt;
在 conf 看到他們這麼多次，第一次知道他們來自新加坡&lt;br&gt;
隔天還會有一位待過 Apple 的 VP 會來 Unconf 分享&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第二天有一整個時段的 Job Fair，可以出去晃晃到各個攤販聊天&lt;br&gt;
最有印象的大概就是 Carousel，跟他們聊得還蠻開心的&lt;br&gt;
還多玩了幾次他們的大家來找碴 XD&lt;br&gt;
在 conf 看到他們這麼多次，第一次知道他們來自新加坡&lt;br&gt;
隔天還會有一位待過 Apple 的 VP 會來 Unconf 分享&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;今年還有音樂會呢，覺得還蠻有趣的&lt;br&gt;
雖然聽完有點晚才去吃晚餐，剩的東西都不多了ＱＱ&lt;/p&gt;
&lt;p&gt;&lt;img alt="Piano" src="/images/posts-image/2017-06-10-PyCon-TW-2017-Day2/1-piano.jpg" style="width:50%"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Symphony" src="/images/posts-image/2017-06-10-PyCon-TW-2017-Day2/2-symphony.jpg" style="width:50%"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="_1"&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] Building for Failure: Leraning Lessons from Aviation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[自py系列2] 投資策略驗證系統&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1i5PwAHxXZQ2fewn194_gRU3kMG5s-04s1Pil0yJREHQ/edit#slide=id.g1ce6af9da4_1_8"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FBkMVJwTy-"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;對話機器人的腦子與靈魂 Bot's Brain and Soul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;鄉民教我做的聊天機器人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why do projects fail?&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/ssuser2cbb78/pycon-tw-2017-why-do-projects-fail-lets-talk-about-the-story-of-sinonpy"&gt;Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-building-for-failure-learning-lessons-from-aviation"&gt;[Keynote] Building for Failure: Learning Lessons from Aviation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/andrewgodwin/building-for-failure-learning-lessons-from-aviation"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FBk3_mwakZ"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="warnings"&gt;Warnings&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Soft Failure&lt;/th&gt;
&lt;th&gt;Hard Failure&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Obscure errors and try to carry on&lt;/td&gt;
&lt;td&gt;Quit at the first error and log it&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Noisy Warnings&lt;ul&gt;
&lt;li&gt;Engineers ignore logs/notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precise Warnings&lt;ul&gt;
&lt;li&gt;Alert on actionable things, then fix them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raise clear, verbose exception&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://api.com/user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;RequestError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;APIFetchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Could not get user list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="testing"&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;100% Coverage Fallacy&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Too many tests that are fragile so you ignore them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="checklist"&gt;Checklist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The step between manual and automation&lt;/li&gt;
&lt;li&gt;Cheap and very effective&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="find-the-limits"&gt;Find the limits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The Load Testing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Netflix/chaosmonkey"&gt;Chaos Monkey&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;測試 server 復原能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Restore from backups&lt;/li&gt;
&lt;li&gt;The "Red Team"&lt;ul&gt;
&lt;li&gt;攻擊系統的工程師們&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="trade-off-between-redundancy-acceptable-loss"&gt;Trade off between Redundancy &amp;amp; Acceptable Loss&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Redundancy&lt;/th&gt;
&lt;th&gt;Acceptable Loss&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;What do you fall back to?&lt;/td&gt;
&lt;td&gt;Quantify the loss, and recovery&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="team"&gt;Team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No Single Cause → No Blame Culture&lt;ul&gt;
&lt;li&gt;Not someone's mistake&lt;/li&gt;
&lt;li&gt;Systematic Problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clear command chains&lt;ul&gt;
&lt;li&gt;Who makes decisions?&lt;/li&gt;
&lt;li&gt;Who does the fixing?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leadership can blind&lt;ul&gt;
&lt;li&gt;Debate for what is right&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crew Resource Management&lt;/li&gt;
&lt;li&gt;Increase your "bus factor"&lt;ul&gt;
&lt;li&gt;People get ill → 一個專案至少要 2 個以上的人懂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good engineering is not just code&lt;ul&gt;
&lt;li&gt;Communication matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slower can be faster&lt;ul&gt;
&lt;li&gt;Testing, Writing Documents make a project slower in short term, but faster in long term&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="speakers-advice"&gt;Speakers Advice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Checklists&lt;/li&gt;
&lt;li&gt;Restore your backups&lt;/li&gt;
&lt;li&gt;Work out roughly what happens for every part of a system failing, and if you care&lt;/li&gt;
&lt;li&gt;Reward people whose code quietly works, not those who firefight and take the glory&lt;/li&gt;
&lt;li&gt;Checklists&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="bots-brain-and-soul"&gt;對話機器人的腦子與靈魂 Bot's Brain and Soul&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Hyt_yvak-#1130-1215-talk-對話機器人的腦子與靈魂-bot’s-brain-and-soul"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場人太多了，連坐下來的位置都沒有ＱＱ&lt;br&gt;
不過共筆寫得很清楚了&lt;br&gt;
我這裡記錄的是會後跟講者討論的一些問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: Language Generation 要怎麼做 Evaluation，怎樣才算是符合文法？怎樣算是合理的回答？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判定很主觀&lt;/li&gt;
&lt;li&gt;很多研究會導入 Human Evaluation&lt;/li&gt;
&lt;li&gt;目前還是一個 Open Question&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: 目前關於情緒判斷，是否已經到了 Production 了？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尚未到 Production&lt;/li&gt;
&lt;li&gt;這樣的問題很難做，其中一個原因在於資料很難收集&lt;/li&gt;
&lt;li&gt;另一個原因是，就算沒有辦法判斷情緒，通常也不會造成太大的問題。不像意圖如果判斷錯誤，就會提供錯誤的服務&lt;/li&gt;
&lt;li&gt;香港科技大學目前有一個可以判斷人格的 Bot( 我找不太到＠＠ )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='4'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;鄉民教我做的聊天機器人&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/RyanChao3/pycon2017-chatbot"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Hyt_yvak-#1325-1355-talk-鄉民教我做的聊天機器人"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://line.me/R/ti/p/%40nlj2850e"&gt;Line Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chinese-conversation-data"&gt;Chinese Conversation Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Movie subtitle&lt;ul&gt;
&lt;li&gt;主題發散，不太容易收斂&lt;ul&gt;
&lt;li&gt;先過去出資料用語&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seq2seq&lt;ul&gt;
&lt;li&gt;只能回應簡單的問題&lt;/li&gt;
&lt;li&gt;大部分回答都是「我不知道」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PTT&lt;ul&gt;
&lt;li&gt;八卦版標題和推文有應對關係 → 問答&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="backend-platform"&gt;Backend &amp;amp; Platform&lt;/h3&gt;
&lt;p&gt;~48 萬篇文章&lt;/p&gt;
&lt;h3 id="information-retrieval"&gt;Information Retrieval&lt;/h3&gt;
&lt;p&gt;找出文章標題符合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jaccard Similarity&lt;ul&gt;
&lt;li&gt;不能處理介系詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modified BM25&lt;ul&gt;
&lt;li&gt;針對重要的字給予較大的權重&lt;/li&gt;
&lt;li&gt;TF 對短句比較不好用 → 用詞性作為權重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tried Improvements&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tokenizer Improvement&lt;ul&gt;
&lt;li&gt;Emoji icon pre-processing&lt;/li&gt;
&lt;li&gt;Improve tokenizer accuracy&lt;/li&gt;
&lt;li&gt;把 jieba 換成用繁體中文字典，並加入 PTT 會用的常見詞彙&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keyword Extraction &amp;amp; Association&lt;ul&gt;
&lt;li&gt;Word2Vec → Query associative term if the original one doesn't exist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="evaluate"&gt;Evaluate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Represent for document with vector&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doc2Vec (gensim)&lt;/li&gt;
&lt;li&gt;RNN-encoder (arXiv: 1506.08909v3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NDCG&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;量化標注&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讓那篇文章的回應當作 ground truth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;來評斷機器人產生的結果好不好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-ibm"&gt;利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.ng.bluemix.net/tommywu/pyconbot2017/blob/master/run.py"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;有溫度的聊天機器人&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;輔助性答案 ( 互動性 )&lt;ul&gt;
&lt;li&gt;引導性回饋 → 開放話題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不定時提醒 → 貼近使用者&lt;/li&gt;
&lt;li&gt;隨機答案 → 提高趣味&lt;/li&gt;
&lt;li&gt;學習與進化&lt;/li&gt;
&lt;li&gt;Multi-channel ( 多渠道互動 )&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="watson"&gt;Watson&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NP, ML 的語意理解&lt;/li&gt;
&lt;li&gt;Zero Downtime&lt;/li&gt;
&lt;li&gt;擴充&lt;/li&gt;
&lt;li&gt;可訓練&lt;/li&gt;
&lt;li&gt;搜尋引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="watson-ai-flow"&gt;Watson AI Flow&lt;/h3&gt;
&lt;p&gt;Intent, Parameter, Entity Type&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='7'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="chatbot-esun-bank-i"&gt;Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B8hlay_yY5e7QTE0U3JDUXloeXM/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;還有沒有其他的 &lt;del&gt;客訴&lt;/del&gt; 問題呢&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 1</title><link href="https://blog.wei-lee.me/posts/tech/2017/06/PyCon-TW-2017-Day1" rel="alternate"></link><published>2017-06-09T09:00:00+08:00</published><updated>2017-06-18T11:41:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-06-09:/posts/tech/2017/06/PyCon-TW-2017-Day1</id><summary type="html">&lt;p&gt;今年 PyCon 終於比起上次聽得懂多了！&lt;br&gt;
看來這兩年來，還是有點進步的 XD&lt;/p&gt;
&lt;p&gt;先放上今年的&lt;a href="https://hackfoldr.org/pycontw2017/"&gt;共筆&lt;/a&gt;&lt;br&gt;
這幾篇記錄我參加議程的筆記&lt;br&gt;
有些投影片跟共筆就很清楚的，就直接放連結了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年 PyCon 終於比起上次聽得懂多了！&lt;br&gt;
看來這兩年來，還是有點進步的 XD&lt;/p&gt;
&lt;p&gt;先放上今年的&lt;a href="https://hackfoldr.org/pycontw2017/"&gt;共筆&lt;/a&gt;&lt;br&gt;
這幾篇記錄我參加議程的筆記&lt;br&gt;
有些投影片跟共筆就很清楚的，就直接放連結了&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;h2 id="_1"&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] Choices for Smarter AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Python 開源軟體考古 - 以Viper為例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;[Keynote] The State of Python for &lt;del&gt;Education&lt;/del&gt; Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Building Microservices in Python 個案分享&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Sk5LNzQke#1455-1540-talk-building-microservices-in-python-個案分享"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Understanding Serverless Architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;同場加映：&lt;a href="https://drive.google.com/file/d/0Bz8Kfu_94VuJcVo1a1drQjhReU0/view"&gt;Don't Reinvent Sandwich&lt;/a&gt; (本議程沒供餐 XD)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Tensorflow &amp;amp; Python: Fault Detection System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-choices-for-smarter-ai"&gt;[Keynote] Choices for Smarter AI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHywa7M7Jx"&gt;共筆&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better AI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traditional: 更像人類&lt;/li&gt;
&lt;li&gt;New: 更好用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice0-what-language-for-ai"&gt;Choice[0]: What Language for AI?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現場會眾一致通過是 Python (Bias Sampling XD)&lt;/li&gt;
&lt;li&gt;Useful libs&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dmlc/xgboost"&gt;xgboost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ntucllab/libact"&gt;libact&lt;/a&gt;: Active Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice1-what-application-should-ai-help"&gt;Choice[1]: What Application Should AI Help?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AI Starts From Problem Solving&lt;ul&gt;
&lt;li&gt;Motivation&lt;ul&gt;
&lt;li&gt;Publishable (academia), Profitable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility&lt;ul&gt;
&lt;li&gt;Modeling, Timeline, Budge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big Problems from Big Data&lt;ul&gt;
&lt;li&gt;Velocity: Evolving data, Evolving problems&lt;/li&gt;
&lt;li&gt;Volume: Computational Bottleneck&lt;/li&gt;
&lt;li&gt;Veracity: Modeling with non-textbook data → Noise, Bias&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice2-what-route-for-ai"&gt;Choice[2]; What Route for AI&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Human-er&lt;/th&gt;
&lt;th&gt;Machine-er&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Subjective&lt;/td&gt;
&lt;td&gt;Objective&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Domain Knowledge&lt;/td&gt;
&lt;td&gt;Computing Power&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fast Basic Solution&lt;/td&gt;
&lt;td&gt;Continuous Improvement&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Tip: As much human as possible before going to machine&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="choice3-how-to-measure-ai-goal"&gt;Choice[3]: How to Measure AI Goal?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Tip: Start with reasonable, measurable and prioritized goals for AI&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="choice4-what-data-to-or-not-to-use"&gt;Choice[4]: What Data to (or not to) Use?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Choice factors for data&lt;ul&gt;
&lt;li&gt;Utility: Relationship with goal&lt;/li&gt;
&lt;li&gt;Necessity: Uniqueness to goal&lt;/li&gt;
&lt;li&gt;Quality: Noise, Freshness&lt;/li&gt;
&lt;li&gt;Cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tip: Start with "minimum viable data"&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="choice5-what-model-to-start"&gt;Choice[5]: What Model to Start?&lt;/h3&gt;
&lt;p&gt;Linear (Simpler) Model First&lt;/p&gt;
&lt;h3 id="choice6-what-improvement-steps-to-take"&gt;Choice[6]: What Improvement Steps to Take?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lose Reason&lt;ul&gt;
&lt;li&gt;Overfitting&lt;/li&gt;
&lt;li&gt;Misfitting&lt;/li&gt;
&lt;li&gt;Over-reusing&lt;ul&gt;
&lt;li&gt;Keep data fresh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice-1-how-to-verify-and-deploy"&gt;Choice[-1]: How to verify and Deploy?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code Deployment Workflow&lt;/th&gt;
&lt;th&gt;AI Deployment Workflow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Development → Staging → Production&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Offline → Online → Production&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Human Trust matters&lt;ul&gt;
&lt;li&gt;Need a baseline to be compared&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="misc0-no-choice-is-a-choice"&gt;Misc[0]: No Choice is a Choice&lt;/h3&gt;
&lt;h3 id="misc1-learning-from-mistake"&gt;Misc[1]: Learning from Mistake&lt;/h3&gt;
&lt;h3 id="misc2"&gt;Misc[2]: ???&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='2'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-viper"&gt;Python 開源軟體考古 - 以 &lt;a href="https://github.com/viper-framework/viper"&gt;Viper&lt;/a&gt; 為例&lt;/h2&gt;
&lt;p&gt;這場很實用，slide 也很清楚&lt;br&gt;
蠻推薦影片出來可以看一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1HwBrETgmEz6-igEVaPAtQPWyuBljyFyvXtKzHLSVaMk/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CYYw7ARgjFBsCsBaMAGYAWR6DMIBMiAnABx7aLzGH4QCmUwxAZiEA===?view#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/18z/viper-research"&gt;viper-research&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;從開源專案學習寫 code&lt;/p&gt;
&lt;h3 id="code"&gt;讀 code 技巧&lt;/h3&gt;
&lt;h4&gt;降低專案複雜度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;從早期版本追&lt;ul&gt;
&lt;li&gt;如何挑版本？ ( 搭配 tig 服用 )&lt;ul&gt;
&lt;li&gt;重大版本號&lt;/li&gt;
&lt;li&gt;簡單、可運作之版本 (e.g. viper 的 commit hash: &lt;a href="https://github.com/viper-framework/viper/tree/46a2a"&gt;46a2a&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;感覺太複雜？&lt;ul&gt;
&lt;li&gt;砍！&lt;/li&gt;
&lt;li&gt;鎖定特定功能，移除其他雜質&lt;/li&gt;
&lt;li&gt;測試，能動就可以&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;專案程式邏輯架構&lt;/h4&gt;
&lt;p&gt;模組相依性 → 一直 trace 到沒有 import 專案自己寫的 code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ronaldoussoren/modulegraph"&gt;modulegraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tarind.com/depgraph.html"&gt;pydegraph (py2degraph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://furius.ca/snakefood/"&gt;snackfood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;數據分析&lt;ul&gt;
&lt;li&gt;e.g. 被用最多的反而不是核心 → 這些程式碼好用、易用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;走訪專案&lt;ul&gt;
&lt;li&gt;建立專案整體架構邏輯&lt;/li&gt;
&lt;li&gt;深度走訪&lt;ul&gt;
&lt;li&gt;由下往上&lt;/li&gt;
&lt;li&gt;仔細閱讀單一程式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;廣度走訪&lt;ul&gt;
&lt;li&gt;由上往下&lt;/li&gt;
&lt;li&gt;解釋特定組合的程式的意義&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系統化讀 code&lt;/li&gt;
&lt;li&gt;從 Commit 學習&lt;ul&gt;
&lt;li&gt;架構變化&lt;/li&gt;
&lt;li&gt;Commit Message 規則&lt;/li&gt;
&lt;li&gt;Branching Model&lt;/li&gt;
&lt;li&gt;Issue Handling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="slack-docker-jupyter"&gt;整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/KevinShyu/slack-docker-jupyter"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kkshyu/pnp-interview"&gt;pnp-interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CYYw7ARgjFBsCsBaMAGYAWR6DMIBMiAnABx7aLzGH4QCmUwxAZiEA===?view#1145-1230-talk-整合-slack-與-docker-搭建-jupyter-線上程式面試系統"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場最重要的大概就是 slide &lt;del&gt;第 12 頁&lt;/del&gt; 第 11 頁的架構圖&lt;/p&gt;
&lt;h3 id="tools-used"&gt;Tools Used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Flask&lt;ul&gt;
&lt;li&gt;Python 中最簡單使用的 web framework&lt;/li&gt;
&lt;li&gt;做小型 web 應用非常適合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker&lt;ul&gt;
&lt;li&gt;容器化&lt;/li&gt;
&lt;li&gt;一鍵部署&lt;/li&gt;
&lt;li&gt;限制容器耗費的 CPU, GPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slack&lt;ul&gt;
&lt;li&gt;Integration 很好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bugs"&gt;Bugs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pull Image First&lt;ul&gt;
&lt;li&gt;So it can be fast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try except for any case&lt;ul&gt;
&lt;li&gt;dockerpy 的雷 xD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File Permission&lt;ul&gt;
&lt;li&gt;要採 docker 坑，這很重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='4'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-the-state-of-python-for-education-learning"&gt;[Keynote] The State of Python for &lt;del&gt;Education&lt;/del&gt; Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/willingc/the-state-of-python-for-education"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場 Talk 主要講學習、推廣和社群&lt;/p&gt;
&lt;p&gt;Carol 有提到幾個學習 Python 很棒的資源&lt;br&gt;
其中我覺得最有用的大概就是&lt;a href="http://pyvideo.org"&gt;pyvideo.org&lt;/a&gt; 了&lt;br&gt;
之前回去聽工資管系系友演講，趨勢的學長就有提到看 Talk 是很快的學習方式&lt;/p&gt;
&lt;p&gt;另外，Carol 強力推薦今年 PyCon US，Instagram 給的 Talk&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;br&gt;
之後，應該也會找個時間來看一下&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="understanding-serverless-architecture"&gt;Understanding Serverless Architecture&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/dawny33/understanding-serverless-architectures"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Sk5LNzQke#1610-1655-talk-understanding-serverless-architecture"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="serverless"&gt;Serverless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function as a service (FaaS)&lt;ul&gt;
&lt;li&gt;e.g. AWS lambda&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage&lt;ul&gt;
&lt;li&gt;Don't need to maintain servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantages&lt;ul&gt;
&lt;li&gt;Functions are allowed to run for only a limited amount of time&lt;/li&gt;
&lt;li&gt;Heavy workloads cannot be run&lt;/li&gt;
&lt;li&gt;No control over containers&lt;/li&gt;
&lt;li&gt;Hard to monitor&lt;/li&gt;
&lt;li&gt;Hard to scale up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It's awesome but not the best choice for everyone.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='7'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tensorflow-python-fault-detection-system"&gt;Tensorflow &amp;amp; Python: Fault Detection System&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/EricAhn/tensorflow-and-python-fault-detection-system-pycon-taiwan-2017"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/BJqH4M7kl#1720-1750-talk-tensorflow-amp-python-fault-detection-system"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fault: An abnormal condition or defect at the component&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logs&lt;ul&gt;
&lt;li&gt;Usage of CPU&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Disk I/O&lt;/li&gt;
&lt;li&gt;Network Bandwidth&lt;/li&gt;
&lt;li&gt;System Log&lt;/li&gt;
&lt;li&gt;Application Log&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Log is also natural language.&lt;br&gt;
The sequence of words and expression is important sequential data.&lt;/p&gt;
&lt;p&gt;這場我真的就有點聽不太懂了＠＠&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>Common Neovim Problems</title><link href="https://blog.wei-lee.me/posts/tech/2017/05/common-neovim-problems" rel="alternate"></link><published>2017-05-14T13:13:00+08:00</published><updated>2017-05-14T13:13:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-05-14:/posts/tech/2017/05/common-neovim-problems</id><summary type="html">&lt;!--more--&gt;

&lt;h2 id="load-vimrc-from-neovim"&gt;Load ~/.vimrc from neovim&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="p"&gt;:=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="p"&gt;/.config&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.vim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.vimrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim/init.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="no-python-interpreter-found"&gt;No python interpreter found.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;neovim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/3536"&gt;.nvimrc doesn't seem to be loaded up or working and it cannot create backups on editing existing files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/1755"&gt;No python interpreter …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;!--more--&gt;

&lt;h2 id="load-vimrc-from-neovim"&gt;Load ~/.vimrc from neovim&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="p"&gt;:=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="p"&gt;/.config&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.vim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.vimrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim/init.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="no-python-interpreter-found"&gt;No python interpreter found.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;neovim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/3536"&gt;.nvimrc doesn't seem to be loaded up or working and it cannot create backups on editing existing files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/1755"&gt;No python interpreter found.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Vim"></category><category term="Neovim"></category></entry><entry><title>[Paper] Deep Learning-Based Document Modeling for Personality Detection from Text</title><link href="https://blog.wei-lee.me/posts/tech/2017/04/Deep-Learning-Based-Document-Modeling-for-Personality-Detection-from-Text" rel="alternate"></link><published>2017-04-11T17:59:00+08:00</published><updated>2017-04-11T17:59:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-04-11:/posts/tech/2017/04/Deep-Learning-Based-Document-Modeling-for-Personality-Detection-from-Text</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sentic.net/deep-learning-based-personality-detection.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementation: &lt;a href="https://github.com/SenticNet/Personality-Detection"&gt;Personality-Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Set&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mypersonality.org/wiki/doku.php?id=wcpr13"&gt;James Pennebaker and Laura King's stream-of-consciousness essay dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm"&gt;NRC Word-Emotion Association Lexicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sentic.net/deep-learning-based-personality-detection.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementation: &lt;a href="https://github.com/SenticNet/Personality-Detection"&gt;Personality-Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Set&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mypersonality.org/wiki/doku.php?id=wcpr13"&gt;James Pennebaker and Laura King's stream-of-consciousness essay dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm"&gt;NRC Word-Emotion Association Lexicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#practical-application-of-personality-detection"&gt;Practical Application of Personality Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#personality-theory-used-in-this-paper"&gt;Personality Theory Used in This Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-idea-of-the-method"&gt;Basic Idea of the Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overview-of-the-method"&gt;Overview of the Method&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-preprocessing"&gt;1. Preprocessing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-document-level-feature-extraction"&gt;2. Document-level feature extraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-filtering"&gt;3. Filtering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-word-level-feature-extraction"&gt;4. Word-level feature extraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-classfication"&gt;5. Classfication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#network-architecture-in-detail"&gt;Network Architecture in Detail&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#main-steps-7-layers"&gt;Main Steps (7 Layers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#training"&gt;Training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="practical-application-of-personality-detection"&gt;Practical Application of Personality Detection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Product and Service Recommandation (People with similar personalities might have similar favors)&lt;/li&gt;
&lt;li&gt;Mental Health Diagnosis&lt;/li&gt;
&lt;li&gt;Forensics: Reduce the circle of suspects&lt;/li&gt;
&lt;li&gt;Human Resource: One's suitablitlty for certain jobs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="personality-theory-used-in-this-paper"&gt;Personality Theory Used in This Paper&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Big_Five_personality_traits"&gt;Big Five Personality Trait&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="basic-idea-of-the-method"&gt;Basic Idea of the Method&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Feed sentences from essays to convolution filter → Sentence model in the form of n-gram feature vectors&lt;/li&gt;
&lt;li&gt;Aggregate the vectors of a document's sentences and combine them with Masiresse features to represent the document&lt;/li&gt;
&lt;li&gt;Classification: Feed the document vectors into a fully connected neural network&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="overview-of-the-method"&gt;Overview of the Method&lt;/h2&gt;
&lt;h3 id="1-preprocessing"&gt;1. Preprocessing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sentence Splitting&lt;/li&gt;
&lt;li&gt;Data Cleaning&lt;/li&gt;
&lt;li&gt;Unification (e.g. lowercase)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-document-level-feature-extraction"&gt;2. Document-level feature extraction&lt;/h3&gt;
&lt;p&gt;Mairesse baseline feature set (e.g. word count, average sentence length)&lt;/p&gt;
&lt;h3 id="3-filtering"&gt;3. Filtering&lt;/h3&gt;
&lt;p&gt;Sentences without personliaty clues are dropped&lt;br&gt;
(Based on &lt;a href="http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm"&gt;NRC Word-Emotion Association Lexicon&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id="4-word-level-feature-extraction"&gt;4. Word-level feature extraction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;word2vec&lt;/li&gt;
&lt;li&gt;Variable number of fixed-length word feature vectors → Variable number of sentences → Document&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-classfication"&gt;5. Classfication&lt;/h3&gt;
&lt;p&gt;Deep CNN (Conolutional Nerual Network)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input&lt;ul&gt;
&lt;li&gt;Words: Fixed-length feature vector using word2vec&lt;/li&gt;
&lt;li&gt;Sentences: Variable number of word vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process&lt;ul&gt;
&lt;li&gt;Word Vector is reduced to a fixed length vector of each sentence&lt;/li&gt;
&lt;li&gt;Document: Variable number of such fixed-length sentence vector&lt;/li&gt;
&lt;li&gt;Document vector is then reduced to a fixed-length document vector&lt;/li&gt;
&lt;li&gt;This Document vector is then concatenated with document-level features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Predict&lt;ul&gt;
&lt;li&gt;Yes / No (5 different personality traits are trained separately)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="network-architecture-in-detail"&gt;Network Architecture in Detail&lt;/h2&gt;
&lt;h3 id="main-steps-7-layers"&gt;Main Steps (7 Layers)&lt;/h3&gt;
&lt;h4&gt;Word Vectorization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 1: Input&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(R ^{D \times S\times W \times E}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Use Google's pretrained word2vec&lt;/li&gt;
&lt;li&gt;In implementation, all the documents contain the same number of sentences.&lt;br&gt;
  Shorter documents are padded shorter sentences with dummy words.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Sentence Vectorization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 2: Convolution&lt;ul&gt;
&lt;li&gt;3 convolutional filters: unigram, bigram, trigram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layer 3: Max Polling&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Document Vectorization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 4: 1-max pooling&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Classification: (Yes/No)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 5: Linear with Sigmoid activation&lt;/li&gt;
&lt;li&gt;Layer 6, 7&lt;ul&gt;
&lt;li&gt;2 Neuron (yes/no) Softmax Output (ReLU and tanh perform worse)&lt;/li&gt;
&lt;li&gt;fully connected layer of size 200&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="training"&gt;Training&lt;/h3&gt;
&lt;p&gt;Objective Function: Negative Log Likelihood&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Deep Learning"></category><category term="Machine Learning"></category><category term="NLP"></category><category term="Big Five Theory"></category><category term="Personality"></category></entry><entry><title>[Paper] Understanding Personality through Social Media</title><link href="https://blog.wei-lee.me/posts/tech/2017/04/Understanding-Personality-through-Social-Media" rel="alternate"></link><published>2017-04-05T22:30:00+08:00</published><updated>2017-04-05T22:30:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-04-05:/posts/tech/2017/04/Understanding-Personality-through-Social-Media</id><summary type="html">&lt;p&gt;&lt;a href="https://pdfs.semanticscholar.org/1503/fc3acf17b1972c9a16e40b3eba6c2a140624.pdf"&gt;Paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Main Purpose: To see how linguistic features correlate with each personality trait.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://pdfs.semanticscholar.org/1503/fc3acf17b1972c9a16e40b3eba6c2a140624.pdf"&gt;Paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Main Purpose: To see how linguistic features correlate with each personality trait.&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-of-past-researches"&gt;Problem of Past Researches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mbti"&gt;MBTI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data"&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prediction"&gt;Prediction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use Twitter to predict MBIT personality.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="problem-of-past-researches"&gt;Problem of Past Researches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Language on social media has richer content that makes the typical linguistic analysis tool perform poorly (e.g. iono → I don't know)&lt;/li&gt;
&lt;li&gt;Gain personality information is costly (e.g. Big Five Questionnaire)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mbti"&gt;MBTI&lt;/h3&gt;
&lt;p&gt;Instead of commonly used big five theory, MBTI is used in this paper.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Myers–Briggs_Type_Indicator"&gt;Myers-Briggs Type Indicator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are 4 types of personality trait&lt;br&gt;
i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introversion(I) / Extroversion(E)&lt;/li&gt;
&lt;li&gt;Intuition(N) / Sensing(S)&lt;/li&gt;
&lt;li&gt;Feeling(F) / Thinking(T)&lt;/li&gt;
&lt;li&gt;Perception(P) / Judging(J)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personality can be expressed as a code with 4 letters.&lt;br&gt;
e.g. ENFJ, INTP&lt;/p&gt;
&lt;h3 id="data"&gt;Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A Twitter dataset&lt;ul&gt;
&lt;li&gt;Around 90,000 users&lt;/li&gt;
&lt;li&gt;120,000 personality-related tweets from 2006~2015 (out of 1.7 M tweets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What is the so-called personliaty-related tweets?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;English Tweets that contain users' own MBIT code.&lt;br&gt;
    e.g.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"I'm an ENFJ"&lt;/code&gt; is qualified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"My friend is an ISFJ"&lt;/code&gt; is not qualified&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heuristic rules is used (e.g. &lt;code&gt;"I'm"&lt;/code&gt;, &lt;code&gt;"I got"&lt;/code&gt;, &lt;code&gt;"I have been a"&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;No classification method is used for ensuring the personality code is indeed the user's&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Distribution&lt;/h4&gt;
&lt;p&gt;Personality distribution of this data is skewed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="MBTI-bar" src="/images/posts-image/2017-04-05-understanding-personliaty-through-social-media/MBTI-bar.png"&gt;&lt;/p&gt;
&lt;p&gt;However, in the real word, the personality distribution might also be skewed.&lt;/p&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;h4&gt;1. n-grams&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Most frequent 1,000 unigram, bigram, trigram words and phrases&lt;/li&gt;
&lt;li&gt;1,000 dimensions vectors for unigram, bigram trigram for each user&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. Twitter Part-of-speech tags&lt;/h4&gt;
&lt;p&gt;Based on &lt;a href="http://www.cs.cmu.edu/~ark/TweetNLP/gimpel+etal.acl11.pdf"&gt;Part-of-Speech Tagging for Twitter: Annotation, Features, and Experiments&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;25 types with some Twitter-specific tag.&lt;br&gt;
  e.g.&lt;ul&gt;
&lt;li&gt;hashtag&lt;/li&gt;
&lt;li&gt;at-mention&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;emoticon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3.word vectors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Word Vector Settings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2,334,564 words&lt;/li&gt;
&lt;li&gt;500 dimension&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extracted Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Average word vectors&lt;/li&gt;
&lt;li&gt;Weighted average word vectors (weighted according to TF-IDF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="prediction"&gt;Prediction&lt;/h3&gt;
&lt;p&gt;Logistic Regression is used (Random Forest and SVM produced similar results)&lt;/p&gt;
&lt;h4&gt;Accuracy Measurement&lt;/h4&gt;
&lt;p&gt;Since the data is skewed, AUC is used.&lt;/p&gt;
&lt;h4&gt;Accuracy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Indivisula Features&lt;ul&gt;
&lt;li&gt;Word Vector Only → (AUC=0.651)&lt;/li&gt;
&lt;li&gt;n-gram only → (AUC=0.607)&lt;/li&gt;
&lt;li&gt;POS only → (AUC=0.585)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combined Features&lt;ul&gt;
&lt;li&gt;All three features → (AUC=0.661)&lt;/li&gt;
&lt;li&gt;POS + n-gram → (AUC=0.616)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Insight&lt;/h4&gt;
&lt;p&gt;Among the results, word vector performs best which might illustrate that predictions based on social media and language would work.&lt;/p&gt;
&lt;p&gt;During the POS conversion process, information is compressed into 25 tags and might lost some important one.&lt;br&gt;
This might be the reason why it performs worse.&lt;/p&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Machine Learning"></category><category term="NLP"></category><category term="MBTI"></category><category term="Personality"></category></entry><entry><title>[Paper] Toward Personality Insights from Language Exploration in Social Media</title><link href="https://blog.wei-lee.me/posts/tech/2017/04/Toward-Personality-Insights-from-Language-Exploration-in-Social-Media" rel="alternate"></link><published>2017-04-04T18:45:00+08:00</published><updated>2017-04-04T18:45:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-04-04:/posts/tech/2017/04/Toward-Personality-Insights-from-Language-Exploration-in-Social-Media</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/papers/sam2013-dla.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/personality_wc.html"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/toward-personality-insights-from-language-exploration-in-social-media"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main purpose of this paper is to show how social media can be used to gain psychological insights.&lt;/p&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/papers/sam2013-dla.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/personality_wc.html"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/toward-personality-insights-from-language-exploration-in-social-media"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main purpose of this paper is to show how social media can be used to gain psychological insights.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Different from other papers in the past which use a pre-compiled word category list (e.g. LIWC),&lt;br&gt;
it uses an open vocabulary approach that allowing discovery of unanticipated language.&lt;/p&gt;
&lt;h3 id="data"&gt;Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;75,000 Volunteers&lt;ul&gt;
&lt;li&gt;Facebook Status Update&lt;/li&gt;
&lt;li&gt;Age&lt;/li&gt;
&lt;li&gt;Gender&lt;/li&gt;
&lt;li&gt;Personality (Through Standard Personality Questionnaire)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="architecture"&gt;Architecture&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Linguistic Feature Extraction&lt;ul&gt;
&lt;li&gt;N-Gram&lt;ul&gt;
&lt;li&gt;Point-Wise Mutual Information&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Topic&lt;ul&gt;
&lt;li&gt;Probability a person mentioning a topic (Derived from LDA)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Correlation analysis&lt;ul&gt;
&lt;li&gt;Least Squares Linear Regression&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/personality_wc.html"&gt;Differential Word Clouds&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Word size represents correlation strength.&lt;/li&gt;
&lt;li&gt;Color represents relative frequency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Standardized Frequency Plot&lt;ul&gt;
&lt;li&gt;Plot the word frequency against age&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="result"&gt;Result&lt;/h3&gt;
&lt;p&gt;Most results confirm what is already known or obvious.&lt;br&gt;
However, I think this method might still be useful to gain insight in other kinds of datasets.&lt;/p&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Visualization"></category><category term="NLP"></category><category term="Big Five Theory"></category><category term="Personality"></category></entry><entry><title>Create a Telegram EchoBot</title><link href="https://blog.wei-lee.me/posts/tech/2017/03/create-a-telegram-echobot" rel="alternate"></link><published>2017-03-31T19:24:00+08:00</published><updated>2017-03-31T19:24:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-03-31:/posts/tech/2017/03/create-a-telegram-echobot</id><summary type="html">&lt;p&gt;最近當助教要出一個 Telegram Bot 相關的 Project&lt;br&gt;
先來寫一篇簡單的教學，減少之後的問題 XDD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近當助教要出一個 Telegram Bot 相關的 Project&lt;br&gt;
先來寫一篇簡單的教學，減少之後的問題 XDD&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-telegram"&gt;What is Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-telegram"&gt;Why Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-framework"&gt;Web Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-a-telegram-bot"&gt;Apply a telegram bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#telegram-bot-api-wrapper"&gt;Telegram Bot API Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#star-programming"&gt;Star Programming&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#95set95webhook"&gt;_set_webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wehook95handler"&gt;wehook_handler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;如果對 Chat Bot 的基本運作概念不太熟&lt;br&gt;
可以參考&lt;a href="https://blog.wei-lee.me/posts/tech/2016/11/introduction-to-chatbot#introduction-to-chatbot"&gt;[Bot] Introduction to Chatbot&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="what-is-telegram"&gt;What is Telegram&lt;/h2&gt;
&lt;p&gt;在台灣，好像還沒有那麼多人用 Telegram&lt;br&gt;
簡單來說就跟 Facebook Messenger 或 Line 這類的 IM 差不多&lt;/p&gt;
&lt;h2 id="why-telegram"&gt;Why Telegram&lt;/h2&gt;
&lt;p&gt;至於這次為什麼要選用 Telegram 麻&lt;br&gt;
是因為上次有聽其他開發者說 Telegram Bot 提供相當多的功能&lt;br&gt;
就想說來試試看&lt;/p&gt;
&lt;h2 id="web-framework"&gt;Web Framework&lt;/h2&gt;
&lt;p&gt;上次寫 Line EchoBot 的教學是用 django&lt;br&gt;
這次來試試 Flask&lt;/p&gt;
&lt;p&gt;Source Code 一樣放在 GitHub 上&lt;br&gt;
這篇文章會用&lt;a href="https://github.com/Lee-W/telegram_echobot/tree/minimal-flask"&gt;minimal-flask&lt;/a&gt; branch 當範例&lt;br&gt;
只有 31 行 Code，比較容易理解&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Lee-W/telegram_echobot/tree/master"&gt;master&lt;/a&gt; 上也是用 Flask&lt;br&gt;
只是架構比較複雜，有試一下 Flask 的 blueprint，之後可能還會多加一些奇怪的功能 xd&lt;/p&gt;
&lt;h2 id="apply-a-telegram-bot"&gt;Apply a telegram bot&lt;/h2&gt;
&lt;p&gt;首先當然必須要有&lt;a href="https://telegram.org"&gt;Telegram&lt;/a&gt; 的帳號&lt;br&gt;
再來要加&lt;a href="https://telegram.me/botfather"&gt;BotFather&lt;/a&gt; 為好友&lt;/p&gt;
&lt;p&gt;跟他說 &lt;code&gt;/newbot&lt;/code&gt;&lt;br&gt;
接著他會問你，Bot 的 name 跟 username&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name 是 Bot 在聯絡人資訊顯示的名稱&lt;/li&gt;
&lt;li&gt;username 則比較像 id 的概念，而且一定要用 Bot 結尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之後就會得到剛申請 Bot 的 API Token&lt;br&gt;
然後你就可以從 &lt;code&gt;https://telegram.me/&amp;lt;bot_username&amp;gt;&lt;/code&gt; 找到剛申請的 bot&lt;/p&gt;
&lt;h2 id="telegram-bot-api-wrapper"&gt;Telegram Bot API Wrapper&lt;/h2&gt;
&lt;p&gt;開發上，我使用的是&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot"&gt;python-telegram-bot&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-telegram-bot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它其中一點設計的很不錯的是&lt;br&gt;
Telegram API 的命名是 CamelCase (e.g. sendMessage)&lt;br&gt;
但 Python 的命名 convention 卻是 lowercase_separated_by_underscores (e.g. send_message)&lt;br&gt;
而它是兩種都支援&lt;/p&gt;
&lt;h2 id="star-programming"&gt;Star Programming&lt;/h2&gt;
&lt;p&gt;先附上全部的 code，後面再慢慢解釋&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;telegram&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your API Token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://Your URL/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Webhook setup failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;webhook_handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;de_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="setup"&gt;Setup&lt;/h3&gt;
&lt;p&gt;其中有兩個地方，必須要改成自己的設定&lt;/p&gt;
&lt;h4&gt;1. API Token&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your API Token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your API Token 要改成剛剛取得的 API Token&lt;/p&gt;
&lt;h4&gt;2. Webhook URL&lt;/h4&gt;
&lt;p&gt;_set_webhook 中的 Your URL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;statue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://Your URL/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡的 URL 就是設定成你這個 Bot Server 的 URL&lt;br&gt;
不過 Telegram 一樣要求必須要是 https&lt;br&gt;
最簡單的方式就是使用 ngrok&lt;br&gt;
(ngrok 的使用在&lt;a href="https://blog.wei-lee.me/posts/tech/2016/11/line-echo-bot-on-django#line-echo-bot-on-django"&gt;[Bot] Line Echo Bot on Django&lt;/a&gt; 最後面有介紹 )&lt;br&gt;
平常測試使用 ngrok 就很足夠了&lt;br&gt;
之後要 production 的時候，在 deploy 到適當的 server 就好了&lt;/p&gt;
&lt;h3 id="95set95webhook"&gt;_set_webhook&lt;/h3&gt;
&lt;p&gt;Telegram 有兩種接收訊息的方式&lt;br&gt;
隨時去監聽的 webhook，和主動去要求更新的 &lt;code&gt;get_updates&lt;/code&gt;&lt;br&gt;
這裡使用的是 webhook&lt;/p&gt;
&lt;p&gt;這個 function 先設定 Bot 的 webhook URL，如果設定失敗就直接終止程式&lt;br&gt;
也就是告訴 Telegram 要把 Bot 收到的訊息傳到哪&lt;br&gt;
而 &lt;code&gt;set_webhook&lt;/code&gt; 前面要有個 _的原因是我不希望它被其他的 code 使用&lt;br&gt;
但 Python 本身並不支援 Private 的概念，而是慣例上在前面加一個底線&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://Your URL/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Webhook setup failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在最後 run Flask app 前，要先把 webhook URL 設定好&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="wehook95handler"&gt;wehook_handler&lt;/h3&gt;
&lt;p&gt;這裡就是 bot 收到訊息要怎麼處理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;webhook_handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;de_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;app.route&lt;/code&gt; 這個 decorator 是 Flask 的語法&lt;br&gt;
表示 &lt;code&gt;https:/Your URL/hook&lt;/code&gt; 會導到這個 function，而它只能接受 POST&lt;br&gt;
這裡設定的 &lt;code&gt;/hook&lt;/code&gt; 也就是為什麼在 &lt;code&gt;_set_webhook&lt;/code&gt; 中的 URL 最後面必須有 &lt;code&gt;/hook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外還可以發現 webhook_handler 是不帶任何參數的&lt;br&gt;
跟 django 不同的是&lt;br&gt;
Flask 把 request 這種幾乎所有 view function 都會用到的參數直接變成全域可讀取的變數&lt;br&gt;
也就是最一開始的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來 &lt;code&gt;webhook_handler&lt;/code&gt; 內做的就只是把收到的訊息轉成 &lt;code&gt;update&lt;/code&gt;&lt;br&gt;
再從裡面讀到對方傳來的 &lt;code&gt;text&lt;/code&gt;&lt;br&gt;
最後用 &lt;code&gt;reply_text&lt;/code&gt; 回傳同樣的 text 回去&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這是最簡單的 Telegram Bot&lt;br&gt;
不過我覺得開始學一個東西，還是會希望能在最短時間看到點東西，再慢慢專研&lt;br&gt;
接下來可以從&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot"&gt;python-telegram-bot&lt;/a&gt; 的&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot/wiki"&gt;wiki&lt;/a&gt;，試更多 Telegram Bot 的功能&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sooyhwang/Simple-Echo-Telegram-Bot"&gt;Simple-Echo-Telegram-Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.30sparks.com/develop-telegram-bot-introduction/"&gt;開發 Telegram Bot 簡介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category><category term="Flask"></category></entry><entry><title>SITCON 2017</title><link href="https://blog.wei-lee.me/posts/tech/2017/03/sitcon-2017" rel="alternate"></link><published>2017-03-20T21:07:00+08:00</published><updated>2017-03-20T21:07:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-03-20:/posts/tech/2017/03/sitcon-2017</id><summary type="html">&lt;p&gt;聽說這次 SITCON 一分鐘就賣完了＠＠&lt;br&gt;
還好我申請了開源貢獻票 xdddd&lt;br&gt;
所以大家快來貢獻開源專案，脫離搶票吧（？？？？？&lt;/p&gt;
</summary><content type="html">&lt;p&gt;聽說這次 SITCON 一分鐘就賣完了＠＠&lt;br&gt;
還好我申請了開源貢獻票 xdddd&lt;br&gt;
所以大家快來貢獻開源專案，脫離搶票吧（？？？？？&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/GYVgRgHAzALA7ABgLRjCGSYFMBMckCcOAJlEjjAnHAIYBsdIcwAjEA==?edit"&gt;RO 共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/JwdgRgTAjCEQtAMygBhPALBiAOeOBTAYwGZ4ATAVmAMuxUsQxCA=?both"&gt;R1 共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CwVgnARghlBMAcBaAzAdgGzscDAzRUuUqi8AJrshBAAyqwCMZEQA?both"&gt;R2 共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/MwNhBYFMDMCMEMC0BWADARnI85kkbMDogEwDsssJwJAxrGarEA==?both"&gt;R3 共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這次大概就這兩場比較印象深刻&lt;/p&gt;
&lt;h2 id="_1"&gt;前端工程的過去、現在與未來&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://slides.com/tz5514/deck-1-2#/"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整體算是給完全不懂前端的我，關於前端的知識 overview&lt;/p&gt;
&lt;h3 id="present"&gt;Present&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webpack.github.io"&gt;Webpack&lt;/a&gt; 未來可能取代 Gulp 與 grunt&lt;/li&gt;
&lt;li&gt;&lt;a href="https://babeljs.io"&gt;Babel&lt;/a&gt;: 目前最主流的 Javascript Transpiler&lt;ul&gt;
&lt;li&gt;e.g. 轉換 ES6 → ES5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雖然 ES6 支援模組標準，但瀏覽器尚未有定論，目前前端依然無法支援模組&lt;ul&gt;
&lt;li&gt;可以用 webpack 打包來模擬&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非同步處理 : ES6 Promise, async/await&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;第一次做光劍就上手&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/mobile/ssuserb8be06/ss-73305383"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;雖然隔壁兩場，一場在講 Chat Bot，一場在講 AI&lt;br&gt;
我好像應該去聽&lt;br&gt;
但身為星戰迷，實在無法抵抗光劍的誘惑&lt;br&gt;
The force is strong in this session&lt;/p&gt;
&lt;p&gt;一把最簡單的光劍大概台幣 1000 可以起來&lt;br&gt;
感覺有時間蠻值得來玩玩的 xD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="SITCON"></category></entry><entry><title>Tool for Checking Python Coding Style</title><link href="https://blog.wei-lee.me/posts/tech/2017/03/tools-for-checking-python-coding-style" rel="alternate"></link><published>2017-03-15T19:13:00+08:00</published><updated>2017-03-15T19:13:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-03-15:/posts/tech/2017/03/tools-for-checking-python-coding-style</id><summary type="html">&lt;p&gt;&lt;a href="https://www.pylint.org"&gt;Pylint&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;h3 id="generate-a-code-quality-report"&gt;Generate a code quality report&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;your_code.py
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;&lt;a href="https://www.pylint.org"&gt;Pylint&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;h3 id="generate-a-code-quality-report"&gt;Generate a code quality report&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;your_code.py
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h3 id="customize-your-pylint-settings"&gt;Customize your pylint settings&lt;/h3&gt;
&lt;p&gt;Some rules in default settings might be too trivial.&lt;br&gt;
(e.g. PEP8 E501: line too long error (no more than 79 characters) )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate &lt;code&gt;pylintrc&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;--generate-rcfile&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.pylintrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This generate a common used &lt;code&gt;pylintrc&lt;/code&gt;.&lt;br&gt;
For further customization, you'll have to change this file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a code quality report using you &lt;code&gt;pylintrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;--rcfile&lt;span class="w"&gt; &lt;/span&gt;~/.pylintrc&lt;span class="w"&gt; &lt;/span&gt;you_code.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="integrate-with-vim"&gt;Integrate with Vim&lt;/h2&gt;
&lt;h3 id="1-ale"&gt;1. &lt;a href="https://github.com/w0rp/ale"&gt;ale&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ale-screenshot" src="/images/posts-image/2017-03-15-tools-for-checking-python-coding-style/vwpqY4G.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ale&lt;/code&gt; also supports other linters in other languages.&lt;br&gt;
It uses the new async feature in vim 8.&lt;br&gt;
Thus, it checks your code when you are typing. (You can disable it.)&lt;/p&gt;
&lt;p&gt;The following settings are for pylint in &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The default value is pytlinh&lt;/span&gt;
&lt;span class="c1"&gt;# If your pylint executable is not pylint, it should be set&lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;g:ale_python_pylint_executable&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# options of your pylint command&lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;g:ale_python_pylint_options&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--rcfile ~/.pylintrc&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the available linters are enabled by default.&lt;br&gt;
For Python, &lt;code&gt;flake8&lt;/code&gt;, &lt;code&gt;mypy&lt;/code&gt; are also used.&lt;br&gt;
Thus, you might find that even if you ignore some rules in &lt;code&gt;pylintc&lt;/code&gt;, you are still notified.&lt;/p&gt;
&lt;p&gt;In this case, add the following setting in &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;g:ale_linters&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="se"&gt;\}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This enables &lt;code&gt;pylint&lt;/code&gt; as the only linter for Python&lt;/p&gt;
&lt;p&gt;p.s. &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt; are also great linters. I'm just not familiar with it&lt;/p&gt;
&lt;h3 id="2-python-mode"&gt;2. &lt;a href="https://github.com/python-mode/python-mode"&gt;python-mode&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's a powerful package supports not only linters but also plenty of useful features a python programer would need.&lt;/p&gt;
&lt;p&gt;&lt;img alt="python-mode-screenshot" src="/images/posts-image/2017-03-15-tools-for-checking-python-coding-style/5FffIqN.png"&gt;&lt;br&gt;
Unlike &lt;code&gt;ale&lt;/code&gt;, &lt;code&gt;python-mode&lt;/code&gt; check your code only when you save or open your python file (You can set this in your &lt;code&gt;~/.vimrc&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Add these lines in &lt;code&gt;~/.vimrc&lt;/code&gt;  to enable &lt;code&gt;pylint&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_lint_checkers &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;pyflakes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pep8&amp;#39;&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_lint_ignore &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C0111,W0621,E501,F0002&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that space cannot appear in &lt;code&gt;pymode_lint_ignore&lt;/code&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Code Quality"></category><category term="Vim"></category></entry><entry><title>git ignore-io 與 開源貢獻經驗</title><link href="https://blog.wei-lee.me/posts/tech/2017/02/git-ignoreio-and-open-source-experience" rel="alternate"></link><published>2017-02-28T21:56:00+08:00</published><updated>2017-02-28T21:56:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2017-02-28:/posts/tech/2017/02/git-ignoreio-and-open-source-experience</id><summary type="html">&lt;p&gt;雖然已經隔了一年多&lt;br&gt;
當初 git ignore-io 這個小功能，也是花了一兩個月&lt;br&gt;
好不容易才&lt;a href="https://github.com/tj/git-extras"&gt;git extras&lt;/a&gt; merge 回去的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;雖然已經隔了一年多&lt;br&gt;
當初 git ignore-io 這個小功能，也是花了一兩個月&lt;br&gt;
好不容易才&lt;a href="https://github.com/tj/git-extras"&gt;git extras&lt;/a&gt; merge 回去的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;當初看到這封信的時候，很是感動啊 xd&lt;br&gt;
&lt;img alt="accepted" src="/images/posts-image/2017-02-28-git-ignoreio-and-open-source-experience/1-accepted.jpg"&gt;&lt;/p&gt;
&lt;h2 id="git-ignore-io"&gt;git ignore-io&lt;/h2&gt;
&lt;p&gt;這個工具主要是從&lt;a href="https://www.gitignore.io"&gt;gitignoore.io&lt;/a&gt; 上下載 .gitignore 的範本&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;ignore-io&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;vim&lt;span class="w"&gt; &lt;/span&gt;osx&lt;span class="w"&gt; &lt;/span&gt;python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像這就是 vim 常見的暫存檔們&lt;br&gt;
一般來說應該被忽略掉，不用被 commit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Created by https://www.gitignore.io/api/vim

### Vim ###
# swap
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]s[a-v][a-z]
[._]sw[a-p]
# session
Session.vim
# temporary
.netrwhist
*~
# auto-generated tag files
tags

# End of https://www.gitignore.io/api/vim
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;當初可是連文件都要寫好，才會被作者接受&lt;br&gt;
所以我這裡就直接沿用我當初寫的文件了 xD&lt;/p&gt;
&lt;p&gt;Without option, &lt;code&gt;git ignore-io &amp;lt;type&amp;gt;&lt;/code&gt; shows the sample gitignore of specified types on screen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;ignore-io&lt;span class="w"&gt; &lt;/span&gt;vim

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Created by https://www.gitignore.io/api/vim&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;### Vim ###&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;._&lt;span class="o"&gt;]&lt;/span&gt;*.s&lt;span class="o"&gt;[&lt;/span&gt;a-w&lt;span class="o"&gt;][&lt;/span&gt;a-z&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;._&lt;span class="o"&gt;]&lt;/span&gt;s&lt;span class="o"&gt;[&lt;/span&gt;a-w&lt;span class="o"&gt;][&lt;/span&gt;a-z&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;*.un~
&lt;span class="w"&gt;    &lt;/span&gt;Session.vim
&lt;span class="w"&gt;    &lt;/span&gt;.netrwhist
&lt;span class="w"&gt;    &lt;/span&gt;*~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To export it to &lt;code&gt;.gitignore&lt;/code&gt; file you can use the following options:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--append&lt;/code&gt; to append the result to &lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--replace&lt;/code&gt; to export &lt;code&gt;.gitignore&lt;/code&gt; with the result&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;ignore-io&lt;span class="w"&gt; &lt;/span&gt;vim&lt;span class="w"&gt; &lt;/span&gt;python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For efficiency, &lt;code&gt;git ignore-io&lt;/code&gt; store all available types at &lt;code&gt;~/.gi_list&lt;/code&gt;.&lt;br&gt;
To list all the available types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;-L&lt;/code&gt; : These two options will show the list in different format. Just try it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also search type from the list by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-s &amp;lt;word&amp;gt;&lt;/code&gt; or &lt;code&gt;--search &amp;lt;word&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;ignore-io&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;ja

&lt;span class="w"&gt;    &lt;/span&gt;django
&lt;span class="w"&gt;    &lt;/span&gt;jabref
&lt;span class="w"&gt;    &lt;/span&gt;java
&lt;span class="w"&gt;    &lt;/span&gt;ninja
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2 id="_1"&gt;為什麼要貢獻開源專案？&lt;/h2&gt;
&lt;p&gt;貢獻開源專案最主要的原因&lt;br&gt;
還是就是&lt;strong&gt;我需要這個功能啊！！！&lt;/strong&gt;&lt;br&gt;
但是就沒有人寫，bug 沒有人修&lt;br&gt;
所以就只好先承認自己就是「沒有人」了 xd&lt;/p&gt;
&lt;p&gt;其實 gitignore.io 本身就有提供一個簡單的 script &lt;a href="https://www.gitignore.io/docs#-install-command-line"&gt;gi&lt;/a&gt;&lt;br&gt;
不過實在有點不夠我用 xD&lt;br&gt;
於是我就寫了&lt;a href="https://github.com/Lee-W/gi_extension"&gt;gi_extension&lt;/a&gt;&lt;br&gt;
後來又覺得，如果整併的 git extras&lt;br&gt;
我就能透過 homebrew 安裝了 (?????&lt;/p&gt;
&lt;p&gt;整個從 pull request 到 merge 的過程其實蠻有趣的&lt;br&gt;
我找到當初我開的&lt;a href="https://github.com/tj/git-extras/pull/439"&gt;pr #439&lt;/a&gt; 和&lt;a href="https://github.com/tj/git-extras/pull/448"&gt;pr #448&lt;/a&gt;&lt;br&gt;
從 shell script 的風格（有人建議我用&lt;a href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;）到 command 的 option 為什麼要這樣命名&lt;br&gt;
都有人跟我討論，給我建議&lt;br&gt;
從中也學到了很多&lt;br&gt;
&lt;del&gt;貢獻這些專案還能去申請 SITCON 跟 COSCUP 的開源貢獻票，這樣就不用跟大家搶票了&lt;/del&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Open Source"></category></entry><entry><title>More than Just Echo Bot</title><link href="https://blog.wei-lee.me/posts/tech/2016/11/more-than-just-echo-bot" rel="alternate"></link><published>2016-11-29T01:57:00+08:00</published><updated>2016-11-29T01:57:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-11-29:/posts/tech/2016/11/more-than-just-echo-bot</id><summary type="html">&lt;p&gt;知道怎麼實作一個會 Echo 的 Bot 後&lt;br&gt;
再來就要思考，開發一個 Bot 我們要提供什麼功能&lt;br&gt;
(e.g., 天氣查詢, 訂票, 推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是 Bot 的功能&lt;br&gt;
Bot 的功能實作，跟一般網站或 App 的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
</summary><content type="html">&lt;p&gt;知道怎麼實作一個會 Echo 的 Bot 後&lt;br&gt;
再來就要思考，開發一個 Bot 我們要提供什麼功能&lt;br&gt;
(e.g., 天氣查詢, 訂票, 推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是 Bot 的功能&lt;br&gt;
Bot 的功能實作，跟一般網站或 App 的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果使用者問：「今天天氣如何？」「天氣今天好嗎？」&lt;br&gt;
要如何知道，他都是要詢問今天的天氣狀況&lt;br&gt;
也就是使用者的「意圖」&lt;/p&gt;
&lt;h2 id="based-on-keyword"&gt;Based on Keyword&lt;/h2&gt;
&lt;p&gt;上一篇文章，輸入關鍵字就能回傳 template message 的 bot 也是用這樣的方式實作的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ButtonTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ConfirmTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;carousel&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send CarouselTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Echo TextMessage&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回歸到天氣的問題&lt;br&gt;
可以試著找出「天氣」是否有出現在使用者的問句中&lt;br&gt;
再來判斷「今天」, 「明天」這樣敘述時間的詞&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;天氣&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;今天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;today_s_weather&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;明天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tomorrow_s_weather&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pros"&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不需要其他的背景知識，容易實作&lt;/li&gt;
&lt;li&gt;運算量小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cons"&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建立規則很麻煩&lt;/li&gt;
&lt;li&gt;規則很容易就會出現例外，很難定義得完整&lt;ul&gt;
&lt;li&gt;只要使用者無法觸發到關鍵字，就無法使用功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一堆 if else 造成程式冗長，不易擴充和維護&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="aiml"&gt;AIML&lt;/h2&gt;
&lt;p&gt;Artificial Intelligence Modelling Language&lt;br&gt;
它是一款基於 XML 的 markup language&lt;/p&gt;
&lt;p&gt;這是最基本的 AIML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;aiml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;encoding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;HELLO&lt;span class="w"&gt; &lt;/span&gt;ALICE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;Hello&lt;span class="w"&gt; &lt;/span&gt;User!
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要符合特定的 pattern，就回傳指定的 template&lt;br&gt;
也能透過 &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt; 這樣的 tag，從多種回覆隨機丟一種回傳&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;random&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;response1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;response2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;...
&lt;span class="nt"&gt;&amp;lt;/random&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pros_1"&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比起只用 if else 更結構化，較易維護和擴充&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cons_1"&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依然很難包含所有的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="other-nlp-service"&gt;Other NLP Service&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wit.ai"&gt;Wit.ai&lt;/a&gt; (Facebook)&lt;ul&gt;
&lt;li&gt;COSCUP 2016 的聊天機器人小啄，就是透過 Wit.ai 實作的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.luis.ai"&gt;LUIS&lt;/a&gt; (Microsoft)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.ai"&gt;API.ai&lt;/a&gt; (Google)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些服務能透過標記和訓練&lt;br&gt;
解析出這句話的每一個片段，所具有的意義&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. 「今天西雅圖天氣如何」&lt;ul&gt;
&lt;li&gt;時間：今天&lt;/li&gt;
&lt;li&gt;地點：西雅圖&lt;/li&gt;
&lt;li&gt;意圖：天氣如何&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="witai"&gt;Wit.ai&lt;/h3&gt;
&lt;p&gt;Wit.ai 跟 LUIS, API.ai 比較不同的地方是&lt;br&gt;
從 Wit.ai 得到的是，我們設定的回覆&lt;br&gt;
而不是一句話解析後的結果&lt;/p&gt;
&lt;h3 id="luis"&gt;LUIS&lt;/h3&gt;
&lt;p&gt;從&lt;a href="https://www.microsoft.com/cognitive-services/en-us/language-understanding-intelligent-service-luis"&gt;這裡&lt;/a&gt; 可以測試兩個訓練過的範例機器人，看看從 LUIS 可以得到什麼&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;how is the weather in the Taipei
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;how is the weather in the Taipei&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;topScoringIntent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;intent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.50119406&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;triggered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;entities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;dialog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;contextId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;80cd646a-d85d-4b40-873d-1b47fa49adc8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Question&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;prompt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Where would you like to get the current weather for?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;parameterName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="apiai"&gt;API.ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hey Calendar, schedule lunch with
Mary Johnson at 12 pm tomorrow.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;meeting.create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lunch with Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;invitees&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2014-08-06T12:00:00-07:00&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="implement-through-powerful-libraries"&gt;Implement Through Powerful Libraries&lt;/h2&gt;
&lt;p&gt;不過這些服務，通常會有它的限制&lt;br&gt;
這時候就能用上 Python 強大的函式庫們，來實作自己的版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nltk.org"&gt;NLTK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python 經典的 NLP 函式庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radimrehurek.com/gensim/"&gt;word2vec&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;透過詞向量，找出相似詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fxsjy/jieba"&gt;jieba&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;中文斷詞&lt;/li&gt;
&lt;li&gt;判斷句子中的關鍵詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在&lt;a href="https://gist.github.com/Lee-W/72f3a59b015cd67b3a939bf8a12680ac"&gt;NLP Libs Sample&lt;/a&gt; 寫了這些函式庫的基本使用範例&lt;/p&gt;
&lt;p&gt;另外，也可以看&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;br&gt;
它是一系列聊天機器人教學，談這些做法背後的理論和實作&lt;/p&gt;
&lt;h2 id="beyond-nlp"&gt;Beyond NLP&lt;/h2&gt;
&lt;p&gt;不過就算做了這些分詞、判斷意圖&lt;br&gt;
也不能保證使用者就會買單&lt;/p&gt;
&lt;p&gt;有人稱 Chat Bot 為下一代的 UX Design&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fastcodesign.com/3054934/the-next-phase-of-ux-designing-chatbot-personalities"&gt;The Next Phase Of UX: Designing Chatbot Personalities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="issue"&gt;Issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何讓使用者，在機器人的 Scope 內不會碰壁&lt;/li&gt;
&lt;li&gt;如何讓機器人的判斷足夠 robust，不會每次回答都是不明白&lt;/li&gt;
&lt;li&gt;如何讓使用者在最少的操作下，得到想得到的服務&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更進一步是&lt;br&gt;
如何設計一個有個性、有溫度的機器人&lt;br&gt;
這裡就可以再去研究 NLP 的情感分析&lt;/p&gt;
&lt;h3 id="read-more"&gt;Read More&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.topbots.com/common-chatbot-ux-mistakes-in-bot-design/"&gt;WHEN BOTS GO BAD: COMMON UX MISTAKES IN CHATBOT DESIGN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2016/11/does-conversation-hurt-or-help-the-chatbot-ux/"&gt;Does Conversation Hurt Or Help The Chatbot UX?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/SyJUciYWg"&gt;Head First ChatBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/aiml/index.htm"&gt;AIML Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.devdungeon.com/content/ai-chat-bot-python-aiml"&gt;AI Chat Bot in Python with AIML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wit.ai/docs/quickstart"&gt;Wit.ai Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/ideas/an-overview-of-the-bot-landscape?imm_mid=0eb199&amp;amp;cmp=em-data-na-na-newsltr_20161130"&gt;An overview of the bot landscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category><category term="NLP"></category><category term="Machine Learning"></category></entry><entry><title>More About Line Messaging API - Template Messages</title><link href="https://blog.wei-lee.me/posts/tech/2016/11/more-about-line-messaging-api-template-messages" rel="alternate"></link><published>2016-11-27T06:08:00+08:00</published><updated>2016-11-27T06:08:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-11-27:/posts/tech/2016/11/more-about-line-messaging-api-template-messages</id><summary type="html">&lt;p&gt;除了傳送文字外，Line Bot 還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音, 地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot 所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Template&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt; 和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談 Template Messages 的使用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;除了傳送文字外，Line Bot 還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音, 地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot 所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Template&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt; 和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談 Template Messages 的使用&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="template"&gt;Template&lt;/h1&gt;
&lt;p&gt;Template 分為 Button, Confirm 跟 Carousel 三種&lt;br&gt;
這些功能也是我認為從 Line Bot Trail 升級到 Line Messaging API 最好用的功能&lt;/p&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;以下的測試是 bot 收到關鍵字，回傳相對應的訊息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Button&lt;br&gt;
&lt;img alt="button_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/KYN6kDR.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm&lt;br&gt;
&lt;img alt="confirm_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/pUFboL5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Carousel (如果超出版面，則可以左右滑動)&lt;br&gt;
&lt;img alt="carousel_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/Pxvj6om.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外必須要注意的是，這些功能目前都只支援手機版&lt;br&gt;
在電腦版上的 Line 看到的訊息會是這樣&lt;br&gt;
&lt;img alt="template_message_on_pc" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/ZdGQjc6.png"&gt;&lt;br&gt;
這個文字內容可以透過 template 的 alt_text 參數設定&lt;/p&gt;
&lt;p&gt;上面的例子是&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplaten"&gt;line-bot-sdk-python&lt;/a&gt; 的使用範例&lt;br&gt;
(&lt;a href="https://github.com/Lee-W/line_echobot/tree/template-message"&gt;可以回傳 template message 的 echo bot&lt;/a&gt;)&lt;br&gt;
大部分都能透過 Code 和 Example 比對，找到需要調整的參數&lt;/p&gt;
&lt;p&gt;接下來談的是那些按鍵的設定&lt;br&gt;
上面所看到的按鍵都是一個 Action&lt;br&gt;
三種 Template 最大的不同，主要是這些 action 擺設的方式不同&lt;br&gt;
限制的數量也不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Button 一次可以支援四個 action&lt;/li&gt;
&lt;li&gt;Confirm 支援三個 action&lt;/li&gt;
&lt;li&gt;Carousel 則可以用 5 個 CarouselColumn，每一個 Column 支援 3 個 Action&lt;ul&gt;
&lt;li&gt;另外需要注意的是 Carousel 中每一個 Column 的 action 數量必須是一樣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="action"&gt;Action&lt;/h1&gt;
&lt;p&gt;這些 action 的 label 參數，就是顯示在按鍵上的文字，必須在 20 字以內&lt;/p&gt;
&lt;p&gt;text 參數則是按下這個按鍵，會由使用者回傳設定的文字&lt;br&gt;
e.g. 這是我按下上面 Button 的 postback 的效果&lt;br&gt;
&lt;img alt="text_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/ow2G8wU.png"&gt;&lt;br&gt;
而 text 就是設定為 postback ( 注意並非 label 的 'postback')&lt;/p&gt;
&lt;h2 id="postback"&gt;Postback&lt;/h2&gt;
&lt;p&gt;當使用者按了這個按鍵&lt;br&gt;
Line Server 會傳一個 postback event 給我們，裡面包含著 data 參數中設定的字串&lt;br&gt;
在收到 event 的時候，透過 &lt;code&gt;event.postback.postback.data&lt;/code&gt; 取出 data&lt;/p&gt;
&lt;p&gt;Postback 可以不給 text 參數&lt;/p&gt;
&lt;h2 id="message"&gt;Message&lt;/h2&gt;
&lt;p&gt;text 參數在 Message Action 是必須的，也不能給空字串&lt;br&gt;
如果希望這個按鍵，只有顯示但不會由使用者傳文字過來，可以給一串空白 (e.g. ' ')&lt;/p&gt;
&lt;h2 id="uri"&gt;URI&lt;/h2&gt;
&lt;p&gt;使用者按下這個按鍵就會用 Line 的瀏覽器跳到外部網頁&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devdocs.line.me/en/#template-messages"&gt;API Reference - Messaging API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplate"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category></entry><entry><title>Deploy LineBot on Heroku</title><link href="https://blog.wei-lee.me/posts/tech/2016/11/deploy-linebot-on-heroku" rel="alternate"></link><published>2016-11-27T06:05:00+08:00</published><updated>2016-11-27T06:05:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-11-27:/posts/tech/2016/11/deploy-linebot-on-heroku</id><summary type="html">&lt;p&gt;上一篇提到如何用 ngrok&lt;br&gt;
讓我們可以不用架 Https Server，直接在本地端測試 Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把 Bot 部署到 Heroku 上&lt;/p&gt;
</summary><content type="html">&lt;p&gt;上一篇提到如何用 ngrok&lt;br&gt;
讓我們可以不用架 Https Server，直接在本地端測試 Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把 Bot 部署到 Heroku 上&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="why-not-ngrok"&gt;Why not ngrok&lt;/h1&gt;
&lt;p&gt;使用 ngrok 必須要讓你的本地端一直開著才能收到訊息&lt;br&gt;
而且免費版的 ngrok 每次都會更改 url&lt;br&gt;
所以我們需要一個可以讓其他人較長時間測試的 Server&lt;/p&gt;
&lt;p&gt;以我自己的開發習慣&lt;br&gt;
我會使用 ngrok，來做 Bot 的基本除錯&lt;br&gt;
Heroku 則是用來讓其他人測試功能&lt;br&gt;
真的要上線的時候才會自己架一個 Https Server&lt;/p&gt;
&lt;p&gt;Line 的帳號也是 ngrok, heroku 跟上線需要的各申請一個&lt;br&gt;
不過 ngrok 可以好幾個 Line Bot 專案共用一個即可&lt;/p&gt;
&lt;h1 id="heroku"&gt;Heroku&lt;/h1&gt;
&lt;h2 id="create-app"&gt;Create App&lt;/h2&gt;
&lt;p&gt;先上&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; 辦個帳號&lt;/p&gt;
&lt;p&gt;到個人的 dashboard&lt;br&gt;
&lt;code&gt;New&lt;/code&gt; → &lt;code&gt;Create New App&lt;/code&gt;&lt;br&gt;
選一個名字，就創好 App 了&lt;/p&gt;
&lt;h2 id="deploy"&gt;Deploy&lt;/h2&gt;
&lt;h3 id="add-remote"&gt;Add Remote&lt;/h3&gt;
&lt;p&gt;在部署之前要先安裝&lt;a href="https://devcenter.heroku.com/articles/heroku-command-line"&gt;Heroku CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再來我們要到原本 line-echobot，將 heroku 加入這個專案的 remote&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;login
heroku&lt;span class="w"&gt; &lt;/span&gt;git:remote&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;leewbot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用 &lt;code&gt;git remote -v&lt;/code&gt; 就能看到 &lt;code&gt;heroku&lt;/code&gt; 已經被加入 remote 了&lt;br&gt;
以後只要 &lt;code&gt;git push heroku master&lt;/code&gt;，就能部署到 Heroku&lt;br&gt;
不過我們還必須要多做一些設定才能讓 Bot 順利的部署&lt;/p&gt;
&lt;h3 id="environment-variables"&gt;Environment Variables&lt;/h3&gt;
&lt;p&gt;首先是我們原先設定的環境變數&lt;br&gt;
Heroku 是透過這個指令來做設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;config:set&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;env value&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者也能到 dashboard 的 &lt;code&gt;Settings&lt;/code&gt; → &lt;code&gt;Config Variables&lt;/code&gt; → &lt;code&gt;Reveal Config Vars&lt;/code&gt; 做設定&lt;/p&gt;
&lt;h3 id="python-environments"&gt;Python Environments&lt;/h3&gt;
&lt;p&gt;因為 Heroku 支援多種不同的語言&lt;br&gt;
所以要讓 Heroku 知道我們使用的是 Python&lt;/p&gt;
&lt;p&gt;Heroku 可過專案中是否有 &lt;code&gt;requirements.txt&lt;/code&gt; 來判斷這個專案是否為 Python 專案&lt;br&gt;
並且安裝 &lt;code&gt;requirements.txt&lt;/code&gt; 內的函式庫&lt;br&gt;
名稱如果打錯，可能會讓 Heroku 不知道這是 Python 專案，導致部署失敗&lt;/p&gt;
&lt;p&gt;另外可以透過 &lt;code&gt;runtime.txt&lt;/code&gt; 來指定 Python 的版本&lt;br&gt;
目前支援這兩種版本
* &lt;code&gt;python-2.7.12&lt;/code&gt;
* &lt;code&gt;python-3.5.2&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="deploy-settings-procfile"&gt;Deploy Settings - Procfile&lt;/h3&gt;
&lt;p&gt;再來必須要讓 Heroku 知道我們執行專案的指令是什麼&lt;br&gt;
這個指令就是寫在 &lt;code&gt;Profile&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;這裡使用的部署套件是 gunicorn&lt;br&gt;
先在 &lt;code&gt;requirements.txt&lt;/code&gt; 加入 &lt;code&gt;gunicorn==19.0.0&lt;/code&gt;&lt;br&gt;
再來創一個 &lt;code&gt;Profile&lt;/code&gt;，內容是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;web: gunicorn line_echobot.wsgi --log-file -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果用其他的部署套件，則需要修改 web 後面的指令&lt;/p&gt;
&lt;p&gt;到了這裡就做好所有的設定了&lt;br&gt;
最後只要 &lt;code&gt;git push heroku master&lt;/code&gt; 就會部署到 Heroku 上&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;heroku open&lt;/code&gt; 能看到剛剛部署上去的專案&lt;br&gt;
接著把專案的網址加上我們先前設定的 callback url &lt;code&gt;echobot/callback&lt;/code&gt;&lt;br&gt;
設定到 Line Bot 的 Webhook URL，就完成了&lt;/p&gt;
&lt;h1 id="reference"&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#introduction"&gt;Getting Started on Heroku with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/deploying-python"&gt;Deploying Python and Django Apps on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Heroku"></category><category term="Django"></category><category term="Chat Bot"></category><category term="Deployment"></category></entry><entry><title>Line Echo Bot on Django</title><link href="https://blog.wei-lee.me/posts/tech/2016/11/line-echo-bot-on-django" rel="alternate"></link><published>2016-11-24T03:26:00+08:00</published><updated>2016-11-24T03:26:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-11-24:/posts/tech/2016/11/line-echo-bot-on-django</id><summary type="html">&lt;p&gt;單純要寫一個只會 Echo 的 Line Chat Bot&lt;br&gt;
用 flask 只要 85 行的 code 就能解決&lt;br&gt;
官方已經有提供相當清楚的範例&lt;a href="https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo"&gt;flask-echo&lt;/a&gt; 了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了 django 的做法&lt;br&gt;
想直接看 code 也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;單純要寫一個只會 Echo 的 Line Chat Bot&lt;br&gt;
用 flask 只要 85 行的 code 就能解決&lt;br&gt;
官方已經有提供相當清楚的範例&lt;a href="https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo"&gt;flask-echo&lt;/a&gt; 了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了 django 的做法&lt;br&gt;
想直接看 code 也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="line-messaging-api-line-bot-sdk-python"&gt;Line Messaging API (line-bot-sdk-python)&lt;/h1&gt;
&lt;p&gt;詳細的 Line Bot 提供哪些功能，該如何使用&lt;br&gt;
可以在&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt; 找到&lt;br&gt;
之後的文章，會談如何使用文字以外的功能&lt;/p&gt;
&lt;p&gt;這裡直接使用官方提供的&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;line-bot-sdk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外官方也提供&lt;a href="https://github.com/line/line-bot-sdk-java"&gt;java&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-go"&gt;go&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-php"&gt;php&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-ruby"&gt;ruby&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-perl"&gt;perl&lt;/a&gt; 的版本&lt;/p&gt;
&lt;h1 id="start-project"&gt;Start Project&lt;/h1&gt;
&lt;h2 id="create-project"&gt;Create Project&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a line_echobot project&lt;/span&gt;
django-admin&lt;span class="w"&gt; &lt;/span&gt;startproject&lt;span class="w"&gt; &lt;/span&gt;line_echobot

&lt;span class="c1"&gt;# Create an echobot app&lt;/span&gt;
python3&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;startapp&lt;span class="w"&gt; &lt;/span&gt;echobot
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="setup-line-secrets"&gt;Setup Line Secrets&lt;/h2&gt;
&lt;p&gt;接著設定 Line Bot 的 &lt;code&gt;Channel Secret&lt;/code&gt;, &lt;code&gt;Channel Access Token&lt;/code&gt;&lt;br&gt;
( 可以在 Line Bot 的 &lt;code&gt;Line Deverloper&lt;/code&gt; 頁面取得 )&lt;/p&gt;
&lt;p&gt;不過這些值不該被 git 記錄，所以不該被寫死在 &lt;code&gt;settings.py&lt;/code&gt; 中&lt;br&gt;
建議將這些值寫入環境變數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your django secret key&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel access token&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行時，讓設定檔先去讀取這些環境變數&lt;br&gt;
下面的 &lt;code&gt;get_env_variable&lt;/code&gt; 函式是用來取得環境變數&lt;br&gt;
只要有少設定，就會丟出 ImproperlyConfigured 的例外事件中斷執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/settings.py&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Set the &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; environment variable&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ImproperlyConfigured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_ACCESS_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_SECRET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;echobot&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過如果只是單純測試用，這些值也可以直接寫死在 settings.py 中&lt;/p&gt;
&lt;p&gt;另外也不要忘了在 &lt;code&gt;INSTLLED_APPS&lt;/code&gt; 加入 echobot&lt;/p&gt;
&lt;p&gt;一般來說，django 產生 project 時&lt;br&gt;
&lt;code&gt;settings.py&lt;/code&gt; 裡面就會有 secret key&lt;br&gt;
這裡的做法是把預設的 secret key 刪掉&lt;br&gt;
設定到環境變數中，避免被 git 記錄下來&lt;br&gt;
如果還需要另外還要重新產生可以透過&lt;a href="https://gist.github.com/mattseymour/9205591"&gt;django-secret-keygen.py&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup-line-webhook-url"&gt;Setup Line Webhook URL&lt;/h2&gt;
&lt;p&gt;再來要設定一個 Webhook URL&lt;br&gt;
讓 Line 可以把 Bot 收到的訊息傳給我們&lt;/p&gt;
&lt;p&gt;先在 project 的 &lt;code&gt;urls.py&lt;/code&gt; 設定&lt;br&gt;
讓 project 可以找到 echobot 這個 app 的 &lt;code&gt;urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/urls.py&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;echobot&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^echobot/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echobot.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 echobot 內，創一個 &lt;code&gt;urls.py&lt;/code&gt;&lt;br&gt;
並將 url 再導到 &lt;code&gt;callback&lt;/code&gt;，呼叫 &lt;code&gt;views.py&lt;/code&gt; 裡面的 &lt;code&gt;callback&lt;/code&gt; 函式 ( 接下來才會實作 )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# echobot/urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^callback/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這些都設定完後，要在 Line 那邊設定的 Webhook Url 就是 &lt;code&gt;https://"your domain name"/echobot/callback/&lt;/code&gt;&lt;br&gt;
(&lt;code&gt;your domain name&lt;/code&gt; 要設定什麼，會在這篇文章的&lt;a href="#https-server"&gt;最後&lt;/a&gt; 說明)&lt;/p&gt;
&lt;h2 id="implement-callback-function"&gt;Implement Callback Function&lt;/h2&gt;
&lt;p&gt;接下來就是要在 &lt;code&gt;echobot/views.py&lt;/code&gt; 實作 &lt;code&gt;callback&lt;/code&gt; 了&lt;/p&gt;
&lt;h3 id="initial"&gt;Initial&lt;/h3&gt;
&lt;p&gt;先 import 相關的函式庫&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過 line_bot_api 傳訊息給 Line，讓 Line 轉傳給使用者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="callback-function"&gt;Callback Function&lt;/h3&gt;
&lt;p&gt;有兩種方法可以處理 Line Server 送過來的訊息&lt;br&gt;
這裡先用 Todo 記著，待會再來補上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# TODO: Define Receiver&lt;/span&gt;

&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# TODO: Handler when receiver Line Message&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="validate-signature"&gt;Validate Signature&lt;/h3&gt;
&lt;p&gt;處理訊息之前&lt;br&gt;
先確認這個 request 是不是真的是從 Line Server 傳來的&lt;br&gt;
要確認這件事，需要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request 的 body&lt;/li&gt;
&lt;li&gt;request header 中的 X-Line-Signature&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是上面的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="handle-received-message"&gt;Handle Received Message&lt;/h3&gt;
&lt;p&gt;取得 body 跟 signature 後&lt;br&gt;
Line Bot API 會在處理訊息的同時，確認這個訊息是否來自 Line&lt;/p&gt;
&lt;p&gt;而處理 Line 傳過來給我們的訊息，有兩種不同的做法&lt;/p&gt;
&lt;h4&gt;WebhookParser&lt;/h4&gt;
&lt;p&gt;WebhookParser 會 Parse 這個訊息的所有欄位&lt;br&gt;
讓我們針對各種不同型別的訊息做個別的處理&lt;br&gt;
e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UserID&lt;/li&gt;
&lt;li&gt;Event Type&lt;/li&gt;
&lt;li&gt;Message Content&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;a href="https://github.com/line/line-bot-sdk-python#webhook-event-object"&gt;這裡&lt;/a&gt; 可以找到有哪些欄位&lt;/p&gt;
&lt;p&gt;這段 code 要取代上面的 &lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面三段 code 則要取代 &lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;parser 會 parse 所有的 event 跟各個 event 中的所有欄位&lt;br&gt;
如果 request 不是從 Line Server 來的，就會丟出 InvalidSignatureError&lt;br&gt;
其他使用錯誤，或 Line Server 的問題都會是丟出 LineBotApiError&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來要判斷收到的事件是什麼事件&lt;br&gt;
這個 Bot 只需要 echo 純文字訊息&lt;br&gt;
所以先判斷這個事件是不是訊息事件，而這個訊息是不是文字訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後的 &lt;code&gt;reply_message&lt;/code&gt; 函式，讓我們傳訊息給 Line Server&lt;br&gt;
第一個參數是要回傳要用的 reply_token，可以從事件中取得 （&lt;code&gt;event.reply_token&lt;/code&gt;）&lt;br&gt;
使用這個 reply_token 做回覆，是不用收費的&lt;br&gt;
不過同一個 reply_token 只能使用一次，而且在一定的時間內就會失效&lt;/p&gt;
&lt;p&gt;第二個參數是這次要回傳的訊息&lt;br&gt;
&lt;a href="https://github.com/line/line-bot-sdk-python#send-message-object"&gt;這裡&lt;/a&gt; 有所有能回傳的訊息&lt;br&gt;
也可以傳一個都是訊息的 list 或 tuple&lt;br&gt;
不過一次最多只能傳 5 個&lt;br&gt;
只要超過就會有 LineBotApiError&lt;/p&gt;
&lt;h4&gt;WebhookHandler&lt;/h4&gt;
&lt;p&gt;WebhookHandler 是針對每一種不同的訊息型態註冊一個處理器&lt;br&gt;
只要收到這樣的訊息，就會丟給對應的處理器&lt;br&gt;
如果確定每一類訊息，在任何情況下都會有相似的處理方式，就很適合這樣的設計&lt;/p&gt;
&lt;p&gt;接下來的三段 code 要取代 &lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先為 handler 加入，TextMessage 的處理器&lt;br&gt;
參數是接收到的 event&lt;br&gt;
這裡做的也是讀取到原本 event 中的文字，並回傳回去&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為沒有要處理其他訊息&lt;br&gt;
如果收到其他訊息 (e.g. 貼圖 , 照片 ) 或訊息以外的事件&lt;br&gt;
使用 default 來回傳 "Currently Not Support None Text Message" 的文字訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面的這段 code 是要取代 &lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;br&gt;
handler 判斷完這個訊息，應該被哪個處理器處理，就會傳給那個函式處理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Full Code&lt;/h4&gt;
&lt;p&gt;由於上面的 code 說明比較分散&lt;br&gt;
這裡附上兩個版本各自的完整版&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebhookParser&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookParser version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;WebhookHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookHandler version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到了這裡，echo bot 實作的部分就完成了&lt;/p&gt;
&lt;p&gt;&lt;a name='https-server'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="https-server-setup-your-domain-name"&gt;Https Server (Setup 'your domain name')&lt;/h2&gt;
&lt;p&gt;使用這些 Bot 的服務時，大多會要求我們一定要先有一個 Https Server&lt;br&gt;
除了自己架 Http Server 外，還透過其他服務，更方便我們做測試&lt;br&gt;
接下來我會分享兩種做法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;架在&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; ( 由於篇幅的關係，Heroku 會在接下來的文章談 )&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="ngrok"&gt;ngrok&lt;/h3&gt;
&lt;p&gt;ngrok 提供的服務是&lt;br&gt;
讓外部的訊息先經過 ngrok 的 server，ngrok 再將這個訊息傳給你的 server&lt;br&gt;
回傳時也是從你的 server 傳給 ngrok 的 server，再把訊息傳出去&lt;br&gt;
所以外部都只會看到 ngrok 的 server&lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok" src="https://ngrok.com/static/img/demo.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Install ngrok on mac&lt;/span&gt;
brew&lt;span class="w"&gt; &lt;/span&gt;cask&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ngrok
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先把 django 的 server run 起來&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3&lt;span class="w"&gt;  &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設 django 的 port 是 8000&lt;br&gt;
這裡並不需要使用 0.0.0.0:8000，讓外部可以連到這個 django server&lt;br&gt;
ngrok 會把 request 傳到 local 端相對應的 port&lt;/p&gt;
&lt;p&gt;接著就要用 ngrok 將 request 導到本地端的 port 8000&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ngrok&lt;span class="w"&gt; &lt;/span&gt;http&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1_ngrok_example" src="/images/posts-image/2016-11-24-line-echo-bot-on-django/r525wEI.png"&gt;&lt;/p&gt;
&lt;p&gt;再來到 Line Bot 的 &lt;code&gt;Line Developer&lt;/code&gt; 頁面設定 Webhook URL&lt;br&gt;
這時候填上 ngrok 後的 https 那串 url，再加上 &lt;code&gt;echobot/callback/&lt;/code&gt;( 我們設定的 callback url)&lt;br&gt;
(e.g. &lt;code&gt;https://2.....f.ngrok.io/echobot/callback/&lt;/code&gt;)&lt;br&gt;
&lt;img alt="2_webhook_url" src="/images/posts-image/2016-11-24-line-echo-bot-on-django/qVWlwoK.png"&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是我的 Webhook URL 下面有一個 &lt;code&gt;Read timeout.&lt;/code&gt;&lt;br&gt;
如果按了後面的 Verify，Line Server 會傳一些測試訊息過來&lt;br&gt;
但是那個 reply_token 是無法被回覆的&lt;br&gt;
這時候在 Server 就會丟出 LineBotApiError&lt;br&gt;
不過沒關係，這只是給我們檢查用的&lt;br&gt;
並沒有一定要通過才能使用 Line Bot&lt;/p&gt;
&lt;p&gt;這時候加 Bot 為好友，就可以開始跟它聊天了&lt;br&gt;
&lt;img alt="3_message_sample" src="/images/posts-image/2016-11-24-line-echo-bot-on-django/boxeHoG.png"&gt;&lt;/p&gt;
&lt;p&gt;如果你發現除了 echo 訊息外，還有其他的訊息&lt;br&gt;
可能就是沒有把 Atuo Reply Message 關掉&lt;br&gt;
這時候就可以去 Line Bot 的 &lt;code&gt;LINE@ Manger&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Settings&lt;/code&gt; → &lt;code&gt;Bot Settings&lt;/code&gt; 把它關掉&lt;br&gt;
或者到 &lt;code&gt;Messages&lt;/code&gt; → &lt;code&gt;Auto Reply Message&lt;/code&gt; 做修改訊息內容&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://studyhost.blogspot.tw/2016/10/line-messaging-api-line-bot-v2.html"&gt;新版 Line@ Messaging API 使用心得 (Line Bot v2)&lt;br&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jiunjiun.logdown.com/posts/2016/10/06/linebot-with-sinatra"&gt;LineBot - Sinatra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Django"></category><category term="Chat Bot"></category></entry><entry><title>Apply Line Messaging API</title><link href="https://blog.wei-lee.me/posts/tech/2016/11/apply-line-messaging-api" rel="alternate"></link><published>2016-11-22T12:43:00+08:00</published><updated>2016-11-22T12:43:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-11-22:/posts/tech/2016/11/apply-line-messaging-api</id><summary type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging API&lt;/a&gt; 申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用 Messaging API&lt;/code&gt; 和 &lt;code&gt;開始使用 Developer Trial&lt;/code&gt; 申請到的帳號是不同的&lt;br&gt;
之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
</summary><content type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging API&lt;/a&gt; 申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用 Messaging API&lt;/code&gt; 和 &lt;code&gt;開始使用 Developer Trial&lt;/code&gt; 申請到的帳號是不同的&lt;br&gt;
之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="1_messaging_api" src="/images/posts-image/2016-11-22-apply-line-messaging-api/3i3O1wO.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用 Messaging API&lt;/code&gt; 會申請免費版的帳號&lt;br&gt;
  之後可以選擇付費升級為入門版等更多功能的版本&lt;br&gt;
  主要拿來做正式發佈用的帳號&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用 Developer Trial&lt;/code&gt; 則是 Developer 的帳號&lt;br&gt;
  雖然一開始就能使用 Push API，但好友人數只有 50 人&lt;br&gt;
  如果還在開發階段，就適合辦這個帳號來測試&lt;br&gt;
  不過需要注意的是 developer 帳號，並不能接升級成一般帳號&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="2_price" src="/images/posts-image/2016-11-22-apply-line-messaging-api/FmTjOBH.png"&gt;&lt;/p&gt;
&lt;p&gt;再來會詢問業務類別，跟要求設定 Bot 名稱和照片&lt;br&gt;
&lt;img alt="3_apply_account" src="/images/posts-image/2016-11-22-apply-line-messaging-api/VdCT8JX.png"&gt;&lt;/p&gt;
&lt;p&gt;回到&lt;a href="https://business.line.me/zh-hant/"&gt;Line Business Center&lt;/a&gt; 的帳號清單&lt;br&gt;
就能看到帳號已經創好了&lt;br&gt;
&lt;img alt="4_success_apply" src="/images/posts-image/2016-11-22-apply-line-messaging-api/4ViJbIR.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;進入剛剛創好的帳號的 &lt;code&gt;LINE@ Manager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;頁面左上方，Bot 名稱下方&lt;br&gt;
@ 開頭的就是這個 Bot 的 id&lt;br&gt;
可以從 Line 輸入這個 id 加 Bot 為好友 （需加上 @）&lt;/p&gt;
&lt;p&gt;&lt;img alt="5_bot_page" src="/images/posts-image/2016-11-22-apply-line-messaging-api/8DC4TSG.png"&gt;&lt;/p&gt;
&lt;p&gt;接著到設定頁面左下方，找到 &lt;code&gt;Settings&lt;/code&gt;  → &lt;code&gt;Bot Settings&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;進入以下的畫面開啟 Messaging API&lt;br&gt;
&lt;img alt="6_bot_setting" src="/images/posts-image/2016-11-22-apply-line-messaging-api/BtaSwa5.png"&gt;&lt;/p&gt;
&lt;p&gt;開啟 Bot API 後，就會不能用以下三個功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-on-1 Chat&lt;/li&gt;
&lt;li&gt;LINE@ app&lt;/li&gt;
&lt;li&gt;Store Chat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之後會進到以下畫面&lt;br&gt;
記得要把 &lt;code&gt;Use webhooks&lt;/code&gt; 調成 &lt;code&gt;Allow&lt;/code&gt;&lt;br&gt;
才能把這個 Line Bot 串到自己的 server 上&lt;br&gt;
&lt;img alt="7_bot_webhook" src="/images/posts-image/2016-11-22-apply-line-messaging-api/yqpw3x7.png"&gt;&lt;/p&gt;
&lt;p&gt;往下拉可以看到更多的選項&lt;br&gt;
&lt;img alt="8_bot_detail" src="/images/posts-image/2016-11-22-apply-line-messaging-api/nKegbk6.png"&gt;&lt;br&gt;
如果不想要 Line 每次收到訊息都自動幫你回覆&lt;br&gt;
就要把 &lt;code&gt;Auto Reply Message&lt;/code&gt; 調成 &lt;code&gt;Don't Allow&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Greeting Message&lt;/code&gt; 則是，剛加 Bot 為好友時的歡迎詞&lt;/p&gt;
&lt;p&gt;如果有需要對這些訊息做設定&lt;br&gt;
都可以在左手邊選單的 &lt;code&gt;Messages&lt;/code&gt; 找到&lt;/p&gt;
&lt;p&gt;再回到帳號清單就會看到，帳號已經開通 Messaging API 了&lt;br&gt;
&lt;img alt="9_finish_all_setting" src="/images/posts-image/2016-11-22-apply-line-messaging-api/io9LuHs.png"&gt;&lt;/p&gt;
&lt;p&gt;進到 &lt;code&gt;LINE Developers&lt;/code&gt; 就能取得你的 Channel Secret 和 Channel Access Token 了&lt;br&gt;
（這些都是運用 Line Messaging API 會用到的）&lt;/p&gt;
&lt;p&gt;&lt;img alt="10_line_developers_page" src="/images/posts-image/2016-11-22-apply-line-messaging-api/cl8k3Mh.png"&gt;&lt;/p&gt;
&lt;p&gt;除了前面提到可以用 ID 加好友，也能透過這裡的 QR code&lt;/p&gt;
&lt;p&gt;另外要注意的是 &lt;code&gt;Webhook URL&lt;/code&gt;&lt;br&gt;
這裡之後要填的就是你的 Server 的 Webhook url&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.line.me/messaging-api/getting-started#apply_messagingapi"&gt;Enable the Messaging API for your LINE@ account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category></entry><entry><title>Introduction to Chatbot</title><link href="https://blog.wei-lee.me/posts/tech/2016/11/introduction-to-chatbot" rel="alternate"></link><published>2016-11-21T08:18:00+08:00</published><updated>2016-11-21T08:18:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-11-21:/posts/tech/2016/11/introduction-to-chatbot</id><summary type="html">&lt;p&gt;有人說聊天機器人 Chat Bot 將要取代 APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供 Bot 的服務&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有人說聊天機器人 Chat Bot 將要取代 APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供 Bot 的服務&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://messengerplatform.fb.com"&gt;Facebook Messenger Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.line.me/messaging-api/overview"&gt;Line Messaging API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.slack.com"&gt;Slack API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://core.telegram.org/bots/api"&gt;Telegram Bot Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-can-bot-do"&gt;What can Bot Do?&lt;/h2&gt;
&lt;p&gt;那 Chat Bot 究竟能幹嘛呢 ?&lt;/p&gt;
&lt;p&gt;先來看段影片吧&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=C7ZuzJe24y4"&gt;【公式】BOT &amp;amp; THE NEW WORLD by LINE&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;影片中出現了什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;預約餐廳&lt;/li&gt;
&lt;li&gt;訂車&lt;/li&gt;
&lt;li&gt;偵測 Beacon 提供 coupon&lt;/li&gt;
&lt;li&gt;遠端控制家中的 IoT 設備澆水&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本在 App 上處理的這些服務&lt;br&gt;
未來都有可能逐漸被 Chat Bot 所取代&lt;/p&gt;
&lt;h3 id="_2"&gt;背後發生了什麼事&lt;/h3&gt;
&lt;p&gt;e.g. 預約餐廳&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User 傳一個訊息給 Bot 的帳號&lt;/li&gt;
&lt;li&gt;Bot 把訊息傳給服務提供者的 Server&lt;/li&gt;
&lt;li&gt;服務提供者的 Server 把訊息，傳給指定的 Server&lt;/li&gt;
&lt;li&gt;指定的 Server 做了適當的運算和判斷，把結果回傳給服務提供者 Server&lt;/li&gt;
&lt;li&gt;服務提供者 Server 收到後，再傳給 User 的帳號&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;e.g. Line Chat Bot 架構&lt;br&gt;
&lt;img alt="Line Chat Bot Architect" src="https://developers.line.me/media/messaging-api/overview/messaging-api-architecture-ee0356bd.png"&gt;&lt;/p&gt;
&lt;h2 id="why-chat-bot"&gt;Why Chat Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;市面上 App 太多了，要開發使用者黏著度高的 App 很困難&lt;/li&gt;
&lt;li&gt;每一個 App 都有自己的介面，對使用者都是一次學習成本&lt;ul&gt;
&lt;li&gt;不如把服務嵌入現在使用者常用的 App&lt;br&gt;
  (e.g. Facebook Messenger, Line)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字是人類相對直覺的溝通方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-not-chat-bot"&gt;Why not Chat Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;設計彈性不如 App&lt;ul&gt;
&lt;li&gt;雖然 Chat Bot 大多提供按鍵等功能，但使用上的彈性不像 App 那麼大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字處理依然不夠好&lt;ul&gt;
&lt;li&gt;簡單的 Bot，如果使用者一直無法對應到相對的關鍵字，就無法觸發功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-design-a-bot"&gt;How to Design a Bot?&lt;/h2&gt;
&lt;p&gt;那麼開發一個 Bot 需要什麼呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;選擇使用的 Bot 平台 (e.g., Facebook Messenger Platform, Line Messaging API and etc.)&lt;/li&gt;
&lt;li&gt;寫一些服務 (e.g., 訂票、新聞推播)&lt;/li&gt;
&lt;li&gt;把服務架在一台 https server&lt;/li&gt;
&lt;li&gt;用 Bot 平台提供的 sdk，把 Server 跟平台串起來&lt;/li&gt;
&lt;li&gt;用 NLP 判斷使用者的意思，串接到服務上&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chatbot-platform-line-messaging-api"&gt;Chatbot Platform - Line Messaging API&lt;/h2&gt;
&lt;p&gt;既然看了 Line Bot 的新功能&lt;/p&gt;
&lt;p&gt;接下來的幾篇文章會談要如何在 Line 平台上&lt;br&gt;
做一個最簡單只會 Echo 的 Chat Bot&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;這篇文章整理了相當多的相關資源&lt;br&gt;
&lt;a href="https://stanfy.com/blog/the-rise-of-chat-bots-useful-links-articles-libraries-and-platforms/"&gt;The Rise of Chat Bots: Useful Links, Articles, Libraries and Platforms&lt;/a&gt;&lt;br&gt;
相當推薦對 ChatBot 有興趣的人參考&lt;/p&gt;
&lt;h2 id="slide"&gt;Slide&lt;/h2&gt;
&lt;p&gt;如果有點不喜歡看文章的，也可以看看&lt;a href="https://hackmd.io/p/HkW8LjRfl#/"&gt;slide&lt;/a&gt; 的版本&lt;/p&gt;</content><category term="Tech"></category><category term="Chat Bot"></category></entry><entry><title>[Paper] Mining Online Social Data for Detecting Social Network Mental Disorders</title><link href="https://blog.wei-lee.me/posts/tech/2016/11/mining-online-social-data-for-detecting-social-network-mental-disorders" rel="alternate"></link><published>2016-11-18T16:53:00+08:00</published><updated>2016-11-18T16:53:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-11-18:/posts/tech/2016/11/mining-online-social-data-for-detecting-social-network-mental-disorders</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www2016.net/proceedings/proceedings/p275.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/mining-online-social-data-for-detecting-social-network-mental-disorders"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This paper proposes a model named SNMDD to detect Social Network Mental Disorder (SNMD) through users' behaviors on online social networks (OSN) instead of asking their mental condition.&lt;/p&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www2016.net/proceedings/proceedings/p275.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/mining-online-social-data-for-detecting-social-network-mental-disorders"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This paper proposes a model named SNMDD to detect Social Network Mental Disorder (SNMD) through users' behaviors on online social networks (OSN) instead of asking their mental condition.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;In addition, multi-source learning (FB and IG) is used to improve performance through STM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SNMDD is a classification model based on TSVM&lt;br&gt;
The use of domain knowledge from psychology to extract features is the core of this model.&lt;br&gt;
The most interesting part is choosing features as the proxy features to replace ones that are hard to detect.&lt;br&gt;
For example, distinguishing whether a social capital is a strong tie or a weak tie is crucial to the detection of SNMD. However, it's hard to detect through OSNs data. Thus, it guesses that friends you interacts (e.g. posts, likes, comments) with might be the strong tie ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STM is a tensor model based on Tucker Decomposition&lt;br&gt;
Through Tucker Decomposition, it's possible to combine data from different sources and extract new features vectors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Social Network"></category><category term="Machine Learning"></category></entry><entry><title>COSCUP 2016 小啄如何實作的</title><link href="https://blog.wei-lee.me/posts/tech/2016/10/coscup-2016-how-to-implement-small-pecks" rel="alternate"></link><published>2016-10-01T11:50:00+08:00</published><updated>2016-10-01T11:50:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-10-01:/posts/tech/2016/10/coscup-2016-how-to-implement-small-pecks</id><summary type="html">&lt;p&gt;今年 COSCUP 的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下 XD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年 COSCUP 的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下 XD&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;總結&lt;/h2&gt;
&lt;h3 id="_2"&gt;技術相關&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要用 Python 開發&lt;/li&gt;
&lt;li&gt;使用 Flask + Gunicorn + Nginx，達到系統輕量化與多執行緒&lt;/li&gt;
&lt;li&gt;用 redis 作為文本儲存，SQL Injection 無效&lt;/li&gt;
&lt;li&gt;後台文本管理使用 google sheet&lt;ul&gt;
&lt;li&gt;使用 Python 的&lt;a href="https://github.com/burnash/gspread"&gt;gspred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文案編輯完後，對 bot 下同步指令，將 google sheet 資料更新到後端資料庫&lt;/li&gt;
&lt;li&gt;跟吃飯喝水一樣簡單，連麻瓜劇本管理員都會用（？？？？？？）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://wit.ai/home"&gt;wit.ai&lt;/a&gt; （這是我直接問開發者的，不是小啄回答的）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;小啄回覆的原文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，透過 Python 的 gspread 套件進行溝通；當文案編輯完畢後，對 bot 下同步指令，後端就會透過 gspread 將 google sheet 的資料同步到後端資料庫唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！&lt;br&gt;
    真的超簡單的，連麻瓜劇本管理員都會用！（麻瓜忍不住一定要再說一次）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用的佈署環境是 Flask + Gunicorn + Nginx 的組合，藉此達成系統輕量化與多執行緒的接收訊息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用 redis 作為文本儲存系統，因此不要再試著 SQL Injection 喇，這是沒用的!!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄是採用 Python 做為主要的程式語言開發喔，因應短暫兩個禮拜的開發時間，可以快速建置的 Python 成為最佳選項！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄開發團隊核心人物有 4+1 個：三個寫扣手，一個文案小編，一個文案小編的助理．我們白天都有正職！文案小編和文案小編的助理是程式麻瓜&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你知道後台文本管理的劇本是怎麼產生出來的嗎？是劇本管理員在夜深人靜、抱著電腦想著所有使用者可能在使用中遇到哪些問題，套用哪些回應可以又好笑又不無聊、絞盡腦汁想出來的；也因此好幾天發現窗外鳥兒演唱會都在清晨五點左右開唱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你有選英文模式小啄嗎？真抱歉人力不足，沒有能力提供好笑有趣的回饋讓大家使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(舉起誠實樹) 因為缺乏英文小編寫幽默風趣的回饋，所以團隊人員最後放棄英文幽默版小啄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @LINE 開發時程只有兩週，要申請正式帳號前須到 LINE 本部進行 DEMO，當時大會還有些 API 沒開好、攤位集點巔峰賽還沒有畫好圖。嚴格說起來是大會團隊在忙其他緊急事件延遲了 BOT 開發時程，請大家多包容唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @LINE 上線前需要經過 LINE 內部審核，然後才會投單到日本總部申請上限；內部審核當天其實有些功能還沒做完啊啊啊啊啊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很可惜今年閃電秀沒有 COSCUP LINE BOT 的分享；而實際上我們是有報名的，只是沒有被抽到 QQ，想在明年看到團隊在議程上分享秘辛，請用力回饋：明年想看 小啄 @LINE 分享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開發團隊有報名閃電秀，可惜沒有被抽到，想進一步鼓勵團隊明年投稿，歡迎用力回饋：明年想看 小啄 @LINE 分享&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="COSCUP"></category><category term="Chat Bot"></category></entry><entry><title>Basic Git Tutorial</title><link href="https://blog.wei-lee.me/posts/tech/2016/09/basic-git-tutorial" rel="alternate"></link><published>2016-09-16T15:41:00+08:00</published><updated>2016-09-16T15:41:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-09-16:/posts/tech/2016/09/basic-git-tutorial</id><summary type="html">&lt;p&gt;最近終於下定決定把很久以前的這份&lt;a href="https://blog.wei-lee.me/posts/tech/2014/02/git-and-git-hub"&gt;Git and GitHub&lt;/a&gt; 改版了&lt;br&gt;
聽說這份在我進實驗室前，就已經被不想教大家 Git 的學長拿去流傳 ...&lt;/p&gt;
&lt;p&gt;新版： &lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;Git Tutorial&lt;/a&gt;&lt;br&gt;
</summary><content type="html">&lt;p&gt;最近終於下定決定把很久以前的這份&lt;a href="https://blog.wei-lee.me/posts/tech/2014/02/git-and-git-hub"&gt;Git and GitHub&lt;/a&gt; 改版了&lt;br&gt;
聽說這份在我進實驗室前，就已經被不想教大家 Git 的學長拿去流傳 ...&lt;/p&gt;
&lt;p&gt;新版： &lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;Git Tutorial&lt;/a&gt;&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;新版主要加了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何寫好 commit&lt;/li&gt;
&lt;li&gt;tag&lt;/li&gt;
&lt;li&gt;stash&lt;/li&gt;
&lt;li&gt;rebase&lt;/li&gt;
&lt;li&gt;submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還有各種我這些年開發上有用到的 Git 功能&lt;br&gt;
順便來練習一直想學的 reveal.js&lt;/p&gt;
&lt;p&gt;因為用了 external.js，一開始 load 的時間會稍微久一點&lt;/p&gt;</content><category term="Tech"></category><category term="Git"></category><category term="Tutorial"></category></entry><entry><title>Using GitHub to Develop Software Collaboratively</title><link href="https://blog.wei-lee.me/posts/tech/2016/09/using-github-to-develop-software-collaboratively" rel="alternate"></link><published>2016-09-15T01:26:00+08:00</published><updated>2016-09-15T01:26:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-09-15:/posts/tech/2016/09/using-github-to-develop-software-collaboratively</id><summary type="html">&lt;p&gt;這是兩年前 GitHub 來成大教育課程的筆記&lt;br&gt;
最近在整理 git 的筆記才翻出來&lt;br&gt;
因為當時是以英文進行，課程筆記就也用英文做了&lt;br&gt;
這篇的內容可能比較雜亂，之後還會再整理進另一篇 git 的筆記&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這是兩年前 GitHub 來成大教育課程的筆記&lt;br&gt;
最近在整理 git 的筆記才翻出來&lt;br&gt;
因為當時是以英文進行，課程筆記就也用英文做了&lt;br&gt;
這篇的內容可能比較雜亂，之後還會再整理進另一篇 git 的筆記&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction-to-git-hub-company"&gt;Introduction to Git Hub (Company)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git"&gt;Git&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-version-control"&gt;Why version control?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tutorial"&gt;Tutorial&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#diff"&gt;diff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#branch"&gt;branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#log"&gt;log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#github"&gt;GitHub&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#push"&gt;push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pull"&gt;pull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#difference-between-fetch-and-pull"&gt;difference between fetch and pull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-site"&gt;on-site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-write-a-good-git-commit"&gt;How to write a good git commit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#principle"&gt;Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-specific"&gt;More specific&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-issue"&gt;Other issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="introduction-to-git-hub-company"&gt;Introduction to Git Hub (Company)&lt;/h2&gt;
&lt;p&gt;There are around 2600 staffs in GitHub and 40% of them live in San Fransisco.&lt;br&gt;
Among them, there is one Taiwanese.&lt;/p&gt;
&lt;h2 id="git"&gt;Git&lt;/h2&gt;
&lt;p&gt;Wrote by Linus Torvalds.&lt;/p&gt;
&lt;h3 id="why-version-control"&gt;Why version control?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Historical propose&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;.git&lt;/code&gt; is just a folder with normal file&lt;br&gt;
There is no daemon or background progress&lt;br&gt;
Everything is operated in file&lt;br&gt;
Never &lt;code&gt;rm -rf .git&lt;/code&gt; XD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;stauts
touch&lt;span class="w"&gt; &lt;/span&gt;README.mdd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are three main stages&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;working&lt;/li&gt;
&lt;li&gt;staging&lt;/li&gt;
&lt;li&gt;repo&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stage&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Stage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;working&lt;/td&gt;
&lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;&lt;code&gt;commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;working&lt;/td&gt;
&lt;td&gt;←&lt;/td&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we're ready&lt;br&gt;
&lt;code&gt;git commit -m "add a blank commit"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After README.md is modified&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;README.md
git&lt;span class="w"&gt; &lt;/span&gt;status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now this file is in staging area&lt;/p&gt;
&lt;p&gt;So, how to go back to history?&lt;br&gt;
&lt;code&gt;git reset README.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Take a look at our history&lt;br&gt;
&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go back to history&lt;br&gt;
&lt;code&gt;git checkout "SHA1"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;br&gt;
Everything comes back&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the default branch name of git. It is a default word but not reserved.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b "branch_name"&lt;/code&gt; create a branch and checkout to it&lt;/p&gt;
&lt;h3 id="diff"&gt;diff&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt;: View the difference between working and staging&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff --staged&lt;/code&gt;: Difference between staging and repo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff "SHA1"&lt;/code&gt;: Difference between current version and SHA1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff master~1&lt;/code&gt;: difference between current and the one before master&lt;br&gt;
&lt;code&gt;git diff master^&lt;/code&gt; → master~1&lt;br&gt;
&lt;code&gt;git diff master^^&lt;/code&gt; → master~2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff a b&lt;/code&gt;: Show the change from a to b&lt;/p&gt;
&lt;h3 id="branch"&gt;branch&lt;/h3&gt;
&lt;p&gt;In git, branch is not copy. It's like bookmark&lt;br&gt;
Actually &lt;code&gt;git branch -d "name"&lt;/code&gt; just delete the pointer but not the entry.&lt;/p&gt;
&lt;p&gt;HEAD: the pointer points to current entry&lt;/p&gt;
&lt;h4&gt;detach error&lt;/h4&gt;
&lt;p&gt;If you go back to a entry not in certain branch, a detach error might occur.&lt;br&gt;
For example, checkout to a commit that is parent of more than one branch and then append a new commit to it.&lt;br&gt;
In such case, this new appended commit might not be able to be referenced.&lt;br&gt;
&lt;em&gt;The solution to this problem is to create a new branch for it.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="log"&gt;log&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git log --decorate&lt;/code&gt;: Show also branch info&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --all&lt;/code&gt;: Show all branch&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --graph&lt;/code&gt;: Show graph&lt;/p&gt;
&lt;h4&gt;The difference between log and show&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;: Only the first line&lt;br&gt;
&lt;code&gt;git show&lt;/code&gt;: All the message, not only the first line&lt;/p&gt;
&lt;h2 id="github"&gt;GitHub&lt;/h2&gt;
&lt;h3 id="push"&gt;push&lt;/h3&gt;
&lt;p&gt;origin is a short hand name of that remote url. In other word, your repo.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upload &lt;em&gt;master&lt;/em&gt; to &lt;em&gt;origin&lt;/em&gt;&lt;br&gt;
8 -u tell git the default url to push for that branch(master) is origin, it would also make &lt;code&gt;git pull&lt;/code&gt; remember&lt;ul&gt;
&lt;li&gt;Do &lt;code&gt;-u&lt;/code&gt; and after that you can just use &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pull"&gt;pull&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git push --all&lt;/code&gt;: push all branch&lt;br&gt;
&lt;code&gt;git pull --prune&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="difference-between-fetch-and-pull"&gt;difference between fetch and pull&lt;/h3&gt;
&lt;p&gt;git fetch : go to remote and copy it&lt;br&gt;
git pull → fetch + merge&lt;/p&gt;
&lt;h3 id="on-site"&gt;on-site&lt;/h3&gt;
&lt;p&gt;pull request on GitHub&lt;br&gt;
&lt;code&gt;@person-name&lt;/code&gt; → notification&lt;br&gt;
Have a conversation with the whole team&lt;/p&gt;
&lt;p&gt;Write "fix #2 ...." in git commit → special meaning → specify the bug in issue on GitHub&lt;br&gt;
Wiki → documentation&lt;/p&gt;
&lt;h2 id="how-to-write-a-good-git-commit"&gt;How to write a good git commit&lt;/h2&gt;
&lt;h3 id="principle"&gt;Principle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Separate each commit&lt;/li&gt;
&lt;li&gt;Let the commit tell a story&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="more-specific"&gt;More specific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One line 80 character&lt;/li&gt;
&lt;li&gt;Use present tense instead of past tense&lt;/li&gt;
&lt;li&gt;Don't repeat what can be found in &lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If more detail is to be written, left the second line to be blank.&lt;/li&gt;
&lt;li&gt;Write more detail about why this change happened after the third line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-issue"&gt;Other issue&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git config --global -e&lt;/code&gt;: Edit your .gitconfig file.&lt;/p&gt;
&lt;p&gt;Not include binary files and executable&lt;br&gt;
Don't version control these kinds of files.&lt;br&gt;
Also, large files are not recommended to add to git.&lt;br&gt;
If it's needed, try &lt;code&gt;git-annex&lt;/code&gt;(web-site).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git revert "SHA1"&lt;/code&gt; → save another entry of undo&lt;/p&gt;
&lt;p&gt;If you commit the password → &lt;code&gt;git rebase&lt;/code&gt; can change commit, but it is not that recommended.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; create a sub-module&lt;/p&gt;</content><category term="Tech"></category><category term="Git"></category><category term="GitHub"></category></entry><entry><title>[Paper] A Learning-based Framework to Handle Multi-round Multi-party Influence Maximization on Social Networks</title><link href="https://blog.wei-lee.me/posts/tech/2016/08/a-learning-based-framework-to-handle-multi-round-multi-party-inflence-maximization-on-social-networks" rel="alternate"></link><published>2016-08-22T16:53:00+08:00</published><updated>2016-08-22T16:53:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-08-22:/posts/tech/2016/08/a-learning-based-framework-to-handle-multi-round-multi-party-inflence-maximization-on-social-networks</id><summary type="html">&lt;p&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=2783392"&gt;Paper&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=2783392"&gt;Paper&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-introduction"&gt;1. Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#difference-with-others"&gt;Difference with Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-problem-statement"&gt;2. Problem Statement&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#def-1-competitive-linear-threshold-clt"&gt;Def 1: Competitive Linear Threshold (CLT)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#def-2-multi-round-competitive-influence-maximization-mrcim"&gt;Def 2: Multi-Round Competitive Influence Maximization (MRCIM)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-methodology"&gt;4. Methodology&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#41-preliminary-reinforcement-learning"&gt;4.1 Preliminary: Reinforcement Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#42-strategy-oriented-reinforcement-learning"&gt;4.2 Strategy-Oriented Reinforcement-Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#43-storm-with-strategy-known"&gt;4.3 STORM with Strategy Known&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#44-storm-with-strategy-unknown"&gt;4.4 STORM with Strategy Unknown&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#unknown-but-available-to-train"&gt;Unknown but available to train&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unknown"&gt;Unknown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="1-introduction"&gt;1. Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Problem Description&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A company intends to select a small set of customers to distribute praises of their trial products to a larger group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Influence maximization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal: Identify a small subset of seed nodes that have the best chance to influence the most number of nodes&lt;/li&gt;
&lt;li&gt;Competitive Influence Maximization (CIM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assumption&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Influence is exclusive (Once a node is influenced by one party, it will not be influenced again)&lt;/li&gt;
&lt;li&gt;Each round all parties choose one node and then the influence propagates before the next round starts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STORM (STrategy-Oriented Reinforcement-Learning based influence Maximization) performs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Generation&lt;ul&gt;
&lt;li&gt;the data, which is the experience generated through simulation by applying the current model, will become the feedbacks to refine the model for better performance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="difference-with-others"&gt;Difference with Others&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Known strategy → Both know and unknown&lt;ul&gt;
&lt;li&gt;Known or Unknown but available to compete → Train a model to learn strategy&lt;/li&gt;
&lt;li&gt;Unknown → Game-theoretical solution to seek the Nash equilibrium&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single-roung → Multi-round&lt;/li&gt;
&lt;li&gt;Model driven → learning-based, data-drivern&lt;/li&gt;
&lt;li&gt;Not considering different network topology → General to adapt both opponent's strategy and environment setting (e.g. underlying network topology)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="2-problem-statement"&gt;2. Problem Statement&lt;/h2&gt;
&lt;h3 id="def-1-competitive-linear-threshold-clt"&gt;Def 1: Competitive Linear Threshold (CLT)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CLT model is a multi-party diffusion model&lt;/li&gt;
&lt;li&gt;The party who has the highest influence occupied the node&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="def-2-multi-round-competitive-influence-maximization-mrcim"&gt;Def 2: Multi-Round Competitive Influence Maximization (MRCIM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Max its overall relative influence&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-methodology"&gt;4. Methodology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NP-hardness of MRCIM → looks for approxmiate solution&lt;/li&gt;
&lt;li&gt;Max the inflence for each round does not guarantee overall max&lt;ul&gt;
&lt;li&gt;Due to the fact that each round are not independent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="41-preliminary-reinforcement-learning"&gt;4.1 Preliminary: Reinforcement Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn a policy &lt;span class="math"&gt;\(\pi(s)\)&lt;/span&gt; to determine which action to take state s (environment)&lt;/li&gt;
&lt;li&gt;How to estimated &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;?&lt;ul&gt;
&lt;li&gt;Expected Accmulated Reward of a state (V function)&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\( V^\pi(s) = E_\pi\{R_t|S_t=s\}=...\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expected Accmulated Reward of a state-action pair (Q function)&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\( Q^\pi(s, a) = E_\pi\{R_t|S_t=s, a_t=a\}=...\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The optimal &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; can be obtained through Q functinon&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\( \pi = \arg \min_{a\in A}Q(s,a)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(i.e. For all "a" in A, find the "a" such that min Q(s, a))&lt;/p&gt;
&lt;h3 id="42-strategy-oriented-reinforcement-learning"&gt;4.2 Strategy-Oriented Reinforcement-Learning&lt;/h3&gt;
&lt;h4&gt;Setup&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Env&lt;ul&gt;
&lt;li&gt;Influence propagation process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reward&lt;ul&gt;
&lt;li&gt;Delay Reward: The difference of activated nodes between parties at the last round&lt;ul&gt;
&lt;li&gt;After the last round, rewards are propagated to the previous states through Q-function updating&lt;/li&gt;
&lt;li&gt;Slow but more accurate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Action&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Choosing certain node to activate&lt;/del&gt;&lt;ul&gt;
&lt;li&gt;too many&lt;/li&gt;
&lt;li&gt;overfit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single Party IM strategies&lt;ul&gt;
&lt;li&gt;Namely, which strategy to choose given the current state&lt;/li&gt;
&lt;li&gt;The size can be reduced to strategies chosen&lt;/li&gt;
&lt;li&gt;Chosen Strategies&lt;ul&gt;
&lt;li&gt;sub-greedy&lt;/li&gt;
&lt;li&gt;degree-first&lt;/li&gt;
&lt;li&gt;block&lt;/li&gt;
&lt;li&gt;max-weight&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State&lt;ul&gt;
&lt;li&gt;Represents&lt;ul&gt;
&lt;li&gt;network&lt;/li&gt;
&lt;li&gt;environment status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;record the occupation status of all nodes&lt;/del&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(3^{|V|}\)&lt;/span&gt;, too many&lt;/li&gt;
&lt;li&gt;overfit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Features Designed&lt;ul&gt;
&lt;li&gt;Number of free nodes&lt;/li&gt;
&lt;li&gt;Sum of degrees of all nodes&lt;/li&gt;
&lt;li&gt;Sum of weight of the edges for which bot h vertices are free&lt;/li&gt;
&lt;li&gt;Max degree among all free nodes&lt;/li&gt;
&lt;li&gt;Max sum of free out-edge weight of a node among nodes which are the first player's neighbors&lt;/li&gt;
&lt;li&gt;Second player's&lt;/li&gt;
&lt;li&gt;Max activated nodes of a node for the first player alter two rounds of influence propagation&lt;/li&gt;
&lt;li&gt;Second player's&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The feautres are quantize into&lt;ul&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;medium&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Totally, &lt;span class="math"&gt;\(3^9\)&lt;/span&gt; states&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Data For Training&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Propagation model is known (e.g. LT in the experiments)&lt;/li&gt;
&lt;li&gt;Strategies served as actions are predefined&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In training phase, train the agent against a certain strategy and see how it performs on the given network&lt;br&gt;
These data can be used to learn the value functions&lt;/p&gt;
&lt;h4&gt;Training Against Opponents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Opponent Strategy&lt;ul&gt;
&lt;li&gt;Known: Simulate the strategy during training&lt;/li&gt;
&lt;li&gt;Unknown but available during training: Same as above&lt;/li&gt;
&lt;li&gt;Unknown: More General Model in 4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Phase&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Phase 1: Training&lt;ul&gt;
&lt;li&gt;The agent update its Q function from the simulation experiences throughout the training rounds&lt;/li&gt;
&lt;li&gt;Update &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; in the meantime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phase 2: Competition&lt;ul&gt;
&lt;li&gt;The agent would not update Q-table&lt;/li&gt;
&lt;li&gt;Generates &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; according to Q-table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="43-storm-with-strategy-known"&gt;4.3 STORM with Strategy Known&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Training the model compete against the strategy to learn &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;STORM-Q&lt;ul&gt;
&lt;li&gt;Update Q-function following the concept of Q-learning&lt;ul&gt;
&lt;li&gt;Q-Learning: &lt;span class="math"&gt;\(Q(S_t, a_t) = Q(S_t, a_t) + \alpha * (r_{t+1} + \gamma * max_{a}Q(S_{t+1}, a) -Q(S_t, a_t))\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\epsilon\)&lt;/span&gt;-greedy&lt;ul&gt;
&lt;li&gt;Determine strategies on the current policy derived from Q-table.&lt;/li&gt;
&lt;li&gt;Explore the new directions to avoid local optimum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pure Strategy&lt;ul&gt;
&lt;li&gt;The most likely strategy is chosen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ Algorithm $&lt;/p&gt;
&lt;h2 id="44-storm-with-strategy-unknown"&gt;4.4 STORM with Strategy Unknown&lt;/h2&gt;
&lt;h3 id="unknown-but-available-to-train"&gt;Unknown but available to train&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The differece between the known case is that experience cannot be obtained through simulation&lt;/li&gt;
&lt;li&gt;Train against unknown opponent's strategy during competition&lt;ul&gt;
&lt;li&gt;It's feasible because STORM-Q only needs to know the seed-selection outcoms of the opponent to update the Q-table, not exact strategy it takes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unknown"&gt;Unknown&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Goal: Create a general model to compete a variety of rational strategies&lt;/li&gt;
&lt;li&gt;Assumption: The oppoent is rational (Wants to max influence and knows its oppoent wants so)&lt;/li&gt;
&lt;li&gt;STORM-QQ&lt;ul&gt;
&lt;li&gt;Two STROM-Q compete and update Q-tabale at the same time&lt;/li&gt;
&lt;li&gt;Using current Q-table during training phase&lt;/li&gt;
&lt;li&gt;Pure Strategy&lt;ul&gt;
&lt;li&gt;Does Not guarantee that equilibrium exists in MRCIM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STORM-MM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mix Strategy (Samples an action from the distribution of actions in each state)&lt;/li&gt;
&lt;li&gt;In two-player zero-sum game&lt;ul&gt;
&lt;li&gt;Nash equilibrium is graranteed to exist with miexed strategies&lt;/li&gt;
&lt;li&gt;Use MINMAX theorem to find the equilibrium&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(Q(s, a, o)\)&lt;/span&gt;: The reward of first party when using strategy &lt;span class="math"&gt;\(a\)&lt;/span&gt; against oppoent's strategy &lt;span class="math"&gt;\(o\)&lt;/span&gt; in state &lt;span class="math"&gt;\(s\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(Q_{t+1}(s_t, a_t, o_t) = (1-\alpha)Q_t(s_t, a_t, o_t)+\alpha[r_{t+1}+\gamma V(s_{t+1})]\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Operations  Research&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The differece between STROM-QQ and STORM-MM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;STROM-QQ&lt;/th&gt;
&lt;th&gt;STROM-MM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Max the reward in their own Q-table&lt;/td&gt;
&lt;td&gt;Finds equilibrium with one Q-table and determines both side's &lt;span class="math"&gt;\(a\)&lt;/span&gt; at the same time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pure Strategies&lt;/td&gt;
&lt;td&gt;Mixed Strategies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Choose strategy by greedy&lt;/td&gt;
&lt;td&gt;Samples from the mixed strategy &lt;span class="math"&gt;\(\pi_a\)&lt;/span&gt; or &lt;span class="math"&gt;\(\pi_o\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Ideally, they should have similar result in two-party MRCIM. In practice, the result might not due to&lt;ul&gt;
&lt;li&gt;STORM-QQ does not guarantee equilibrium&lt;/li&gt;
&lt;li&gt;Although equilibrium exists in STORM-MM. It does not guarantee to be found due to lack of training data or bad init or such problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Social Network"></category><category term="Machine Learning"></category><category term="Game Theory"></category></entry><entry><title>COSCUP 2016</title><link href="https://blog.wei-lee.me/posts/tech/2016/08/coscup-2016" rel="alternate"></link><published>2016-08-22T15:36:00+08:00</published><updated>2016-08-22T15:36:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-08-22:/posts/tech/2016/08/coscup-2016</id><summary type="html">&lt;p&gt;&lt;a href="http://beta.hackfoldr.org/coscup2016/"&gt;hackholder 共筆&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://beta.hackfoldr.org/coscup2016/"&gt;hackholder 共筆&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="day1"&gt;Day1&lt;/h2&gt;
&lt;h3 id="r"&gt;R 語言翻轉教室簡介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why R ？&lt;ul&gt;
&lt;li&gt;統計人多用 R，所以最新的統計演算法，最可能最早被實作在 R 上&lt;/li&gt;
&lt;li&gt;R 套件的易開發性&lt;/li&gt;
&lt;li&gt;易讓非工程背景者上手&lt;/li&gt;
&lt;li&gt;先進的視覺化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;教 or 學 R 的挑戰&lt;ul&gt;
&lt;li&gt;函數名稱不一致&lt;/li&gt;
&lt;li&gt;同樣的方法可以用太多方式達成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/R_Language/index.html"&gt;PTT R 版&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;聽說對新手很友善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascienceandr.org"&gt;R 語言翻轉教室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python-rpi"&gt;開源軟硬體實做全套電子鼓 (python + RPi)&lt;/h3&gt;
&lt;p&gt;第一場在中研院的演場會 (?)&lt;br&gt;
我到的時候就差不多在&lt;a href="https://www.youtube.com/watch?v=WZMPEVGUpgg&amp;amp;t=29m50s"&gt;live demo&lt;/a&gt; 了&lt;br&gt;
算是剛好沒錯過精彩的部份 XD&lt;/p&gt;
&lt;h3 id="_1"&gt;商業公司如何建立開發者生態系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;B2D(Business to Developere)&lt;/li&gt;
&lt;li&gt;Open Source 跟 Open API，對於商業公司來說有什麼價值&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Open Source&lt;/th&gt;
&lt;th&gt;OpenAPI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;開放程式碼&lt;/td&gt;
&lt;td&gt;開放呼叫功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read/Write model&lt;/td&gt;
&lt;td&gt;Read-Only model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;貢獻者社群&lt;/td&gt;
&lt;td&gt;使用者社群&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;產業聯盟 → 產業標準&lt;/td&gt;
&lt;td&gt;相互競爭 → 寡佔市場&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外比較有趣的是&lt;br&gt;
華為有個部門就是專門在預測未來哪種 Open Source 會火&lt;br&gt;
作為下一個貢獻的 Open Source 專案&lt;br&gt;
早期投入那項技術&lt;/p&gt;
&lt;h3 id="_2"&gt;自己的樂器自己做：第一把開放硬體設計的電烏克麗麗&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ukulele.design/tw/"&gt;閃電麗麗&lt;/a&gt;&lt;br&gt;
之所以閃電麗麗這麼不像一般的烏克麗麗&lt;br&gt;
是因為一般 3D 印表機，印不了那麼長&lt;br&gt;
講者有提到他如何去構思該做出怎樣的改變，才有辦法符合 3D 印表機的限制&lt;br&gt;
好像是弦要到那樣的長度才能剛好發出烏克麗麗的聲音&lt;br&gt;
其他的部分就能改用不同的方式取代，不用受限於制式的樣式&lt;br&gt;
於是閃電麗麗就誕生了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="day2"&gt;Day2&lt;/h2&gt;
&lt;h3 id="opensource-5g"&gt;Opensource 將如何對第五代行動通訊 (5G) 造成革命性的改變&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4G 到 5G 的改變&lt;ul&gt;
&lt;li&gt;使網路能以軟體的速度成長，而非硬體的速度&lt;ul&gt;
&lt;li&gt;將以往綁在硬體商的部分虛擬化&lt;ul&gt;
&lt;li&gt;SDN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NFV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讓各種不同的服務可以有各自不同需求的網路特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/ChiahanWu/opensource5g?ref=http://www.slideshare.net/ChiahanWu/slideshelf"&gt;講者的 slideshare&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="debater"&gt;Debater 辯論家：網路筆戰大亂鬥&lt;/h2&gt;
&lt;p&gt;講者直接在 hackpad 寫她不會脫稿演出，可以直接看&lt;a href="https://docs.google.com/presentation/d/1RxJxZ_HAWZkDNIy9y2UZPZ3M7oNIxcdLJd6UzIO9egc/edit"&gt;投影片 + Note&lt;/a&gt;&lt;br&gt;
所以我就也放她的連結就好 XD&lt;/p&gt;
&lt;p&gt;講者有提到&lt;a href="https://hackmd.io"&gt;HackMD&lt;/a&gt;&lt;br&gt;
主要是用來 Markdown 協作&lt;br&gt;
之前一直覺得 Hackpad 的 Markdown support 沒有很好&lt;br&gt;
終於有人做出這個東西了 XD&lt;/p&gt;
&lt;h2 id="_3"&gt;開放公司文化之下的軟體開發 / 如何用開源軟體賺錢？&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;找到使用者的痛，解決他
如果其中部份剛好有開源軟體可用，算你撿到的
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;我們如何用開源軟體&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;觀察客戶要甚麼&lt;/li&gt;
&lt;li&gt;加上重要功能，甚至比原來的軟體還大&lt;/li&gt;
&lt;li&gt;願意自己重寫&lt;/li&gt;
&lt;li&gt;甚至徹底改變商業模式&lt;/li&gt;
&lt;li&gt;建置世界級的大系統&lt;/li&gt;
&lt;li&gt;注重使用者體驗&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lightning"&gt;Lightning&lt;/h2&gt;
&lt;p&gt;今年 Lightning 也有很多有趣的主題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MRT &amp;amp; GIT&lt;ul&gt;
&lt;li&gt;用 git branch 來畫台北捷運的路線圖&lt;ul&gt;
&lt;li&gt;不要亂玩 git branch 啊 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/othree/taipei-mrt/network"&gt;othree/taipei-mrt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;徵音梅林新歌發表&lt;ul&gt;
&lt;li&gt;講者完全沒說到話，真的就是新歌發表到三分鐘結束 XD&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=daAI2agxzs0"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;今年的&lt;a href="http://beta.hackfoldr.org/coscup2016/https%253A%252F%252Fhackpad.com%252FCOSCUP2016-5wENY4uxqSX"&gt;COSCUP2016 梗全集&lt;/a&gt;，還蠻有趣的 XD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="COSCUP"></category></entry><entry><title>Scrollable RISE</title><link href="https://blog.wei-lee.me/posts/tech/2016/08/scrollable-rise" rel="alternate"></link><published>2016-08-15T03:22:00+08:00</published><updated>2016-08-15T03:22:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-08-15:/posts/tech/2016/08/scrollable-rise</id><summary type="html">&lt;p&gt;RISE 是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt; 和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt; 的專案&lt;br&gt;
讓我們能在 jupyter notebook 直接開啟如同 reveal.js 的 slide&lt;/p&gt;
</summary><content type="html">&lt;p&gt;RISE 是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt; 和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt; 的專案&lt;br&gt;
讓我們能在 jupyter notebook 直接開啟如同 reveal.js 的 slide&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;不過如過 notebook cell 中的內容太長&lt;br&gt;
在播放的時候就會導致內容被裁剪&lt;br&gt;
而 RISE 預設是無法用滑鼠滾動的&lt;br&gt;
所以這裡記錄該如何讓 RISE 可以滾動&lt;/p&gt;
&lt;p&gt;進入 jupyter notebook 的任一個 notebook 後&lt;br&gt;
在上方工具列點選 &lt;code&gt;Edit&lt;/code&gt; → &lt;code&gt;Edit Notebook Metadata&lt;/code&gt;&lt;br&gt;
接著在裡面加入 livereveal 的設定&lt;br&gt;
如下 （只需加入 livereveal 的部分）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;kernelspec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;livereveal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;scroll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;不過開發者其實有說，開啟滾動會造成不少問題&lt;br&gt;
所以預設上才會設定為不能滾動&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;damianavila commented on Jul 12&lt;/strong&gt;&lt;br&gt;
After several and long discussions with a lot of people, we have arrived to the conclusion that scrolling on reveal.js based slideshows brings more problems than benefits, so I will not add the scrolling as a default option BUT we should clearly document how to get scrolling slides with the config option available. I will mark this as a docs issue and prioritize properly.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/damianavila/RISE/issues/185"&gt;scrolling vertically #185&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Jupyter"></category><category term="reveal.js"></category></entry><entry><title>解決更新 gcc 找不到 libgfortran.3.dylib (Octave,R)</title><link href="https://blog.wei-lee.me/posts/tech/2016/06/solve-libgfortran3dylib-not-found" rel="alternate"></link><published>2016-06-11T03:13:00+08:00</published><updated>2016-06-11T03:13:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-06-11:/posts/tech/2016/06/solve-libgfortran3dylib-not-found</id><summary type="html">&lt;p&gt;最近在 mac 上更新了 gcc 6 後，不管是開 Octave 還是 R&lt;br&gt;
都會出現以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dyld:&lt;span class="w"&gt; &lt;/span&gt;Library&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;loaded:&lt;span class="w"&gt; &lt;/span&gt;/usr/local/lib/gcc/5/libgfortran.3.dylib
&lt;span class="w"&gt;  &lt;/span&gt;Referenced&lt;span class="w"&gt; &lt;/span&gt;from:&lt;span class="w"&gt; &lt;/span&gt;/usr/local/Cellar/r/3.3.0/R.framework/Versions/3.2/Resources/lib/libR.dylib
&lt;span class="w"&gt;  &lt;/span&gt;Reason:&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;found
Trace/BPT&lt;span class="w"&gt; &lt;/span&gt;trap:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;最近在 mac 上更新了 gcc 6 後，不管是開 Octave 還是 R&lt;br&gt;
都會出現以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dyld:&lt;span class="w"&gt; &lt;/span&gt;Library&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;loaded:&lt;span class="w"&gt; &lt;/span&gt;/usr/local/lib/gcc/5/libgfortran.3.dylib
&lt;span class="w"&gt;  &lt;/span&gt;Referenced&lt;span class="w"&gt; &lt;/span&gt;from:&lt;span class="w"&gt; &lt;/span&gt;/usr/local/Cellar/r/3.3.0/R.framework/Versions/3.2/Resources/lib/libR.dylib
&lt;span class="w"&gt;  &lt;/span&gt;Reason:&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;found
Trace/BPT&lt;span class="w"&gt; &lt;/span&gt;trap:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;p&gt;這是因為原本的 lib 會去找 /usr/local/lib/gcc/5/ 下的 lib&lt;br&gt;
但是更新過後已經被變成 /usr/local/lib/gcc/6/ 了&lt;br&gt;
所以只要從 &lt;code&gt;/usr/local/lib/gcc/5/&lt;/code&gt; 建立 soft link 到 &lt;code&gt;/usr/local/lib/gcc/6/&lt;/code&gt; 即可&lt;br&gt;
( 版本號則要根據自身 gcc 的版本來做修改 )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/usr/local/lib/gcc/5/&lt;span class="w"&gt; &lt;/span&gt;/usr/local/lib/gcc/6/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Homebrew/legacy-homebrew/issues/39929"&gt;R and julia won't start after upgrade (perhaps gcc 5.1, Xcode 6.3.2, or Command Line Tools 6.3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="R"></category><category term="mac"></category></entry><entry><title>External.js - Load HTML in Reveal.js</title><link href="https://blog.wei-lee.me/posts/tech/2016/03/external-js-load-html-in-reveal-js" rel="alternate"></link><published>2016-03-23T01:23:00+08:00</published><updated>2016-03-23T01:23:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-03-23:/posts/tech/2016/03/external-js-load-html-in-reveal-js</id><summary type="html">&lt;p&gt;reavel.js 提供了 &lt;code&gt;data-markdown="example.md"&lt;/code&gt; 這個 tag 可以載入外部的 markdown&lt;br&gt;
卻沒提供可以載入 html 的 tag&lt;br&gt;
於是就有人寫了這個&lt;a href="https://github.com/calevans/external"&gt;External.js&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;reavel.js 提供了 &lt;code&gt;data-markdown="example.md"&lt;/code&gt; 這個 tag 可以載入外部的 markdown&lt;br&gt;
卻沒提供可以載入 html 的 tag&lt;br&gt;
於是就有人寫了這個&lt;a href="https://github.com/calevans/external"&gt;External.js&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;有了 External.js，就可以不用把所有的內容都寫在 &lt;code&gt;index.html&lt;/code&gt; 裡面&lt;/p&gt;
&lt;h1 id="install"&gt;Install&lt;/h1&gt;
&lt;h2 id="method1-download"&gt;Method1: Download&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;到 &lt;a href="https://github.com/calevans/external"&gt;external&lt;/a&gt; 下載&lt;/li&gt;
&lt;li&gt;把 extneral 裡面的 external 資料夾放到 plugin 裡面&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;index.html&lt;/code&gt; 中的 &lt;code&gt;Reveal.initalize&lt;/code&gt; 這個 block 加入下面的內容&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plugin/external/external.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[data-external]&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="method2-submodule"&gt;Method2: Submodule&lt;/h2&gt;
&lt;p&gt;不過為了讓他的更新也能被追蹤，我使用了 git submodule&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;https://github.com/calevans/external&lt;span class="w"&gt; &lt;/span&gt;plugin/external
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;index.html&lt;/code&gt; 中的 &lt;code&gt;Reveal.initalize&lt;/code&gt; 這個 block 加入下面的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plugin/external/external/external.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[data-external]&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;( 注意兩種方式加入的內容有些微的不同 )&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;p&gt;之後就能使用 &lt;code&gt;data-external&lt;/code&gt; 這個 tag 來載入外部的 html&lt;/p&gt;
&lt;h2 id="indexhtml"&gt;原本的 index.html&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;data-external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module_01/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="html"&gt;外部 html&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;&amp;lt;!-- module_01/index.html --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; This is external &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="html_1"&gt;載入後的 html&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;data-external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module_01/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cm"&gt;&amp;lt;!-- module_01/index.html --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; This is external &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="JavaScript"></category><category term="reveal.js"></category></entry><entry><title>男子漢理論</title><link href="https://blog.wei-lee.me/posts/tech/2016/03/article-man-theory" rel="alternate"></link><published>2016-03-15T02:13:00+08:00</published><updated>2016-03-15T02:13:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-03-15:/posts/tech/2016/03/article-man-theory</id><summary type="html">&lt;p&gt;這篇文實在太有趣了，還是該留下來做個紀錄 XD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這篇文實在太有趣了，還是該留下來做個紀錄 XD&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="_1"&gt;男子漢理論&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;真正的男子漢 programmer 是不會用那些亂七八糟，花枝招展的，所謂整合開發環境。
真正的男子漢 programmer 就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫程式。
如果你不知道這是甚麼東東，簡單來說，就是男子漢用的”記事本”。
當然在花枝招展，看來很娘的 Wxxxxws下要找到這些男子漢編輯器有一定難度，
但這絕對難不倒一個真正的男子漢 programmer。

另外真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫網頁。
真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 HTML，
因為那些亂七八糟，花枝招展的所謂應用程式寫出來的網頁
加了一大堆亂七八糟的 tag 根本沒有人看得懂。

真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫論文。
真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 latex。
因為那些亂七八糟，花枝招展的所謂應用程式寫出來的論文，字型醜的要命，
圖還會亂跑，換一台電腦就換一個樣子，一點也不像男子漢做出來的東西。

最後你可以看出真正的男子漢 programmer 不管做什麼事，
都只用男子漢編輯器就能搞定，這就是成為男子漢 programmer 的重點。
當然最好還是用 ed 這種神物，只是現存看過 ed 的 programmer
可能比看過”真理”的煉金術士還少，在此就不苛求了。

--Re: 男子漢理論,pangfeng (P老師)@pangfeng, ptt2.cc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From &lt;a href="http://cpmarkchang.logdown.com/pages/about-me"&gt;MARK CHANG'S BLOG - About Me&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Inspiring"></category><category term="Vim"></category></entry><entry><title>Reveal.js 安裝錯誤</title><link href="https://blog.wei-lee.me/posts/tech/2016/02/reveal-s-installation-error" rel="alternate"></link><published>2016-02-20T03:57:00+08:00</published><updated>2016-02-20T03:57:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-02-20:/posts/tech/2016/02/reveal-s-installation-error</id><summary type="html">&lt;p&gt;當我安裝步驟執行到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會跳出很多錯誤訊息&lt;/p&gt;
</summary><content type="html">&lt;p&gt;當我安裝步驟執行到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會跳出很多錯誤訊息&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;這才發現 Reveal.js 要用 python &amp;gt;= 2.5 and &amp;lt; 3.0.0&lt;br&gt;
而我預設的 python 是 python3.5&lt;br&gt;
所以只要像下面的指令把 python 指到 python2 就可以了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="o"&gt;=&lt;/span&gt;python2.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;--python=&lt;/code&gt; 後面是 python2 的執行擋，需要根據自己的設定做調整&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js/"&gt;Reveal.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="JavaScript"></category><category term="reveal.js"></category></entry><entry><title>解決安裝 IRKernel 缺少 zmq.h</title><link href="https://blog.wei-lee.me/posts/tech/2016/02/resolve-irkernel-missing-zmqh" rel="alternate"></link><published>2016-02-20T03:42:00+08:00</published><updated>2016-02-20T03:42:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-02-20:/posts/tech/2016/02/resolve-irkernel-missing-zmqh</id><summary type="html">&lt;!--more--&gt;

&lt;h2 id="irkernel"&gt;安裝 IRKernel&lt;/h2&gt;
&lt;p&gt;進入 R 的命令列，輸入下面的指令&lt;br&gt;
就能安裝 IRKernel，以後就能在 jupyter 中使用 R&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install.packages(c(&amp;#39;rzmq&amp;#39;,&amp;#39;repr&amp;#39;,&amp;#39;IRkernel&amp;#39;,&amp;#39;IRdisplay&amp;#39;),
                 repos = c(&amp;#39;http://irkernel.github.io/&amp;#39;, getOption(&amp;#39;repos&amp;#39;)))
IRkernel::installspec()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;錯 …&lt;/h2&gt;</summary><content type="html">&lt;!--more--&gt;

&lt;h2 id="irkernel"&gt;安裝 IRKernel&lt;/h2&gt;
&lt;p&gt;進入 R 的命令列，輸入下面的指令&lt;br&gt;
就能安裝 IRKernel，以後就能在 jupyter 中使用 R&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install.packages(c(&amp;#39;rzmq&amp;#39;,&amp;#39;repr&amp;#39;,&amp;#39;IRkernel&amp;#39;,&amp;#39;IRdisplay&amp;#39;),
                 repos = c(&amp;#39;http://irkernel.github.io/&amp;#39;, getOption(&amp;#39;repos&amp;#39;)))
IRkernel::installspec()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;錯誤訊息&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;interface.cpp:22:10: fatal error: &amp;#39;zmq.h&amp;#39; file not found
#include &amp;lt;zmq.h&amp;gt;
         ^
1 error generated.
make: *** [interface.o] Error 1
ERROR: compilation failed for package &amp;#39;rzmq&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;解決&lt;/h2&gt;
&lt;p&gt;這時候就要將缺少的套件補齊&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;czmq&lt;span class="w"&gt; &lt;/span&gt;zmq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再執行一次最上面的安裝指令&lt;/p&gt;
&lt;p&gt;接著在指令列執行輸入下面的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter&lt;span class="w"&gt; &lt;/span&gt;qtconsole&lt;span class="w"&gt; &lt;/span&gt;--kernel&lt;span class="o"&gt;=&lt;/span&gt;ir
jupyter&lt;span class="w"&gt; &lt;/span&gt;console&lt;span class="w"&gt; &lt;/span&gt;--kernel&lt;span class="o"&gt;=&lt;/span&gt;ir
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝成功後就可以看到&lt;br&gt;
&lt;img alt="R_in_jupyter" src="/images/posts-image/2016-02-20-resolve-irkernel-missing-zmqh/pWf6j0q.png"&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/IRkernel/IRkernel/issues/50"&gt;Failed to install rzmq #50&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IRkernel/IRkernel"&gt;IRkernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="R"></category><category term="Jupyter"></category></entry><entry><title>在 mac 上安裝 gcc</title><link href="https://blog.wei-lee.me/posts/tech/2016/01/install-gcc-on-mac" rel="alternate"></link><published>2016-01-06T06:40:00+08:00</published><updated>2016-01-06T06:40:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2016-01-06:/posts/tech/2016/01/install-gcc-on-mac</id><summary type="html">&lt;p&gt;最近用 brew 來安裝 gcc 5.3，一直卡在 &lt;code&gt;make --bootstrap&lt;/code&gt;&lt;br&gt;
放了幾個小時還是停在這&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近用 brew 來安裝 gcc 5.3，一直卡在 &lt;code&gt;make --bootstrap&lt;/code&gt;&lt;br&gt;
放了幾個小時還是停在這&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;之後才查到，要用 xcode 的命令來安裝&lt;br&gt;
&lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;主要是因為 homebrew 下載的是還沒 compile 過的版本&lt;br&gt;
而 compile gcc 需要非常長的時間&lt;br&gt;
根據 Reference 中的文章，至少要超過 45 分鐘 ( 雖然我放了一天還是沒好 )&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/24966404/brew-install-gcc-too-time-consuming"&gt;brew install gcc too time consuming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/788256/brew-install-gcc-mac-os-10-9-mavericks"&gt;brew install gcc /Mac OS 10.9 Mavericks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="C++"></category><category term="mac"></category><category term="Deprecated"></category></entry><entry><title>在 jupyter 中同時使用 Python2 Python3</title><link href="https://blog.wei-lee.me/posts/tech/2015/11/used-in-the-jupyter-python2-python3" rel="alternate"></link><published>2015-11-02T15:12:00+08:00</published><updated>2015-11-02T15:12:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2015-11-02:/posts/tech/2015/11/used-in-the-jupyter-python2-python3</id><summary type="html">&lt;p&gt;先安裝 Python2 和 Python3 的 ipython notebook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip2&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ipython&lt;span class="w"&gt; &lt;/span&gt;notebook
pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ipython&lt;span class="w"&gt; &lt;/span&gt;notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的 ipython 執行下面的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython2&lt;span class="w"&gt; &lt;/span&gt;kernelspec&lt;span class="w"&gt; &lt;/span&gt;install-self
ipython3&lt;span class="w"&gt; &lt;/span&gt;kernelspec&lt;span class="w"&gt; &lt;/span&gt;install-self
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;先安裝 Python2 和 Python3 的 ipython notebook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip2&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ipython&lt;span class="w"&gt; &lt;/span&gt;notebook
pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ipython&lt;span class="w"&gt; &lt;/span&gt;notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的 ipython 執行下面的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython2&lt;span class="w"&gt; &lt;/span&gt;kernelspec&lt;span class="w"&gt; &lt;/span&gt;install-self
ipython3&lt;span class="w"&gt; &lt;/span&gt;kernelspec&lt;span class="w"&gt; &lt;/span&gt;install-self
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;p&gt;就能在 ipython notebook 裡面同時使用兩種版本的 Python 了&lt;br&gt;
&lt;img alt="1_jupyter" src="/images/posts-image/2015-11-02-used-in-the-jupyter-python2-python3/IxopQfG.png"&gt;&lt;br&gt;
Python2 上面是另一個也被 jupyter notebook 支援的語言 julia&lt;br&gt;
最近才剛開始碰，有機會再來分享 julia 的心得&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/30492623/using-both-python-2-x-and-python-3-x-in-ipython-notebook"&gt;Using both Python 2.x and Python 3.x in IPython Notebook&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>解決 django-admin 在 mac 找不到 django.core</title><link href="https://blog.wei-lee.me/posts/tech/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac" rel="alternate"></link><published>2015-05-10T23:42:00+08:00</published><updated>2015-05-10T23:42:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2015-05-10:/posts/tech/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac</id><summary type="html">&lt;h2 id="_1"&gt;問題&lt;/h2&gt;
&lt;p&gt;在 mac 上，用 pip3 安裝完 django 1.8.1 後&lt;br&gt;
執行 &lt;code&gt;django-admin&lt;/code&gt; 出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File &amp;quot;/usr/local/bin/django-admin&amp;quot;, line 2, in &amp;lt;module&amp;gt;
    from django.core import management
ImportError: No module named django.core
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;h2 id="_1"&gt;問題&lt;/h2&gt;
&lt;p&gt;在 mac 上，用 pip3 安裝完 django 1.8.1 後&lt;br&gt;
執行 &lt;code&gt;django-admin&lt;/code&gt; 出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File &amp;quot;/usr/local/bin/django-admin&amp;quot;, line 2, in &amp;lt;module&amp;gt;
    from django.core import management
ImportError: No module named django.core
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h2 id="_2"&gt;解決&lt;/h2&gt;
&lt;p&gt;找到 &lt;code&gt;/usr/local/lib/python3.4/site-packages/django/bin/django-admin.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把第一行的 &lt;code&gt;#!/usr/bin/env python&lt;/code&gt; 改成 Python 的路徑&lt;br&gt;
以我為例，我改成 &lt;code&gt;#!/usr/local/bin/python3.4&lt;/code&gt;&lt;br&gt;
之後就可以執行了&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Django"></category><category term="mac"></category></entry><entry><title>rename - 批次更改檔名</title><link href="https://blog.wei-lee.me/posts/tech/2015/02/rename" rel="alternate"></link><published>2015-02-22T15:06:00+08:00</published><updated>2015-02-22T15:06:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2015-02-22:/posts/tech/2015/02/rename</id><summary type="html">&lt;p&gt;只是要改變一兩個檔案的檔名，只要 &lt;code&gt;mv&lt;/code&gt; 就很夠用了&lt;br&gt;
但如果要一次改很多相似的檔名就用到 &lt;code&gt;rename&lt;/code&gt; 指令就會更有效率&lt;br&gt;
</summary><content type="html">&lt;p&gt;只是要改變一兩個檔案的檔名，只要 &lt;code&gt;mv&lt;/code&gt; 就很夠用了&lt;br&gt;
但如果要一次改很多相似的檔名就用到 &lt;code&gt;rename&lt;/code&gt; 指令就會更有效率&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;安裝&lt;/h2&gt;
&lt;h3 id="ubuntu-linux-mint"&gt;Ubuntu, Linux Mint&lt;/h3&gt;
&lt;p&gt;預設就已經安裝好了&lt;/p&gt;
&lt;h3 id="mac"&gt;Mac&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;rename
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rename&lt;span class="w"&gt; &lt;/span&gt;s/pattern1/pattern2/&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把 files 中的檔案符合 pattern1 替代成 pattern2&lt;br&gt;
files 要使用萬用字元，pattern 則是使用 regular expression&lt;/p&gt;
&lt;p&gt;在改檔名之前，會想先看會改成什麼樣子&lt;br&gt;
這時候就要加上參數 &lt;code&gt;-n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;需要特別注意要跳脫的字元&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
可以參考下面這篇文章整理需要跳脫的保留字&lt;br&gt;
&lt;a href="http://awei791129.pixnet.net/blog/post/53319618-%5Bregular-expression%5D-使用正規表達時需要-escape-的"&gt;[Regular Expression] 使用正規表達時需要 escape 的保留字&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;保留原本檔名的片段&lt;/h2&gt;
&lt;p&gt;而在批量更改檔名時，常常會需要保留 pattern1 的某些片段&lt;br&gt;
這就需要用到 regular expression 的 group&lt;/p&gt;
&lt;p&gt;例如，我們希望把檔名從 01~05 這五個檔案改成 01A~05A&lt;br&gt;
我們如果只用 &lt;code&gt;rename -n s/\[0-\9]{2}/\[0-9\]{2}A/ *&lt;/code&gt; 就會錯誤&lt;br&gt;
必須要改成像下面這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rename&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;s/&lt;span class="se"&gt;\(\[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-&lt;span class="se"&gt;\9&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;/&lt;span class="se"&gt;\$&lt;/span&gt;1A/&lt;span class="w"&gt; &lt;/span&gt;*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扣除跳脫用的 &lt;code&gt;\&lt;/code&gt;&lt;br&gt;
這個例子在 &lt;code&gt;[0-9]{2}&lt;/code&gt; 外面加上 &lt;code&gt;()&lt;/code&gt;，將他們視為群組&lt;br&gt;
在 pattern2 用 &lt;code&gt;$1&lt;/code&gt;，代替第一個 group&lt;/p&gt;
&lt;p&gt;&lt;img alt="1_mac_rename" src="/images/posts-image/2015-02-22-rename/h1NV6ro.png"&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mix.bruceli.net/2011/01/ubuntu-linuxrename.html"&gt;ubuntu linux 用 rename 指令批次改檔名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/20718/substitute-text-with-sed-and-keep-part-of-the-original-text"&gt;regular expression - Substitute text with sed and keep part of the original text - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Shell Script"></category></entry><entry><title>vimspell - vim 檢查英文文法的套件</title><link href="https://blog.wei-lee.me/posts/tech/2015/02/vim-spell-check" rel="alternate"></link><published>2015-02-14T09:59:00+08:00</published><updated>2015-02-14T09:59:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2015-02-14:/posts/tech/2015/02/vim-spell-check</id><summary type="html">&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=465"&gt;vimspell&lt;/a&gt; 是一套提供 vim 根據字典來檢查文法的套件&lt;br&gt;
有了 vimsepll，寫 Markdown 或 LaTeX 的時候，就不用再怕拼錯字了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=465"&gt;vimspell&lt;/a&gt; 是一套提供 vim 根據字典來檢查文法的套件&lt;br&gt;
有了 vimsepll，寫 Markdown 或 LaTeX 的時候，就不用再怕拼錯字了&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="vundle"&gt;用 vundle 安裝&lt;/h2&gt;
&lt;p&gt;在 vimrc 中加入下面這行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle &lt;span class="s1"&gt;&amp;#39;vimspell&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用 &lt;code&gt;:BundleInstall&lt;/code&gt; 安裝&lt;/p&gt;
&lt;h2 id="_1"&gt;字典檔&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://archive.services.openoffice.org/pub/mirror/OpenOffice.org/contrib/dictionaries/"&gt;下載字典檔&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我下載的是 &lt;code&gt;en_US.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解壓縮完後，用 vim 開啟街壓縮完的資料夾&lt;br&gt;
應該會看到下面這樣&lt;br&gt;
&lt;img alt="1_directory" src="/images/posts-image/2015-02-14-vim-spell-check/gLWMnmW.png"&gt;&lt;/p&gt;
&lt;p&gt;接著進入 vim 在 normal mode 輸入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;mkspell&lt;/span&gt; &lt;span class="k"&gt;en&lt;/span&gt; en_US
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;en&lt;/code&gt; 可以自己定義，&lt;code&gt;en\_US&lt;/code&gt; 必須是 .aff 和 .dic 的檔名&lt;br&gt;
檢查一下 vim 資料夾下的 spell 資料夾有沒有新增字典檔，確定有了後就新增完成了&lt;/p&gt;
&lt;h2 id="_2"&gt;設定&lt;/h2&gt;
&lt;p&gt;首先要先定義要根據哪個字典檔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;en 就是剛剛所定義的名稱&lt;/p&gt;
&lt;p&gt;接著 &lt;code&gt;:set spell&lt;/code&gt; 就可以開啟了&lt;br&gt;
&lt;code&gt;:set nospell&lt;/code&gt; 則是關閉&lt;/p&gt;
&lt;p&gt;如果每次都要設定一次，就太麻煩了&lt;br&gt;
我在 vimrc 加入了下面這些&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F7&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufRead&lt;/span&gt; *.txt&lt;span class="p"&gt;,&lt;/span&gt;*.md&lt;span class="p"&gt;,&lt;/span&gt;*.tex &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二行是每次按 F7 就能開啟或關閉 vimspell，也可以換成自己想要的快捷鍵&lt;br&gt;
第三行則是每次遇到副檔名是 txt, md, tex 時就自動開啟 vimspell&lt;/p&gt;
&lt;h2 id="_3"&gt;使用&lt;/h2&gt;
&lt;p&gt;vimspell 被開啟後，就會自動把拼錯的字反白起來&lt;br&gt;
如果有其他的語言一樣會被反白起來&lt;br&gt;
&lt;img alt="2_vimspell_sample" src="/images/posts-image/2015-02-14-vim-spell-check/MGjdAoq.png"&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;指令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;]s&lt;/code&gt; : 跳到下一個錯字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[s&lt;/code&gt; : 跳到上一個錯字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z=&lt;/code&gt; : 開啟建議，可以參考下面的圖，選擇完按 enter 後，就會替換原本的字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zg&lt;/code&gt; : 將目前游標上的字加入字典&lt;br&gt;
         新增的字都會被加到 &lt;code&gt;~/.vim/spell/en.utf-8.add&lt;/code&gt;( 根據語言不同，檔名會不同 )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zug&lt;/code&gt;: 復原加入字典的字 (刪除)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zw&lt;/code&gt; : 加入壞字字典，壞字也會被加入同樣的檔案中，最後面會另外加上 &lt;code&gt;/!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zuw&lt;/code&gt;: 復原加入壞字字典的字 (刪除)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="3_choose_word" src="/images/posts-image/2015-02-14-vim-spell-check/NWHCakj.png"&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;Vim documentation: spell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.go2linux.org/linux/2010/10/how-use-spell-check-vim-795"&gt;How to use spell check with vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ithelp.ithome.com.tw/question/10055602"&gt;[Reply] 如何在 vim 裡用拼字檢查 - iT 邦幫忙 ::IT 知識分享社群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://henry.precheur.org/vim/create_spell_file_for_vim"&gt;Create a spell file for VIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7286207/automatically-enabling-spell-checking-in-vimrc"&gt;vim - Automatically enabling spell checking in vimrc - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Vim"></category></entry><entry><title>gitignore.io</title><link href="https://blog.wei-lee.me/posts/tech/2015/02/gitignoreio" rel="alternate"></link><published>2015-02-03T05:58:00+08:00</published><updated>2015-02-03T05:58:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2015-02-03:/posts/tech/2015/02/gitignoreio</id><summary type="html">&lt;p&gt;每次開一個 git 專案，要為它找適當的 .gitignore，都要上網找模板蠻麻煩的&lt;br&gt;
能不能有個簡單的方法，我開什麼專案就產生怎樣的 .gitignore&lt;br&gt;
然後我就發現了&lt;a href="https://www.gitignore.io"&gt;gitignore.io&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;每次開一個 git 專案，要為它找適當的 .gitignore，都要上網找模板蠻麻煩的&lt;br&gt;
能不能有個簡單的方法，我開什麼專案就產生怎樣的 .gitignore&lt;br&gt;
然後我就發現了&lt;a href="https://www.gitignore.io"&gt;gitignore.io&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;簡單來說 gitignore.io 提供各式各樣的 gitignore，而且可以自動合併成一個 file&lt;br&gt;
最棒的是它有提供 api 讓我們在 command line 上使用&lt;/p&gt;
&lt;h2 id="gitignoreio-on-command"&gt;gitignore.io on command&lt;/h2&gt;
&lt;p&gt;這是 gitignore.io 的官方文件&lt;br&gt;
&lt;a href="https://www.gitignore.io/docs"&gt;doc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;設定&lt;/h3&gt;
&lt;p&gt;以 mac 的 zsh 的使用者為例，只要在執行下面這段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者在 ~/.zshrc 加入下面這段後，執行 &lt;code&gt;source ~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gi&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;https://www.gitignore.io/api/&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定完成後就可以使用 gi 的功能&lt;/p&gt;
&lt;h3 id="_2"&gt;使用&lt;/h3&gt;
&lt;p&gt;基本上只有兩種用法&lt;br&gt;
首先當然要先看 gi 支援哪些 .gitignore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行完會看到一長串的結果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;actionscript,ada,agda,android...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 gi 後面輸入想產生的 .gitignore 的 types&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有超過一個必須用 &lt;code&gt;,&lt;/code&gt; 隔開&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;vim,osx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這樣還不會產生 .gitignore，只會顯示在螢幕上&lt;br&gt;
還要再使用 output redirection 才會有 .gitignore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;vim,osx&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="my-custom-gi"&gt;My Custom gi&lt;/h2&gt;
&lt;p&gt;但用起來還是有點小小的不順手&lt;br&gt;
尤其每次要看 list 都要重新連上網抓一次，挺浪費時間&lt;br&gt;
所以就自己寫了一個新的 gi&lt;br&gt;
我把它放在我的 GitHub 上&lt;br&gt;
&lt;a href="https://github.com/Lee-W/gi_extension"&gt;gi_extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那我的 Custom gi 到底多支援了什麼呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;線下查看 gitignore.io 支援的類型，用更適合閱讀當方式印出&lt;/li&gt;
&lt;li&gt;將 output redirection 寫成一個 option&lt;/li&gt;
&lt;li&gt;支援以空格作為類型的分隔 ( 逗號依然支援 )&lt;br&gt;
   e.g., &lt;code&gt;vim,osx&lt;/code&gt; → &lt;code&gt;vim osx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;安裝&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/Lee-W/gi_extension&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gi_extension
sudo&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;gi_extension.sh&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/gi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果之前有在 shell 的設定檔中，設定過 gitignore.io 提供的 gi&lt;br&gt;
記得要把它註解掉，不然那個 gi 會蓋過我的 gi&lt;/p&gt;
&lt;p&gt;如果想移除掉&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/Lee-W/gi_extension&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gi_extension
sudo&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;gi_extension.sh&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/gi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;使用&lt;/h2&gt;
&lt;p&gt;第一次使用的時候要先下 &lt;code&gt;gi -u&lt;/code&gt;&lt;br&gt;
將原本 &lt;code&gt;gi list&lt;/code&gt; 的 output，儲存到 &lt;code&gt;~/.gi_list&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;顯示支援類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以表格的方式輸出支援的類型&lt;br&gt;
   目前設定一個 row 容納 5 個 column，每個 column 長度為 25  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;-l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1_gi_l.png" src="/images/posts-image/2015-02-03-gitignoreio/WjrHpdZ.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以字母的順序輸出&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;-L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="2_gi_L.png" src="/images/posts-image/2015-02-03-gitignoreio/9j2PdP4.png"&gt;&lt;/p&gt;
&lt;h3 id="gitignore"&gt;顯示 .gitignore 的內容&lt;/h3&gt;
&lt;p&gt;跟原本的 gi 一樣，只是多支援了以空白作為分隔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# e.g., gi vim osx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="gitignore_1"&gt;輸出 .gitignore&lt;/h3&gt;
&lt;p&gt;將結果加入目前資料夾下的 .gitignore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# e.g., gi -a vim osx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在目前的資料夾產生一份新的 .gitignore 取代舊有的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# e.g.,e.g.,, gi -e vim osx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;更新本地端的支援列表&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi&lt;span class="w"&gt; &lt;/span&gt;-u
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其實每次 gi 被執行的時候，都會在 background 更新列表&lt;br&gt;
但是這次的更新，下次才能被使用&lt;br&gt;
所以如果想要強制更新就可以用上這個指令&lt;/p&gt;</content><category term="Tech"></category><category term="Git"></category><category term="Deprecated"></category><category term="Utility"></category></entry><entry><title>驅動 BCM43228 網卡在 Linux 的無線功能</title><link href="https://blog.wei-lee.me/posts/tech/2015/01/enable-bcm43228-wifi-on-linux" rel="alternate"></link><published>2015-01-28T08:52:00+08:00</published><updated>2015-01-28T08:52:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2015-01-28:/posts/tech/2015/01/enable-bcm43228-wifi-on-linux</id><summary type="html">&lt;p&gt;最近本來下定決心要來玩 arch linux&lt;br&gt;
結果竟然被筆電的網卡搞死了&lt;br&gt;
抓了官網的驅動竟然不能 build...&lt;/p&gt;
&lt;p&gt;沒想到改成灌 Linux mint 17，依然有問題＝＝&lt;br&gt;
最後找到一個解決的辦法&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近本來下定決心要來玩 arch linux&lt;br&gt;
結果竟然被筆電的網卡搞死了&lt;br&gt;
抓了官網的驅動竟然不能 build...&lt;/p&gt;
&lt;p&gt;沒想到改成灌 Linux mint 17，依然有問題＝＝&lt;br&gt;
最後找到一個解決的辦法&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;先確定你的網卡是不是 BC43228&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lspci&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;Network
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是的話就能開始進行安裝了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;linux-headers-generic
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--reinstall&lt;span class="w"&gt; &lt;/span&gt;bcmwl-kernel-source
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果成功的話，Wifi 應該馬上就能用了&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.beyondlogic.org/index.php?title=Ubuntu14.04_Acer_Aspire_V5_571_Broadcom_BCM43228_WiFi"&gt;Ubuntu14.04 Acer Aspire V5 571 Broadcom BCM43228 WiFi - BeyondLogic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Dual Boot"></category></entry><entry><title>Gitbook on Command Line</title><link href="https://blog.wei-lee.me/posts/tech/2015/01/gitbook-on-command-line" rel="alternate"></link><published>2015-01-23T07:34:00+08:00</published><updated>2015-01-23T07:34:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2015-01-23:/posts/tech/2015/01/gitbook-on-command-line</id><summary type="html">&lt;p&gt;最近比較認真在寫 Gitbook，順便記錄一下該怎麼用&lt;br&gt;
簡單來說 Gitbook 就是可以使用 Markdown 來寫書的平台，可以轉成各種電子書的格式&lt;br&gt;
目前已經支援的有 html, pdf, ePUB, MOBI&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近比較認真在寫 Gitbook，順便記錄一下該怎麼用&lt;br&gt;
簡單來說 Gitbook 就是可以使用 Markdown 來寫書的平台，可以轉成各種電子書的格式&lt;br&gt;
目前已經支援的有 html, pdf, ePUB, MOBI&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;之前寫了一本 Clean Code 的筆記&lt;br&gt;
最近又開始寫一本 FreeBSD 和網管相關的 Gitbook&lt;br&gt;
如果有興趣可以到&lt;a href="https://www.gitbook.com/@lee-w"&gt;我的 Gitbook&lt;/a&gt; 上看看 XD&lt;/p&gt;
&lt;p&gt;目前 Gitbook 主要支援網站上的 Editor，不過我比較習慣在本地端進行編輯&lt;br&gt;
雖然有 Gitbook 編輯器，但有時候用起來還是會出點問題&lt;br&gt;
所以最後還是決定來學如何用 command line + sublime 寫 Gitbook&lt;/p&gt;
&lt;h2 id="gitbook"&gt;安裝 Gitbook&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;gitbook&lt;span class="w"&gt; &lt;/span&gt;-g
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="gitbook_1"&gt;開始撰寫 Gitbook&lt;/h2&gt;
&lt;p&gt;一本 Gitbook 一般都會包含 &lt;code&gt;SUMMARY.md&lt;/code&gt;, &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;book.json&lt;/code&gt;&lt;br&gt;
像我的 Learning Python 筆記的檔案架構大概長的是這樣&lt;br&gt;
&lt;img alt="1_learning_python_project_structure" src="/images/posts-image/2015-01-23-gitbook-on-command-line/6RDgdVZ.png"&gt;&lt;/p&gt;
&lt;p&gt;README.md 是這本書的簡介&lt;br&gt;
package.json 是額外使用的 package 的定義和設定&lt;br&gt;
book.json 是這本書的額外設定&lt;br&gt;
這裡不會多做介紹，可以參考&lt;a href="#Reference"&gt;Reference&lt;/a&gt; 的網站，裡面有很詳細的介紹&lt;/p&gt;
&lt;p&gt;最重要的是 SUMMARY.md，它會定義整本 gitbook 的架構&lt;br&gt;
每個章節下面都還可以給予更多的小節&lt;br&gt;
下面是我 Learning Python 的 SUMMARY.md&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;# Summary&lt;/span&gt;

&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;Introduction&lt;/span&gt;](&lt;span class="na"&gt;README.md&lt;/span&gt;)
&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;Getting Started&lt;/span&gt;](&lt;span class="na"&gt;1_getting_started/README.md&lt;/span&gt;)
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;A Python Q&amp;amp;A Session&lt;/span&gt;](&lt;span class="na"&gt;1_getting_started/a_python_q&amp;amp;a_session.md&lt;/span&gt;)
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;How Python Runs Programs&lt;/span&gt;](&lt;span class="na"&gt;1_getting_started/how_python_runs_programs.md&lt;/span&gt;)
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;How You Run Programs&lt;/span&gt;](&lt;span class="na"&gt;1_getting_started/how_you_run_programs.md&lt;/span&gt;)
&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;Types and Operations&lt;/span&gt;](&lt;span class="na"&gt;2_types_and_operations/README.md&lt;/span&gt;)
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;Introducing Python Object Types&lt;/span&gt;](&lt;span class="na"&gt;2_types_and_operations/introducing_python_object_types.md&lt;/span&gt;)
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;Numeric Types&lt;/span&gt;](&lt;span class="na"&gt;2_types_and_operations/numeric_types.md&lt;/span&gt;)
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;The Dynamic Typing Interlude&lt;/span&gt;](&lt;span class="na"&gt;2_types_and_operations/the_dynamic_typing_interlude.md&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這是預覽的結果&lt;br&gt;
&lt;img alt="2_learning_python_web" src="/images/posts-image/2015-01-23-gitbook-on-command-line/d3NP0xi.png"&gt;&lt;/p&gt;
&lt;p&gt;下了這個指令後就會根據 SUMMARY.md 的定義，自動產生相對應資料夾和檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitbook&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著就可以開始編輯裡面的檔案了&lt;/p&gt;
&lt;h2 id="_1"&gt;預覽&lt;/h2&gt;
&lt;p&gt;寫完之後當然預覽一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitbook&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用了這個指令後就會為目前的目錄開一個預覽 HTML 的 port&lt;br&gt;
只要在瀏覽器上輸入 &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;br&gt;
就可以預覽剛剛寫的 Gitbook&lt;br&gt;
只要有更新後存擋，重新整理就能看到更新後的結果&lt;/p&gt;
&lt;h2 id="_2"&gt;輸出&lt;/h2&gt;
&lt;p&gt;在 export 前，需要為 pdf, epub, mobi 三種格式多安裝程式才能使用&lt;br&gt;
先到的官網下載 &lt;a href="http://calibre-ebook.com/download"&gt;Calibre&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以 mac 為例&lt;br&gt;
需要下面這個指令，為 ebook-covert 建立一個捷徑，讓 gitbook 可以找到這個功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/Applications/calibre.app/Contents/MacOS/ebook-convert&lt;span class="w"&gt; &lt;/span&gt;/usr/local/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下的四個指令依序可以產生 html, pdf, epub, mobi&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitbook&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;./
gitbook&lt;span class="w"&gt; &lt;/span&gt;pdf&lt;span class="w"&gt; &lt;/span&gt;./
gitbook&lt;span class="w"&gt; &lt;/span&gt;epub&lt;span class="w"&gt; &lt;/span&gt;./
gitbook&lt;span class="w"&gt; &lt;/span&gt;mobi&lt;span class="w"&gt; &lt;/span&gt;./
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後面可以多指定一個參數 &lt;code&gt;--output="Directory"&lt;/code&gt;&lt;br&gt;
"Directory" 換成你要的位置或檔名&lt;br&gt;
如果不指定，預設 html 會 export 到 _book 裡面，其他檔案則會以 book 命名&lt;/p&gt;
&lt;h2 id="publish-gitbookcom"&gt;Publish 到 Gitbook.com 上&lt;/h2&gt;
&lt;p&gt;先到&lt;a href="https://www.gitbook.com"&gt;Gitbook 官網&lt;/a&gt; 上註冊帳號&lt;br&gt;
接著 create a new book，到 setting 頁面往下拉，就會看到一個 URL&lt;/p&gt;
&lt;p&gt;接下來的操作就跟 git 基本上是一樣的，init, add, commit ... 等&lt;br&gt;
只有在 remote 的設定有點不同&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;gitbook&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;gitbook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡要輸入的帳號、密碼是 gitbook 上的，不是與其連結的帳號的&lt;br&gt;
如果還沒設定就要再去自己的 profile 內設定&lt;/p&gt;
&lt;p&gt;&lt;a name="reference"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GitbookIO/gitbook"&gt;Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://help.gitbook.io/index.html"&gt;GitBook Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codedata.com.tw/social-coding/gitbook-self-publishing/"&gt;深入淺出 GitBook 寫作與自助出版，電子書也能多人協作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Git Book"></category></entry><entry><title>Android Studio + Genymotion 安裝</title><link href="https://blog.wei-lee.me/posts/tech/2014/12/android-studio-and-genymotion-installation" rel="alternate"></link><published>2014-12-29T09:26:00+08:00</published><updated>2014-12-29T09:26:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2014-12-29:/posts/tech/2014/12/android-studio-and-genymotion-installation</id><summary type="html">&lt;p&gt;Android Studio 最近 Google 在推行的 Android IDE，前身是 IntelliJ IDEA&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Android Studio 最近 Google 在推行的 Android IDE，前身是 IntelliJ IDEA&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;它的檔案架構跟 eclipse 差蠻多的，所以用不同的 IDE 來協作會有點麻煩&lt;br&gt;
就我的經驗 Android Studio 比 eclipse 來得穩定一些&lt;br&gt;
反正現在還有 Google 在背後支持它，就來試試看吧 XD&lt;/p&gt;
&lt;p&gt;Android Studio 正式版已經發布了，現在好像完全無法把 sdk 放在 Android Studio 資料夾內&lt;br&gt;
所以之前沒有把 sdk 獨立出來的，記得要獨立出來，不然可能會發生無法更新的問題&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#download-android-studio"&gt;Download Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-jdk"&gt;Install JDK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;設定環境變數&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-android-studio"&gt;Install Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-sdk-manager"&gt;Install SDK manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sdk-setup"&gt;SDK setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emulator-accelerator"&gt;Emulator Accelerator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#genymotion"&gt;Genymotion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#download"&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-ide-plug-in"&gt;Install IDE plug-in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;h2 id="download-android-studio"&gt;Download Android Studio&lt;/h2&gt;
&lt;p&gt;先到&lt;a href="https://developer.android.com/sdk/installing/studio.html"&gt;官網&lt;/a&gt;下載 Android Studio ( 這篇文以 Windows 為例 )&lt;/p&gt;
&lt;p&gt;&lt;img alt="1_download" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/iFQ6JJY.png"&gt;&lt;/p&gt;
&lt;p&gt;下載後會進入到下面的教學頁面&lt;br&gt;
其實寫得還蠻清楚的，所以如果可以接受就可以跳過以下的教學了 XD&lt;br&gt;
&lt;img alt="2_Installation_Guide" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/gkttlS9.png"&gt;&lt;/p&gt;
&lt;h2 id="install-jdk"&gt;Install JDK&lt;/h2&gt;
&lt;p&gt;在安裝 Android Studio 前，要先安裝好 JDK&lt;br&gt;
現在最新的版本是 JDK 8，可以到&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;這個連結&lt;/a&gt;下載&lt;/p&gt;
&lt;p&gt;&lt;img alt="3_jdk1" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/0om5D2M.png"&gt;&lt;br&gt;
選好自己的作業系統&lt;br&gt;
&lt;img alt="4_jdk2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/D0G7XLq.png"&gt;&lt;br&gt;
再來就是一直下一步囉 XD&lt;/p&gt;
&lt;h3 id="_1"&gt;設定環境變數&lt;/h3&gt;
&lt;p&gt;安裝完 JDK 後，我們還需要設定環境變數&lt;br&gt;
以 Win7 為例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;電腦  內容 → 進階系統設定 → 進階 → 環境變數&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著在 &lt;code&gt;系統變數&lt;/code&gt; 這個欄位按下 &lt;code&gt;新增&lt;/code&gt;&lt;br&gt;
變數名稱 輸入 &lt;code&gt;JAVA_HOME&lt;/code&gt; ( 可能會因為 Android Studio 的版本而不同 )&lt;br&gt;
變數值 輸入 你安裝 JDK 的路徑 (e.g. &lt;code&gt;C:\Program Files\Java\jdk1.8.0_20&lt;/code&gt;)&lt;br&gt;
&lt;img alt="5_env_var" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/KYG8pBO.png"&gt;&lt;/p&gt;
&lt;h2 id="install-android-studio"&gt;Install Android Studio&lt;/h2&gt;
&lt;p&gt;安裝過程中會問要讓&lt;strong&gt;目前使用者&lt;/strong&gt;使用還是&lt;strong&gt;所有使用者&lt;/strong&gt;使用&lt;br&gt;
再來會要你選安裝目錄&lt;br&gt;
如果不想理它，就一直下一步吧&lt;br&gt;
除了 Android Studio 外，可能還會安裝一些 Dependent 的套件&lt;br&gt;
不過就放著讓他跑就可以了&lt;/p&gt;
&lt;h2 id="install-sdk-manager"&gt;Install SDK manager&lt;/h2&gt;
&lt;p&gt;自從 0.8.14 版之後，SDK Manager 就不會再跟 Android Studio 綁在一起&lt;br&gt;
所以要額外&lt;a href="https://developer.android.com/sdk/index.html?hl=i"&gt;下載 SDK tools&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果是在 0.8.14 版前安裝的也不用擔心，更新後需要多做設定
Android Studio 會自動幫你把 SDK 的路徑設定到原本的位置
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把網頁往下拉會看到 SDK Tools Only&lt;br&gt;
&lt;img alt="18_sdk_download" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/TctIzTa.png"&gt;&lt;br&gt;
下載完解壓縮到你要的路徑&lt;br&gt;
之後設定 SDK manager 設定到這個路徑就可以了&lt;/p&gt;
&lt;p&gt;開始 Android Studio&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Configure → Project Default → Project Structure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="20_set_sdk_1" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/Tj82hvs.png"&gt;&lt;/p&gt;
&lt;p&gt;記得要把 SDK 的路徑改成剛剛安裝的路徑&lt;br&gt;
&lt;img alt="21_set_sdk_2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/ETqkNhX.png"&gt;&lt;/p&gt;
&lt;h2 id="sdk-setup"&gt;SDK setup&lt;/h2&gt;
&lt;p&gt;接著我們要設定 SDK&lt;br&gt;
現在最新的版本是 Android 5.0 (API 21)&lt;/p&gt;
&lt;p&gt;先開啟 Android Studio，進入 &lt;code&gt;Configure&lt;/code&gt;&lt;br&gt;
&lt;img alt="6_SDK1" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/c8rDZxZ.png"&gt;&lt;br&gt;
進入 &lt;code&gt;SDK Manager&lt;/code&gt;&lt;br&gt;
&lt;img alt="7_SDK2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/pBVHp7S.png"&gt;&lt;br&gt;
把選單拉到 API 21 選起來&lt;br&gt;
&lt;img alt="19_sdk_21" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/3lytBi2.png"&gt;&lt;/p&gt;
&lt;p&gt;接著把選單拉到最後選&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Android Support Repository&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Android support Library&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coogle Play services&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Repository&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google USB Driver&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intel X86 Emulator Accelerator(HAXM installer)&lt;/strong&gt;&lt;br&gt;
    最後的這個 HAXM 是為了讓模擬器加速用的，從 SDK manager 下載完之後，還有另外的安裝步驟&lt;br&gt;
&lt;img alt="9_SDK4" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/UM8w30n.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;安裝到這裡 Android Studio 已經可以使用了&lt;/strong&gt;，不過還可以再做一些設定讓手機模擬器跑得更快&lt;/p&gt;
&lt;h2 id="emulator-accelerator"&gt;Emulator Accelerator&lt;/h2&gt;
&lt;p&gt;在安裝 HAXM 前要先確定 Intel VT-x 是否有在你的 BIOS 被啟用&lt;br&gt;
我沒遇到這個問題，所以我也不知道怎麼解決＠＠&lt;br&gt;
可以在 cmd 下 &lt;code&gt;sc query intelhaxm&lt;/code&gt; 來看有沒有開啓，只要有看到 Running 應該就是沒問題了&lt;/p&gt;
&lt;p&gt;再來到 Android Studio 的目錄下找到 HAXM 的安裝檔&lt;br&gt;
它被放在 &lt;code&gt;...\android-studio\sdk\extras\intel\Hardware_Accelerated_Execution_Manager&lt;/code&gt;&lt;br&gt;
... 指的是安裝的目錄&lt;/p&gt;
&lt;p&gt;看到 &lt;code&gt;intelhaxm&lt;/code&gt; 按下去 !&lt;br&gt;
&lt;img alt="10_Intel_accelator" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/NX8lULd.png"&gt;&lt;br&gt;
一直按下一步就大功告成了&lt;/p&gt;
&lt;p&gt;不過 ...&lt;br&gt;
這樣還是不夠快，我們需要更快的模擬器！&lt;br&gt;
Genymotion ！！！&lt;/p&gt;
&lt;h1 id="genymotion"&gt;Genymotion&lt;/h1&gt;
&lt;p&gt;安裝 Genymotion 的模擬器前，我們必須先到&lt;a href="http://www.genymotion.com/"&gt;官網&lt;/a&gt;註冊&lt;/p&gt;
&lt;h2 id="download"&gt;Download&lt;/h2&gt;
&lt;p&gt;進入下載頁面後，往下拉會看到 Windows，mac 和 Liunx 版&lt;/p&gt;
&lt;p&gt;Windows 只要直接安裝就可以了，它會連 Oracle Virtual Box 一起安裝&lt;br&gt;
&lt;img alt="11_genymotiong_win" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/4oUXeea.png"&gt;&lt;/p&gt;
&lt;p&gt;mac 和 Linux 還要額外先安裝 &lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;Oracle Virtual Box&lt;/a&gt;&lt;br&gt;
&lt;img alt="12_genymotion_Unix" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/NMQD2Jc.png"&gt;&lt;/p&gt;
&lt;h2 id="install-ide-plug-in"&gt;Install IDE plug-in&lt;/h2&gt;
&lt;p&gt;在下載頁面往下拉會看到 genymotion 在 IDE 上的 plugin，可以讓我們從 IDE 內直接開啟 Genymothion&lt;br&gt;
Android Studio 屬於 IntelliJ IDEA，所以我們就照著他上面的指示設定&lt;br&gt;
&lt;img alt="13_genymotion_plug in" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/7C0d8aU.png"&gt;&lt;/p&gt;
&lt;p&gt;開啟 Android Studio&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;File → Settings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="14_plug-in" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/vemudkb.png"&gt;&lt;/p&gt;
&lt;p&gt;找到 Plungins ，接著點 Browse repositories&lt;br&gt;
&lt;img alt="15_plug-in2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/UnP1hiQ.png"&gt;&lt;/p&gt;
&lt;p&gt;上方輸入 Genymotion 就可找到，接著就安裝它吧&lt;br&gt;
&lt;img alt="16_plug-in3" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/xzjsTmz.png"&gt;&lt;/p&gt;
&lt;p&gt;安裝完記得重新啟動 Android Studio，就會在工具列看到多一個按鈕，Genymotion 就安裝完成囉&lt;br&gt;
&lt;img alt="17_plug-in4" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/I2RbFEG.png"&gt;&lt;/p&gt;
&lt;p&gt;第一次使用會要求設定 Genymotion 安裝的資料夾 (e.g. &lt;code&gt;C:\Program Files\Genymobile\Genymotion&lt;/code&gt;)&lt;br&gt;
設定完就可以開始使用 Genymotion 了&lt;/p&gt;
&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IdeaVim: 如果你是重度 Vim 狂熱者，這絕對是你不能不裝的 plugin!!!&lt;/li&gt;
&lt;li&gt;MarkDown: 這個 Plugin 提供直接在 Android Studio 中，Preview Markdown 的功能&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Android"></category></entry><entry><title>Dual Boot FreeBSD Using GRUB2</title><link href="https://blog.wei-lee.me/posts/tech/2014/10/dual-boot-freebsd-using-grub2" rel="alternate"></link><published>2014-10-21T08:56:00+08:00</published><updated>2014-10-21T08:56:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2014-10-21:/posts/tech/2014/10/dual-boot-freebsd-using-grub2</id><summary type="html">&lt;p&gt;其實原本的標題是 &lt;code&gt;Dual Boot FreeBSD with Ubuntu&lt;/code&gt;&lt;br&gt;
這篇文章寫的都是用 Ubuntu 測試的&lt;br&gt;
不過我想只要是 grub2 應該都差不多吧 XD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;其實原本的標題是 &lt;code&gt;Dual Boot FreeBSD with Ubuntu&lt;/code&gt;&lt;br&gt;
這篇文章寫的都是用 Ubuntu 測試的&lt;br&gt;
不過我想只要是 grub2 應該都差不多吧 XD&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="freebsd-grub"&gt;加入 FreeBSD 到 grub 開機選單&lt;/h2&gt;
&lt;h3 id="grub"&gt;更改 grub 的設定檔&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi&lt;span class="w"&gt; &lt;/span&gt;/etc/grub.d/40_Custom
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加入下面這幾行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;menuentry &amp;quot;FreeBSD (/boot/loader)&amp;quot; {
    insmod ufs2
    set root=(hd0,1,a)
    kfreebsd /boot/loader
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;FreeBSD (/boot/loader)&lt;/code&gt; 是在開機時顯示的名稱&lt;br&gt;
&lt;code&gt;(hd0,1,a)&lt;/code&gt; 要根據你的 FreeBSD 灌在磁碟的哪一塊決定&lt;/p&gt;
&lt;h3 id="grub_1"&gt;更新 grub 設定檔&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;update-grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就會在開機選單上看到 FreeBSD 了&lt;/p&gt;
&lt;p&gt;其實還有一些其他的設定方法&lt;br&gt;
可以參考&lt;a href="http://unix.stackexchange.com/questions/16886/set-up-grub2-to-boot-freebsd-using-either-ubuntu-tools-or-liveusb-to-find-what-p"&gt;Set up Grub2 to boot Freebsd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="grub_2"&gt;換 grub 開機順序&lt;/h2&gt;
&lt;p&gt;如果希望改變預設的開機順序，就必須要修改下面的檔案 &lt;code&gt;/etc/default/grub&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi&lt;span class="w"&gt; &lt;/span&gt;/etc/default/grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會看到下面這串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GRUB_DEFAULT=0
#GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=10
GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot;
GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把第 1 行設定為多少 (注意是從 0 開始)，就會預設從那裡開機&lt;/p&gt;
&lt;h2 id="ubuntu-mount-freebsd"&gt;在 ubuntu mount FreeBSD&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;ufs&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ufstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ufs2&lt;span class="w"&gt; &lt;/span&gt;/dev/sda4&lt;span class="w"&gt; &lt;/span&gt;~/freebsd
&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Dual Boot"></category></entry><entry><title>powerline on zsh, vim, tmux</title><link href="https://blog.wei-lee.me/posts/tech/2014/07/powerline-on-zsh-vim-tmux" rel="alternate"></link><published>2014-07-30T15:01:00+08:00</published><updated>2014-07-30T15:01:00+08:00</updated><author><name>Wei Lee</name></author><id>tag:blog.wei-lee.me,2014-07-30:/posts/tech/2014/07/powerline-on-zsh-vim-tmux</id><summary type="html">&lt;p&gt;用了 vim 的 powerline 後覺得很酷，就找了很多的 powerline 來玩&lt;br&gt;
於是這篇文章產生了 XDD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;用了 vim 的 powerline 後覺得很酷，就找了很多的 powerline 來玩&lt;br&gt;
於是這篇文章產生了 XDD&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;這是各個 powerline 的預覽圖&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vim&lt;br&gt;
&lt;img alt="1_vim" src="/images/posts-image/2014-07-30-powerline-on-zsh-vim-tmux/VTM4866.png"&gt;&lt;/li&gt;
&lt;li&gt;tmux&lt;br&gt;
&lt;img alt="2_tmux" src="/images/posts-image/2014-07-30-powerline-on-zsh-vim-tmux/LLJ9xjk.png"&gt;&lt;/li&gt;
&lt;li&gt;zsh&lt;br&gt;
&lt;img alt="3_zsh" src="/images/posts-image/2014-07-30-powerline-on-zsh-vim-tmux/tOvzhK3.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="powerline"&gt;powerline 字體&lt;/h2&gt;
&lt;p&gt;安裝這些 powerline 之前要先下載 powerline 字體&lt;br&gt;
不然可能會無法正常顯示&lt;br&gt;
在 &lt;a href="https://github.com/Lokaltog/powerline-fonts"&gt;powerline-fonts&lt;/a&gt; 下載後，之後安裝就完成了&lt;br&gt;
&lt;em&gt;記得要把終端機的字體條成這些有 powerline 結尾的字體，我當初就是沒用這個卡了很久 = =&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/Lokaltog/powerline-fonts&lt;span class="w"&gt; &lt;/span&gt;/tmp/git/clone
sudo&lt;span class="w"&gt; &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;/tmp/git-clone/powerline-fonts&lt;span class="w"&gt; &lt;/span&gt;/usr/share/fonts/powerline-fonts
sudo&lt;span class="w"&gt; &lt;/span&gt;fc-cache&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;-f
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="zsh"&gt;zsh&lt;/h2&gt;
&lt;p&gt;其實 oh-my-zsh 本身就有 agnoster 了&lt;br&gt;
但我更推薦 &lt;a href="https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme"&gt;oh-my-zsh-powerline-theme&lt;/a&gt;&lt;br&gt;
安裝完之後記得再 zshrc 中加入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZSH_THEME="powerline"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果要更多客制化設定可以參考 repo 內的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme&lt;span class="w"&gt; &lt;/span&gt;/tmp/oh-my-zsh-powerline-theme
/tmp/oh-my-zsh-powerline-theme/oh-my-zsh-powerline-theme/install_in_omz.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="vim"&gt;vim&lt;/h2&gt;
&lt;p&gt;其實我也不是用 vim-powerline&lt;br&gt;
而是 vim-airline&lt;br&gt;
不過基本上好像是差不多的東西，而且 vim-airline 比較輕量化&lt;br&gt;
建議直接用 vundle 這類的套件管理安裝比較方便&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bling/vim-airline"&gt;vim-airline&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tmux"&gt;tmux&lt;/h2&gt;
&lt;p&gt;tmux 有非常多的東西可以客製化設定&lt;br&gt;
在各系統也有不同的安裝方式，就自己看 repo 的 readme 文件吧 XD&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/erikw/tmux-powerline"&gt;tmux-powerline&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Utility"></category></entry></feed>